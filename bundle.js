/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/static/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactRedux = __webpack_require__(166);

	var _redux = __webpack_require__(173);

	var _reducers = __webpack_require__(190);

	var _reducers2 = _interopRequireDefault(_reducers);

	var _App = __webpack_require__(209);

	var _App2 = _interopRequireDefault(_App);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var store = (0, _redux.createStore)(_reducers2.default);

	(0, _reactDom.render)(_react2.default.createElement(
	  _reactRedux.Provider,
	  { store: store },
	  _react2.default.createElement(_App2.default, null)
	), document.getElementById('root'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactChildren = __webpack_require__(5);
	var ReactComponent = __webpack_require__(15);
	var ReactClass = __webpack_require__(21);
	var ReactDOMFactories = __webpack_require__(26);
	var ReactElement = __webpack_require__(8);
	var ReactElementValidator = __webpack_require__(27);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(30);

	var onlyChild = __webpack_require__(31);
	var warning = __webpack_require__(10);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports) {

	/* eslint-disable no-unused-vars */
	'use strict';
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(6);
	var ReactElement = __webpack_require__(8);

	var emptyFunction = __webpack_require__(11);
	var traverseAllChildren = __webpack_require__(13);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactCurrentOwner = __webpack_require__(9);

	var warning = __webpack_require__(10);
	var canDefineProperty = __webpack_require__(12);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (process.env.NODE_ENV !== 'production') {
	      ref = !config.hasOwnProperty('ref') || Object.getOwnPropertyDescriptor(config, 'ref').get ? null : config.ref;
	      key = !config.hasOwnProperty('key') || Object.getOwnPropertyDescriptor(config, 'key').get ? null : '' + config.key;
	    } else {
	      ref = config.ref === undefined ? null : config.ref;
	      key = config.key === undefined ? null : '' + config.key;
	    }
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // Create dummy `key` and `ref` property to `props` to warn users
	    // against its use
	    if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	      if (!props.hasOwnProperty('key')) {
	        Object.defineProperty(props, 'key', {
	          get: function () {
	            if (!specialPropKeyWarningShown) {
	              specialPropKeyWarningShown = true;
	              process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
	            }
	            return undefined;
	          },
	          configurable: true
	        });
	      }
	      if (!props.hasOwnProperty('ref')) {
	        Object.defineProperty(props, 'ref', {
	          get: function () {
	            if (!specialPropRefWarningShown) {
	              specialPropRefWarningShown = true;
	              process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
	            }
	            return undefined;
	          },
	          configurable: true
	        });
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */

	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(11);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactElement = __webpack_require__(8);

	var getIteratorFn = __webpack_require__(14);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(16);
	var ReactInstrumentation = __webpack_require__(17);

	var canDefineProperty = __webpack_require__(12);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : void 0;
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onSetState();
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(10);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstrumentation
	 */

	'use strict';

	var ReactDebugTool = __webpack_require__(18);

	module.exports = { debugTool: ReactDebugTool };

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDebugTool
	 */

	'use strict';

	var ReactInvalidSetStateWarningDevTool = __webpack_require__(19);
	var warning = __webpack_require__(10);

	var eventHandlers = [];
	var handlerDoesThrowForEvent = {};

	function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
	  if (process.env.NODE_ENV !== 'production') {
	    eventHandlers.forEach(function (handler) {
	      try {
	        if (handler[handlerFunctionName]) {
	          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
	        }
	      } catch (e) {
	        process.env.NODE_ENV !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
	        handlerDoesThrowForEvent[handlerFunctionName] = true;
	      }
	    });
	  }
	}

	var ReactDebugTool = {
	  addDevtool: function (devtool) {
	    eventHandlers.push(devtool);
	  },
	  removeDevtool: function (devtool) {
	    for (var i = 0; i < eventHandlers.length; i++) {
	      if (eventHandlers[i] === devtool) {
	        eventHandlers.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onMountRootComponent: function (internalInstance) {
	    emitEvent('onMountRootComponent', internalInstance);
	  },
	  onMountComponent: function (internalInstance) {
	    emitEvent('onMountComponent', internalInstance);
	  },
	  onUpdateComponent: function (internalInstance) {
	    emitEvent('onUpdateComponent', internalInstance);
	  },
	  onUnmountComponent: function (internalInstance) {
	    emitEvent('onUnmountComponent', internalInstance);
	  }
	};

	ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);

	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInvalidSetStateWarningDevTool
	 */

	'use strict';

	var warning = __webpack_require__(10);

	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningDevTool = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningDevTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactComponent = __webpack_require__(15);
	var ReactElement = __webpack_require__(8);
	var ReactPropTypeLocations = __webpack_require__(22);
	var ReactPropTypeLocationNames = __webpack_require__(24);
	var ReactNoopUpdateQueue = __webpack_require__(16);

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(7);
	var keyMirror = __webpack_require__(23);
	var keyOf = __webpack_require__(25);
	var warning = __webpack_require__(10);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.') : invariant(false) : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : void 0;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(23);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 25 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 */

	'use strict';

	var ReactElement = __webpack_require__(8);
	var ReactElementValidator = __webpack_require__(27);

	var mapObject = __webpack_require__(28);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(8);
	var ReactPropTypeLocations = __webpack_require__(22);
	var ReactPropTypeLocationNames = __webpack_require__(24);
	var ReactCurrentOwner = __webpack_require__(9);

	var canDefineProperty = __webpack_require__(12);
	var getIteratorFn = __webpack_require__(14);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : void 0;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(8);
	var ReactPropTypeLocationNames = __webpack_require__(24);

	var emptyFunction = __webpack_require__(11);
	var getIteratorFn = __webpack_require__(14);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '15.0.1';

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(8);

	var invariant = __webpack_require__(7);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(33);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultInjection = __webpack_require__(37);
	var ReactMount = __webpack_require__(156);
	var ReactPerf = __webpack_require__(57);
	var ReactReconciler = __webpack_require__(58);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(30);

	var findDOMNode = __webpack_require__(163);
	var getNativeComponentFromComposite = __webpack_require__(164);
	var renderSubtreeIntoContainer = __webpack_require__(165);
	var warning = __webpack_require__(10);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getNativeComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(47);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentTree
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);
	var ReactDOMComponentFlags = __webpack_require__(36);

	var invariant = __webpack_require__(7);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Drill down (through composites and empty components) until we get a native or
	 * native text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedNativeOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_nativeNode` on the rendered native/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var nativeInst = getRenderedNativeOrTextFromComponent(inst);
	  nativeInst._nativeNode = node;
	  node[internalInstanceKey] = nativeInst;
	}

	function uncacheNode(inst) {
	  var node = inst._nativeNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._nativeNode = null;
	  }
	}

	/**
	 * Populate `_nativeNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedNativeOrTextFromComponent(childInst)._domID;
	    if (childID == null) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : invariant(false) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._nativeNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._nativeNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;

	  if (inst._nativeNode) {
	    return inst._nativeNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._nativeNode) {
	    parents.push(inst);
	    !inst._nativeParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : invariant(false) : void 0;
	    inst = inst._nativeParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._nativeNode);
	  }

	  return inst._nativeNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_SIDE_EFFECTS: 0x2,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : void 0;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : void 0;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\uB7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponentFlags
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(38);
	var ChangeEventPlugin = __webpack_require__(53);
	var DefaultEventPluginOrder = __webpack_require__(65);
	var EnterLeaveEventPlugin = __webpack_require__(66);
	var ExecutionEnvironment = __webpack_require__(47);
	var HTMLDOMPropertyConfig = __webpack_require__(71);
	var ReactComponentBrowserEnvironment = __webpack_require__(72);
	var ReactDOMComponent = __webpack_require__(85);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMEmptyComponent = __webpack_require__(125);
	var ReactDOMTreeTraversal = __webpack_require__(126);
	var ReactDOMTextComponent = __webpack_require__(127);
	var ReactDefaultBatchingStrategy = __webpack_require__(128);
	var ReactEventListener = __webpack_require__(129);
	var ReactInjection = __webpack_require__(132);
	var ReactReconcileTransaction = __webpack_require__(133);
	var SVGDOMPropertyConfig = __webpack_require__(141);
	var SelectEventPlugin = __webpack_require__(142);
	var SimpleEventPlugin = __webpack_require__(143);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(154);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(39);
	var EventPropagators = __webpack_require__(40);
	var ExecutionEnvironment = __webpack_require__(47);
	var FallbackCompositionState = __webpack_require__(48);
	var SyntheticCompositionEvent = __webpack_require__(50);
	var SyntheticInputEvent = __webpack_require__(52);

	var keyOf = __webpack_require__(25);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(23);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(39);
	var EventPluginHub = __webpack_require__(41);
	var EventPluginUtils = __webpack_require__(43);

	var accumulateInto = __webpack_require__(45);
	var forEachAccumulated = __webpack_require__(46);
	var warning = __webpack_require__(10);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(43);
	var ReactErrorUtils = __webpack_require__(44);

	var accumulateInto = __webpack_require__(45);
	var forEachAccumulated = __webpack_require__(46);
	var invariant = __webpack_require__(7);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : void 0;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[inst._rootNodeID] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[inst._rootNodeID];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[inst._rootNodeID];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][inst._rootNodeID]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][inst._rootNodeID];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;

	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : void 0;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(39);
	var ReactErrorUtils = __webpack_require__(44);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : void 0;
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(dispatchInstance);
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : void 0;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(6);

	var getTextContentAccessor = __webpack_require__(49);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(51);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(6);

	var emptyFunction = __webpack_require__(11);
	var warning = __webpack_require__(10);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      var noop = __webpack_require__(11);
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', noop));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', noop));
	    }
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(51);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(39);
	var EventPluginHub = __webpack_require__(41);
	var EventPropagators = __webpack_require__(40);
	var ExecutionEnvironment = __webpack_require__(47);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(51);

	var getEventTarget = __webpack_require__(62);
	var isEventSupported = __webpack_require__(63);
	var isTextInputElement = __webpack_require__(64);
	var keyOf = __webpack_require__(25);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);
	}

	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}

	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;

	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }

	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}

	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return targetInst;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(6);
	var ReactFeatureFlags = __webpack_require__(56);
	var ReactPerf = __webpack_require__(57);
	var ReactReconciler = __webpack_require__(58);
	var Transaction = __webpack_require__(61);

	var invariant = __webpack_require__(7);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.props === component._renderedComponent._currentElement) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var PooledClass = __webpack_require__(6);

	var invariant = __webpack_require__(7);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	_assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  checkpoint: function () {
	    return this._callbacks ? this._callbacks.length : 0;
	  },

	  rollback: function (len) {
	    if (this._callbacks) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactFeatureFlags
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */

	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(59);
	var ReactInstrumentation = __webpack_require__(17);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing native component instance
	   * @param {?object} info about the native container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, nativeParent, nativeContainerInfo, context) {
	    var markup = internalInstance.mountComponent(transaction, nativeParent, nativeContainerInfo, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onMountComponent(internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getNativeNode: function (internalInstance) {
	    return internalInstance.getNativeNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onUnmountComponent(internalInstance);
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
	    }
	  }

	};

	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(60);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 62 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 64 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(25);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(39);
	var EventPropagators = __webpack_require__(40);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticMouseEvent = __webpack_require__(67);

	var keyOf = __webpack_require__(25);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(68);
	var ViewportMetrics = __webpack_require__(69);

	var getEventModifierState = __webpack_require__(70);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(51);

	var getEventTarget = __webpack_require__(62);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 70 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(73);
	var ReactDOMIDOperations = __webpack_require__(84);
	var ReactPerf = __webpack_require__(57);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {}

	};

	ReactPerf.measureMethods(ReactComponentBrowserEnvironment, 'ReactComponentBrowserEnvironment', {
	  replaceNodeWithMarkup: 'replaceNodeWithMarkup'
	});

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(74);
	var Danger = __webpack_require__(79);
	var ReactMultiChildUpdateTypes = __webpack_require__(83);
	var ReactPerf = __webpack_require__(57);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(75);
	var setInnerHTML = __webpack_require__(78);
	var setTextContent = __webpack_require__(76);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getNativeNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          removeChild(parentNode, update.fromNode);
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  replaceDelimitedText: 'replaceDelimitedText'
	});

	module.exports = DOMChildrenOperations;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMLazyTree
	 */

	'use strict';

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(75);
	var setTextContent = __webpack_require__(76);

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    node.innerHTML = tree.html;
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level.
	  if (tree.node.nodeType === 11) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    tree.node.innerHTML = html;
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ },
/* 75 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createMicrosoftUnsafeLocalFunction
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);
	var escapeTextContentForBrowser = __webpack_require__(77);
	var setInnerHTML = __webpack_require__(78);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(75);

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  node.innerHTML = html;
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(74);
	var ExecutionEnvironment = __webpack_require__(47);

	var createNodesFromMarkup = __webpack_require__(80);
	var emptyFunction = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(82);
	var invariant = __webpack_require__(7);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : void 0;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : void 0;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : void 0;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : void 0;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : void 0;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(47);

	var createArrayFromMixed = __webpack_require__(81);
	var getMarkupWrap = __webpack_require__(82);
	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(47);

	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(23);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(73);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactPerf = __webpack_require__(57);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _assign = __webpack_require__(4);

	var AutoFocusUtils = __webpack_require__(86);
	var CSSPropertyOperations = __webpack_require__(88);
	var DOMLazyTree = __webpack_require__(74);
	var DOMNamespaces = __webpack_require__(96);
	var DOMProperty = __webpack_require__(35);
	var DOMPropertyOperations = __webpack_require__(97);
	var EventConstants = __webpack_require__(39);
	var EventPluginHub = __webpack_require__(41);
	var EventPluginRegistry = __webpack_require__(42);
	var ReactBrowserEventEmitter = __webpack_require__(102);
	var ReactComponentBrowserEnvironment = __webpack_require__(72);
	var ReactDOMButton = __webpack_require__(105);
	var ReactDOMComponentFlags = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMInput = __webpack_require__(106);
	var ReactDOMOption = __webpack_require__(108);
	var ReactDOMSelect = __webpack_require__(109);
	var ReactDOMTextarea = __webpack_require__(110);
	var ReactMultiChild = __webpack_require__(111);
	var ReactPerf = __webpack_require__(57);

	var escapeTextContentForBrowser = __webpack_require__(77);
	var invariant = __webpack_require__(7);
	var isEventSupported = __webpack_require__(63);
	var keyOf = __webpack_require__(25);
	var shallowEqual = __webpack_require__(123);
	var validateDOMNesting = __webpack_require__(124);
	var warning = __webpack_require__(10);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : invariant(false) : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._nativeContainerInfo;
	  var doc = containerInfo._ownerDocument;
	  if (!doc) {
	    // Server rendering.
	    return;
	  }
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._nativeNode = null;
	  this._nativeParent = null;
	  this._rootNodeID = null;
	  this._domID = null;
	  this._nativeContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the containing DOM component instance
	   * @param {?object} info about the native container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = nativeContainerInfo._idCounter++;
	    this._nativeParent = nativeParent;
	    this._nativeContainerInfo = nativeContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'object':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, nativeParent);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, nativeParent);
	        props = ReactDOMInput.getNativeProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, nativeParent);
	        props = ReactDOMOption.getNativeProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, nativeParent);
	        props = ReactDOMSelect.getNativeProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, nativeParent);
	        props = ReactDOMTextarea.getNativeProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (nativeParent != null) {
	      namespaceURI = nativeParent._namespaceURI;
	      parentTag = nativeParent._tag;
	    } else if (nativeContainerInfo._tag) {
	      namespaceURI = nativeContainerInfo._namespaceURI;
	      parentTag = nativeContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (nativeParent != null) {
	        parentInfo = nativeParent._ancestorInfo;
	      } else if (nativeContainerInfo._tag) {
	        parentInfo = nativeContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = nativeContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else {
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._nativeParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'button':
	      case 'input':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._nativeParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        DOMLazyTree.queueText(lazyTree, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getNativeNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'iframe':
	      case 'object':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._domID = null;
	    this._wrapperState = null;
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent.Mixin, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  receiveComponent: 'receiveComponent'
	});

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(34);

	var focusNode = __webpack_require__(87);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 87 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 */

	'use strict';

	var CSSProperty = __webpack_require__(89);
	var ExecutionEnvironment = __webpack_require__(47);
	var ReactPerf = __webpack_require__(57);

	var camelizeStyleName = __webpack_require__(90);
	var dangerousStyleValue = __webpack_require__(92);
	var hyphenateStyleName = __webpack_require__(93);
	var memoizeStringOnly = __webpack_require__(95);
	var warning = __webpack_require__(10);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(91);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 91 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 */

	'use strict';

	var CSSProperty = __webpack_require__(89);
	var warning = __webpack_require__(10);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      if (component) {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(94);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 94 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMNamespaces
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);
	var ReactDOMInstrumentation = __webpack_require__(98);
	var ReactPerf = __webpack_require__(57);

	var quoteAttributeValueForBrowser = __webpack_require__(101);
	var warning = __webpack_require__(10);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onCreateMarkupForProperty(name, value);
	    }
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onSetValueForProperty(node, name, value);
	    }
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
	    }
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          // No HAS_SIDE_EFFECTS logic here, only `value` has it and is string.
	          node[propName] = false;
	        } else {
	          if (!propertyInfo.hasSideEffects || '' + node[propName] !== '') {
	            node[propName] = '';
	          }
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInstrumentation
	 */

	'use strict';

	var ReactDOMDebugTool = __webpack_require__(99);

	module.exports = { debugTool: ReactDOMDebugTool };

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMDebugTool
	 */

	'use strict';

	var ReactDOMUnknownPropertyDevtool = __webpack_require__(100);

	var warning = __webpack_require__(10);

	var eventHandlers = [];
	var handlerDoesThrowForEvent = {};

	function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
	  if (process.env.NODE_ENV !== 'production') {
	    eventHandlers.forEach(function (handler) {
	      try {
	        if (handler[handlerFunctionName]) {
	          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
	        }
	      } catch (e) {
	        process.env.NODE_ENV !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
	        handlerDoesThrowForEvent[handlerFunctionName] = true;
	      }
	    });
	  }
	}

	var ReactDOMDebugTool = {
	  addDevtool: function (devtool) {
	    eventHandlers.push(devtool);
	  },
	  removeDevtool: function (devtool) {
	    for (var i = 0; i < eventHandlers.length; i++) {
	      if (eventHandlers[i] === devtool) {
	        eventHandlers.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  onCreateMarkupForProperty: function (name, value) {
	    emitEvent('onCreateMarkupForProperty', name, value);
	  },
	  onSetValueForProperty: function (node, name, value) {
	    emitEvent('onSetValueForProperty', node, name, value);
	  },
	  onDeleteValueForProperty: function (node, name) {
	    emitEvent('onDeleteValueForProperty', node, name);
	  }
	};

	ReactDOMDebugTool.addDevtool(ReactDOMUnknownPropertyDevtool);

	module.exports = ReactDOMDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMUnknownPropertyDevtool
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);
	var EventPluginRegistry = __webpack_require__(42);

	var warning = __webpack_require__(10);

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : void 0;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    process.env.NODE_ENV !== 'production' ? warning(registrationName == null, 'Unknown event handler property %s. Did you mean `%s`?', name, registrationName) : void 0;
	  };
	}

	var ReactDOMUnknownPropertyDevtool = {
	  onCreateMarkupForProperty: function (name, value) {
	    warnUnknownProperty(name);
	  },
	  onSetValueForProperty: function (node, name, value) {
	    warnUnknownProperty(name);
	  },
	  onDeleteValueForProperty: function (node, name) {
	    warnUnknownProperty(name);
	  }
	};

	module.exports = ReactDOMUnknownPropertyDevtool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(77);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventConstants = __webpack_require__(39);
	var EventPluginRegistry = __webpack_require__(42);
	var ReactEventEmitterMixin = __webpack_require__(103);
	var ViewportMetrics = __webpack_require__(69);

	var getVendorPrefixedEventName = __webpack_require__(104);
	var isEventSupported = __webpack_require__(63);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = document.createEvent && 'pageX' in document.createEvent('MouseEvent');
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }

	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(41);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getVendorPrefixedEventName
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMPropertyOperations = __webpack_require__(97);
	var LinkedValueUtils = __webpack_require__(107);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(54);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueNull = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function warnIfValueIsNull(props) {
	  if (props != null && props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `input` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

	    didWarnValueNull = true;
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValueDefaultValue = true;
	      }
	      warnIfValueIsNull(props);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = props.checked !== undefined || props.value !== undefined;
	    }
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      warnIfValueIsNull(props);

	      var initialValue = inst._wrapperState.initialChecked || inst._wrapperState.initialValue;
	      var defaultValue = props.defaultChecked || props.defaultValue;
	      var controlled = props.checked !== undefined || props.value !== undefined;
	      var owner = inst._currentElement._owner;

	      if ((initialValue || !inst._wrapperState.controlled) && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && (defaultValue || !controlled) && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(29);
	var ReactPropTypeLocations = __webpack_require__(22);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactChildren = __webpack_require__(5);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMSelect = __webpack_require__(109);

	var warning = __webpack_require__(10);

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, nativeParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (nativeParent != null && nativeParent._tag === 'select') {
	      selectValue = ReactDOMSelect.getSelectValueContext(nativeParent);
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getNativeProps: function (inst, props) {
	    var nativeProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var LinkedValueUtils = __webpack_require__(107);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(54);

	var warning = __webpack_require__(10);

	var didWarnValueLink = false;
	var didWarnValueNull = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function warnIfValueIsNull(props) {
	  if (props != null && props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `select` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

	    didWarnValueNull = true;
	  }
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getNativeProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	      warnIfValueIsNull(props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    if (process.env.NODE_ENV !== 'production') {
	      warnIfValueIsNull(props);
	    }

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMPropertyOperations = __webpack_require__(97);
	var LinkedValueUtils = __webpack_require__(107);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(54);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	var didWarnValueLink = false;
	var didWarnValueNull = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	function warnIfValueIsNull(props) {
	  if (props != null && props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `textarea` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

	    didWarnValueNull = true;
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = _assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	      warnIfValueIsNull(props);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : void 0;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : void 0;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if (process.env.NODE_ENV !== 'production') {
	      warnIfValueIsNull(props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(112);
	var ReactMultiChildUpdateTypes = __webpack_require__(83);

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactReconciler = __webpack_require__(58);
	var ReactChildReconciler = __webpack_require__(113);

	var flattenChildren = __webpack_require__(122);
	var invariant = __webpack_require__(7);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getNativeNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, removedNodes, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, lastPlacedNode, nextIndex, transaction, context));
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getNativeNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, afterNode, index, transaction, context) {
	      var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : void 0;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(58);

	var instantiateReactComponent = __webpack_require__(114);
	var shouldUpdateReactComponent = __webpack_require__(119);
	var traverseAllChildren = __webpack_require__(13);
	var warning = __webpack_require__(10);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : void 0;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, removedNodes, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactCompositeComponent = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(120);
	var ReactNativeComponent = __webpack_require__(121);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : void 0;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : void 0;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getNativeNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactComponentEnvironment = __webpack_require__(112);
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactElement = __webpack_require__(8);
	var ReactErrorUtils = __webpack_require__(44);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(17);
	var ReactNodeTypes = __webpack_require__(117);
	var ReactPerf = __webpack_require__(57);
	var ReactPropTypeLocations = __webpack_require__(22);
	var ReactPropTypeLocationNames = __webpack_require__(24);
	var ReactReconciler = __webpack_require__(58);
	var ReactUpdateQueue = __webpack_require__(118);

	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(7);
	var shouldUpdateReactComponent = __webpack_require__(119);
	var warning = __webpack_require__(10);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	    this._nativeParent = null;
	    this._nativeContainerInfo = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} nativeParent
	   * @param {?object} nativeContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._nativeParent = nativeParent;
	    this._nativeContainerInfo = nativeContainerInfo;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    if (Component.prototype && Component.prototype.isReactComponent) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	      if (inst == null || inst.render == null) {
	        renderedElement = inst;
	        warnIfInvalidElement(Component, renderedElement);
	        !(inst === null || inst === false || ReactElement.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : invariant(false) : void 0;
	        inst = new StatelessComponent(Component);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
	    var inst = this._instance;
	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedNodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, transaction, nativeParent, nativeContainerInfo, this._processChildContext(context));

	    return markup;
	  },

	  getNativeNode: function () {
	    return ReactReconciler.getNativeNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        inst.componentWillUnmount();
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	    }
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onEndProcessingChildContext();
	    }
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : void 0;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : void 0;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    var willReceive = false;
	    var nextContext;
	    var nextProps;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      inst.componentWillReceiveProps(nextProps, nextContext);
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldNativeNode = ReactReconciler.getNativeNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      this._renderedNodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, transaction, this._nativeParent, this._nativeContainerInfo, this._processChildContext(context));
	      this._replaceNodeWithMarkup(oldNativeNode, nextMarkup);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldNativeNode, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldNativeNode, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedComponent === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNodeTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(8);

	var invariant = __webpack_require__(7);

	var ReactNodeTypes = {
	  NATIVE: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (ReactElement.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.NATIVE;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : invariant(false) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactUpdates = __webpack_require__(54);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : void 0;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : invariant(false) : void 0;
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var invariant = __webpack_require__(7);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(13);
	var warning = __webpack_require__(10);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : void 0;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var emptyFunction = __webpack_require__(11);
	var warning = __webpack_require__(10);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      if (childTag !== '#text') {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' + 'See %s.%s', tagDisplayName, ancestorTag, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMEmptyComponent
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMLazyTree = __webpack_require__(74);
	var ReactDOMComponentTree = __webpack_require__(34);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._nativeNode = null;
	  this._nativeParent = null;
	  this._nativeContainerInfo = null;
	  this._domID = null;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    var domID = nativeContainerInfo._idCounter++;
	    this._domID = domID;
	    this._nativeParent = nativeParent;
	    this._nativeContainerInfo = nativeContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = nativeContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getNativeNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTreeTraversal
	 */

	'use strict';

	var invariant = __webpack_require__(7);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_nativeNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;
	  !('_nativeNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._nativeParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._nativeParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._nativeParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._nativeParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._nativeParent;
	    instB = instB._nativeParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_nativeNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;
	  !('_nativeNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._nativeParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_nativeNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : invariant(false) : void 0;

	  return inst._nativeParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._nativeParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], false, arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], true, arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._nativeParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._nativeParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], true, argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], false, argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var DOMChildrenOperations = __webpack_require__(73);
	var DOMLazyTree = __webpack_require__(74);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactPerf = __webpack_require__(57);

	var escapeTextContentForBrowser = __webpack_require__(77);
	var invariant = __webpack_require__(7);
	var validateDOMNesting = __webpack_require__(124);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._nativeNode = null;
	  this._nativeParent = null;

	  // Properties
	  this._domID = null;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (nativeParent != null) {
	        parentInfo = nativeParent._ancestorInfo;
	      } else if (nativeContainerInfo != null) {
	        parentInfo = nativeContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting('#text', this, parentInfo);
	      }
	    }

	    var domID = nativeContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._nativeParent = nativeParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = nativeContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getNativeNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getNativeNode: function () {
	    var nativeNode = this._commentNodes;
	    if (nativeNode) {
	      return nativeNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : invariant(false) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    nativeNode = [this._nativeNode, this._closingComment];
	    this._commentNodes = nativeNode;
	    return nativeNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }

	});

	ReactPerf.measureMethods(ReactDOMTextComponent.prototype, 'ReactDOMTextComponent', {
	  mountComponent: 'mountComponent',
	  receiveComponent: 'receiveComponent'
	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(61);

	var emptyFunction = __webpack_require__(11);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var EventListener = __webpack_require__(130);
	var ExecutionEnvironment = __webpack_require__(47);
	var PooledClass = __webpack_require__(6);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(54);

	var getEventTarget = __webpack_require__(62);
	var getUnboundedScrollPosition = __webpack_require__(131);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._nativeParent) {
	    inst = inst._nativeParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(11);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);
	var EventPluginHub = __webpack_require__(41);
	var EventPluginUtils = __webpack_require__(43);
	var ReactComponentEnvironment = __webpack_require__(112);
	var ReactClass = __webpack_require__(21);
	var ReactEmptyComponent = __webpack_require__(120);
	var ReactBrowserEventEmitter = __webpack_require__(102);
	var ReactNativeComponent = __webpack_require__(121);
	var ReactPerf = __webpack_require__(57);
	var ReactUpdates = __webpack_require__(54);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 */

	'use strict';

	var _assign = __webpack_require__(4);

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(6);
	var ReactBrowserEventEmitter = __webpack_require__(102);
	var ReactInputSelection = __webpack_require__(134);
	var Transaction = __webpack_require__(61);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(135);

	var containsNode = __webpack_require__(137);
	var focusNode = __webpack_require__(87);
	var getActiveElement = __webpack_require__(140);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var getNodeForCharacterOffset = __webpack_require__(136);
	var getTextContentAccessor = __webpack_require__(49);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(138);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(139);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 139 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 140 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 141 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).map(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(39);
	var EventPropagators = __webpack_require__(40);
	var ExecutionEnvironment = __webpack_require__(47);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInputSelection = __webpack_require__(134);
	var SyntheticEvent = __webpack_require__(51);

	var getActiveElement = __webpack_require__(140);
	var isTextInputElement = __webpack_require__(64);
	var keyOf = __webpack_require__(25);
	var shallowEqual = __webpack_require__(123);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(39);
	var EventListener = __webpack_require__(130);
	var EventPropagators = __webpack_require__(40);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticAnimationEvent = __webpack_require__(144);
	var SyntheticClipboardEvent = __webpack_require__(145);
	var SyntheticEvent = __webpack_require__(51);
	var SyntheticFocusEvent = __webpack_require__(146);
	var SyntheticKeyboardEvent = __webpack_require__(147);
	var SyntheticMouseEvent = __webpack_require__(67);
	var SyntheticDragEvent = __webpack_require__(150);
	var SyntheticTouchEvent = __webpack_require__(151);
	var SyntheticTransitionEvent = __webpack_require__(152);
	var SyntheticUIEvent = __webpack_require__(68);
	var SyntheticWheelEvent = __webpack_require__(153);

	var emptyFunction = __webpack_require__(11);
	var getEventCharCode = __webpack_require__(148);
	var invariant = __webpack_require__(7);
	var keyOf = __webpack_require__(25);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  animationEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationEnd: true }),
	      captured: keyOf({ onAnimationEndCapture: true })
	    }
	  },
	  animationIteration: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationIteration: true }),
	      captured: keyOf({ onAnimationIterationCapture: true })
	    }
	  },
	  animationStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAnimationStart: true }),
	      captured: keyOf({ onAnimationStartCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  invalid: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInvalid: true }),
	      captured: keyOf({ onInvalidCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  transitionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTransitionEnd: true }),
	      captured: keyOf({ onTransitionEndCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topAnimationEnd: eventTypes.animationEnd,
	  topAnimationIteration: eventTypes.animationIteration,
	  topAnimationStart: eventTypes.animationStart,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topInvalid: eventTypes.invalid,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topTransitionEnd: eventTypes.transitionEnd,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topInvalid:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topAnimationEnd:
	      case topLevelTypes.topAnimationIteration:
	      case topLevelTypes.topAnimationStart:
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case topLevelTypes.topTransitionEnd:
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var id = inst._rootNodeID;
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      var id = inst._rootNodeID;
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticAnimationEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(51);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(51);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(68);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(68);

	var getEventCharCode = __webpack_require__(148);
	var getEventKey = __webpack_require__(149);
	var getEventModifierState = __webpack_require__(70);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(148);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(67);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(68);

	var getEventModifierState = __webpack_require__(70);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTransitionEvent
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(51);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(67);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 */

	'use strict';

	var DOMProperty = __webpack_require__(35);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultPerfAnalysis = __webpack_require__(155);
	var ReactMount = __webpack_require__(156);
	var ReactPerf = __webpack_require__(57);

	var performanceNow = __webpack_require__(161);
	var warning = __webpack_require__(10);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	// Composite/text components don't have any built-in ID: we have to make our own
	var compositeIDMap;
	var compositeIDCounter = 17000;
	function getIDOfComposite(inst) {
	  if (!compositeIDMap) {
	    compositeIDMap = new WeakMap();
	  }
	  if (compositeIDMap.has(inst)) {
	    return compositeIDMap.get(inst);
	  } else {
	    var id = compositeIDCounter++;
	    compositeIDMap.set(inst, id);
	    return id;
	  }
	}

	function getID(inst) {
	  if (inst.hasOwnProperty('_rootNodeID')) {
	    return inst._rootNodeID;
	  } else {
	    return getIDOfComposite(inst);
	  }
	}

	function stripComplexValues(key, value) {
	  if (typeof value !== 'object' || Array.isArray(value) || value == null) {
	    return value;
	  }
	  var prototype = Object.getPrototypeOf(value);
	  if (!prototype || prototype === Object.prototype) {
	    return value;
	  }
	  return '<not serializable>';
	}

	// This implementation of ReactPerf is going away some time mid 15.x.
	// While we plan to keep most of the API, the actual format of measurements
	// will change dramatically. To signal this, we wrap them into an opaque-ish
	// object to discourage reaching into it until the API stabilizes.
	function wrapLegacyMeasurements(measurements) {
	  return { __unstable_this_format_will_change: measurements };
	}
	function unwrapLegacyMeasurements(measurements) {
	  return measurements && measurements.__unstable_this_format_will_change || measurements;
	}

	var warnedAboutPrintDOM = false;
	var warnedAboutGetMeasurementsSummaryMap = false;

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _compositeStack: [],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return wrapLegacyMeasurements(ReactDefaultPerf._allMeasurements);
	  },

	  printExclusive: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    process.env.NODE_ENV !== 'production' ? warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.') : void 0;
	    warnedAboutGetMeasurementsSummaryMap = true;
	    return ReactDefaultPerf.getWasted(measurements);
	  },

	  getWasted: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements);
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    console.table(ReactDefaultPerf.getWasted(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    process.env.NODE_ENV !== 'production' ? warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.') : void 0;
	    warnedAboutPrintDOM = true;
	    return ReactDefaultPerf.printOperations(measurements);
	  },

	  printOperations: function (measurements) {
	    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args, stripComplexValues);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	    var writes = entry.writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push(entry = {
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          hierarchy: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        entry.totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations' || moduleName === 'ReactComponentBrowserEnvironment') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          ReactDefaultPerf._recordWrite('', fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[1].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.content !== null) {
	              writeArgs.content = update.content;
	            }
	            ReactDefaultPerf._recordWrite(args[0]._rootNodeID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (moduleName === 'EventPluginHub') {
	            id = id._rootNodeID;
	          } else if (fnName === 'replaceNodeWithMarkup') {
	            // Old node is already unmounted; can't get its instance
	            id = ReactDOMComponentTree.getInstanceFromNode(args[1].node)._rootNodeID;
	          } else if (fnName === 'replaceDelimitedText') {
	            id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
	          } else if (typeof id === 'object') {
	            id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = getIDOfComposite(this);
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        ReactDefaultPerf._compositeStack.push(rootNodeID);

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        ReactDefaultPerf._compositeStack.pop();

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else if ((moduleName === 'ReactDOMComponent' || moduleName === 'ReactDOMTextComponent') && (fnName === 'mountComponent' || fnName === 'receiveComponent')) {

	        rv = func.apply(this, args);
	        entry.hierarchy[getID(this)] = ReactDefaultPerf._compositeStack.slice();
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	// Don't try to save users less than 1.2ms (a number I made up)

	var _assign = __webpack_require__(4);

	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'replaceDelimitedText': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var writes = measurement.writes;
	  var dirtyComposites = {};
	  Object.keys(writes).forEach(function (id) {
	    writes[id].forEach(function (write) {
	      // Root mounting (innerHTML set) is recorded with an ID of ''
	      if (id !== '') {
	        measurement.hierarchy[id].forEach(function (c) {
	          return dirtyComposites[c] = true;
	        });
	      }
	    });
	  });
	  var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // See if any of the DOM operations applied to this component's subtree.
	    if (dirtyComposites[id]) {
	      isDirty = true;
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(74);
	var DOMProperty = __webpack_require__(35);
	var ReactBrowserEventEmitter = __webpack_require__(102);
	var ReactCurrentOwner = __webpack_require__(9);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMContainerInfo = __webpack_require__(157);
	var ReactDOMFeatureFlags = __webpack_require__(158);
	var ReactElement = __webpack_require__(8);
	var ReactFeatureFlags = __webpack_require__(56);
	var ReactInstrumentation = __webpack_require__(17);
	var ReactMarkupChecksum = __webpack_require__(159);
	var ReactPerf = __webpack_require__(57);
	var ReactReconciler = __webpack_require__(58);
	var ReactUpdateQueue = __webpack_require__(118);
	var ReactUpdates = __webpack_require__(54);

	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(114);
	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(78);
	var shouldUpdateReactComponent = __webpack_require__(119);
	var warning = __webpack_require__(10);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context);

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  ReactReconciler.unmountComponent(instance, safely);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._nativeParent);
	  }
	}

	function getNativeRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevNativeInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevNativeInstance && !prevNativeInstance._nativeParent ? prevNativeInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getNativeRootInstanceInContainer(container);
	  return root ? root._nativeContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by devtools!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onMountRootComponent(componentInstance);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : void 0;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : void 0;

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : void 0;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	  }
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMContainerInfo
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(124);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(160);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(162);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(47);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(9);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(116);

	var getNativeComponentFromComposite = __webpack_require__(164);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(10);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getNativeComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : void 0;
	  }
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNativeComponentFromComposite
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(117);

	function getNativeComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.NATIVE) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getNativeComponentFromComposite;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(156);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;

	var _Provider = __webpack_require__(167);

	var _Provider2 = _interopRequireDefault(_Provider);

	var _connect = __webpack_require__(170);

	var _connect2 = _interopRequireDefault(_connect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = undefined;

	var _react = __webpack_require__(1);

	var _storeShape = __webpack_require__(168);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _warning = __webpack_require__(169);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  (0, _warning2["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}

	var Provider = function (_Component) {
	  _inherits(Provider, _Component);

	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };

	  function Provider(props, context) {
	    _classCallCheck(this, Provider);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.store = props.store;
	    return _this;
	  }

	  Provider.prototype.render = function render() {
	    var children = this.props.children;

	    return _react.Children.only(children);
	  };

	  return Provider;
	}(_react.Component);

	exports["default"] = Provider;

	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;

	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}

	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _react.PropTypes.element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(1);

	exports["default"] = _react.PropTypes.shape({
	  subscribe: _react.PropTypes.func.isRequired,
	  dispatch: _react.PropTypes.func.isRequired,
	  getState: _react.PropTypes.func.isRequired
	});

/***/ },
/* 169 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that you can use this stack
	    // to find the callsite that caused this warning to fire.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.__esModule = true;
	exports["default"] = connect;

	var _react = __webpack_require__(1);

	var _storeShape = __webpack_require__(168);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _shallowEqual = __webpack_require__(171);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _wrapActionCreators = __webpack_require__(172);

	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);

	var _warning = __webpack_require__(169);

	var _warning2 = _interopRequireDefault(_warning);

	var _isPlainObject = __webpack_require__(184);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _hoistNonReactStatics = __webpack_require__(188);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(189);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	var errorObject = { value: null };
	function tryCatch(fn, ctx) {
	  try {
	    return fn.apply(ctx);
	  } catch (e) {
	    errorObject.value = e;
	    return errorObject;
	  }
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;

	  var mapDispatch = undefined;
	  if (typeof mapDispatchToProps === 'function') {
	    mapDispatch = mapDispatchToProps;
	  } else if (!mapDispatchToProps) {
	    mapDispatch = defaultMapDispatchToProps;
	  } else {
	    mapDispatch = (0, _wrapActionCreators2["default"])(mapDispatchToProps);
	  }

	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var _options$pure = options.pure;
	  var pure = _options$pure === undefined ? true : _options$pure;
	  var _options$withRef = options.withRef;
	  var withRef = _options$withRef === undefined ? false : _options$withRef;

	  var checkMergedEquals = pure && finalMergeProps !== defaultMergeProps;

	  // Helps track hot reloading.
	  var version = nextVersion++;

	  return function wrapWithConnect(WrappedComponent) {
	    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';

	    function checkStateShape(props, methodName) {
	      if (!(0, _isPlainObject2["default"])(props)) {
	        (0, _warning2["default"])(methodName + '() in ' + connectDisplayName + ' must return a plain object. ' + ('Instead received ' + props + '.'));
	      }
	    }

	    function computeMergedProps(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      if (process.env.NODE_ENV !== 'production') {
	        checkStateShape(mergedProps, 'mergeProps');
	      }
	      return mergedProps;
	    }

	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };

	      function Connect(props, context) {
	        _classCallCheck(this, Connect);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.store = props.store || context.store;

	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));

	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }

	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }

	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(stateProps, 'mapStateToProps');
	        }
	        return stateProps;
	      };

	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';

	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

	        if (isFactory) {
	          return this.computeStateProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedState, 'mapStateToProps');
	        }
	        return mappedState;
	      };

	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }

	        var dispatch = store.dispatch;

	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(dispatchProps, 'mapDispatchToProps');
	        }
	        return dispatchProps;
	      };

	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';

	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

	        if (isFactory) {
	          return this.computeDispatchProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedDispatch, 'mapDispatchToProps');
	        }
	        return mappedDispatch;
	      };

	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }

	        this.stateProps = nextStateProps;
	        return true;
	      };

	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }

	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };

	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }

	        this.mergedProps = nextMergedProps;
	        return true;
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };

	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };

	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };

	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };

	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }

	        var storeState = this.store.getState();
	        var prevStoreState = this.state.storeState;
	        if (pure && prevStoreState === storeState) {
	          return;
	        }

	        if (pure && !this.doStatePropsDependOnOwnProps) {
	          var haveStatePropsChanged = tryCatch(this.updateStatePropsIfNeeded, this);
	          if (!haveStatePropsChanged) {
	            return;
	          }
	          if (haveStatePropsChanged === errorObject) {
	            this.statePropsPrecalculationError = errorObject.value;
	          }
	          this.haveStatePropsBeenPrecalculated = true;
	        }

	        this.hasStoreStateChanged = true;
	        this.setState({ storeState: storeState });
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');

	        return this.refs.wrappedInstance;
	      };

	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged;
	        var hasStoreStateChanged = this.hasStoreStateChanged;
	        var haveStatePropsBeenPrecalculated = this.haveStatePropsBeenPrecalculated;
	        var statePropsPrecalculationError = this.statePropsPrecalculationError;
	        var renderedElement = this.renderedElement;

	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;

	        if (statePropsPrecalculationError) {
	          throw statePropsPrecalculationError;
	        }

	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }

	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (haveStatePropsBeenPrecalculated) {
	          haveStatePropsChanged = true;
	        } else if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }

	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }

	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }

	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }

	        return this.renderedElement;
	      };

	      return Connect;
	    }(_react.Component);

	    Connect.displayName = connectDisplayName;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }

	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }

	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 171 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = wrapActionCreators;

	var _redux = __webpack_require__(173);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(174);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(179);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(181);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(182);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(183);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(180);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2["default"])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2["default"];
	exports.combineReducers = _combineReducers2["default"];
	exports.bindActionCreators = _bindActionCreators2["default"];
	exports.applyMiddleware = _applyMiddleware2["default"];
	exports.compose = _compose2["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports["default"] = createStore;

	var _isPlainObject = __webpack_require__(175);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [initialState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, initialState, enhancer) {
	  if (typeof initialState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = initialState;
	    initialState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, initialState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = initialState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2["default"])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  };
	}

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var getPrototype = __webpack_require__(176),
	    isHostObject = __webpack_require__(177),
	    isObjectLike = __webpack_require__(178);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object,
	 *  else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 176 */
/***/ function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetPrototype = Object.getPrototypeOf;

	/**
	 * Gets the `[[Prototype]]` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {null|Object} Returns the `[[Prototype]]`.
	 */
	function getPrototype(value) {
	  return nativeGetPrototype(Object(value));
	}

	module.exports = getPrototype;


/***/ },
/* 177 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	module.exports = isHostObject;


/***/ },
/* 178 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = combineReducers;

	var _createStore = __webpack_require__(174);

	var _isPlainObject = __webpack_require__(175);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(180);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'initialState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2["default"])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key);
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }

	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];

	    if (sanityError) {
	      throw sanityError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action);
	      if (warningMessage) {
	        (0, _warning2["default"])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 180 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that you can use this stack
	    // to find the callsite that caused this warning to fire.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ },
/* 181 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = applyMiddleware;

	var _compose = __webpack_require__(183);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, initialState, enhancer) {
	      var store = createStore(reducer, initialState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2["default"].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ },
/* 183 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */

	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return function () {
	    if (funcs.length === 0) {
	      return arguments.length <= 0 ? undefined : arguments[0];
	    }

	    var last = funcs[funcs.length - 1];
	    var rest = funcs.slice(0, -1);

	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var getPrototype = __webpack_require__(185),
	    isHostObject = __webpack_require__(186),
	    isObjectLike = __webpack_require__(187);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object,
	 *  else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 185 */
/***/ function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetPrototype = Object.getPrototypeOf;

	/**
	 * Gets the `[[Prototype]]` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {null|Object} Returns the `[[Prototype]]`.
	 */
	function getPrototype(value) {
	  return nativeGetPrototype(Object(value));
	}

	module.exports = getPrototype;


/***/ },
/* 186 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	module.exports = isHostObject;


/***/ },
/* 187 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 188 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent) {
	    var keys = Object.getOwnPropertyNames(sourceComponent);
	    for (var i=0; i<keys.length; ++i) {
	        if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]]) {
	            try {
	                targetComponent[keys[i]] = sourceComponent[keys[i]];
	            } catch (error) {

	            }
	        }
	    }

	    return targetComponent;
	};


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _redux = __webpack_require__(173);

	var _cyElements = __webpack_require__(191);

	var _cyElements2 = _interopRequireDefault(_cyElements);

	var _cyStyle = __webpack_require__(194);

	var _cyStyle2 = _interopRequireDefault(_cyStyle);

	var _entities = __webpack_require__(196);

	var _entities2 = _interopRequireDefault(_entities);

	var _intentPropertiesPanel = __webpack_require__(197);

	var _intentPropertiesPanel2 = _interopRequireDefault(_intentPropertiesPanel);

	__webpack_require__(198);

	__webpack_require__(202);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var voiceUIApp = (0, _redux.combineReducers)({
	  cyElements: _cyElements2.default,
	  cyStyle: _cyStyle2.default,
	  entities: _entities2.default,
	  intentPropertiesPanel: _intentPropertiesPanel2.default
	});

	exports.default = voiceUIApp;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _LocalStorage = __webpack_require__(192);

	var _LocalStorage2 = _interopRequireDefault(_LocalStorage);

	var _jquery = __webpack_require__(193);

	var _jquery2 = _interopRequireDefault(_jquery);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var unselectElement = function unselectElement(element) {
	  return Object.assign({}, element, { selected: false });
	};

	var modifyElement = function modifyElement(element, targetId, data) {
	  if (element.data.id != targetId) {
	    return element;
	  }
	  return Object.assign({}, element, { data: Object.assign({}, data, { id: targetId }) });
	};

	var filterNode = function filterNode(element) {
	  return element.group == "nodes";
	};

	var filterEdge = function filterEdge(element) {
	  return element.group == "edges";
	};

	var filterNodeUserSays = function filterNodeUserSays(element) {
	  return filterNode(element) && element.classes == "user_says";
	};

	var filterNodeResponse = function filterNodeResponse(element) {
	  return filterNode(element) && element.classes == "response";
	};

	var filterEdgeOut = function filterEdgeOut(edge, node) {
	  return edge.data.source == node.data.id;
	};

	var filterEdgeIn = function filterEdgeIn(edge, node) {
	  return edge.data.target == node.data.id;
	};

	var getTargetId = function getTargetId(edge, elements) {
	  return edge.data.target;
	};

	var getSourceId = function getSourceId(edge, elements) {
	  return edge.data.source;
	};

	var getEdgesBetween = function getEdgesBetween(nodeFromId, nodeToId, elements) {
	  return elements.filter(filterEdge).filter(function (edge) {
	    return edge.data.source == nodeFromId && edge.data.target == nodeToId;
	  });
	};

	var getIntents = function getIntents(elements) {
	  return elements.filter(filterNodeUserSays).map(function (userSaysNode) {
	    var responseNodeId = elements.filter(function (e) {
	      return filterEdgeOut(e, userSaysNode);
	    }).map(getTargetId)[0];
	    var responseNode = elements.filter(function (e) {
	      return e.data.id == responseNodeId;
	    })[0];

	    return {
	      userSaysNode: userSaysNode,
	      responseNode: responseNode
	    };
	  });
	};

	var assignInOutEdges = function assignInOutEdges(intent, elements) {
	  return Object.assign({}, intent, {
	    edgesIn: elements.filter(function (e) {
	      return filterEdgeIn(e, intent.userSaysNode);
	    }),
	    edgesOut: elements.filter(function (e) {
	      return filterEdgeOut(e, intent.responseNode);
	    })
	  });
	};

	var getContextNameFromEdge = function getContextNameFromEdge(edge, elements) {
	  var source = elements.filter(function (e) {
	    return e.data.id == edge.data.source;
	  })[0].data.response.split("\n")[0];
	  var target = elements.filter(function (e) {
	    return e.data.id == edge.data.target;
	  })[0].data.user_says.split("\n")[0];
	  return (source + '_' + target).replace(/ /g, '');
	};

	var assignContextName = function assignContextName(intent, elements) {
	  return Object.assign({}, intent, {
	    contextsIn: intent.edgesIn.map(function (e) {
	      return getContextNameFromEdge(e, elements);
	    }),
	    contextsOut: intent.edgesOut.map(function (e) {
	      return getContextNameFromEdge(e, elements);
	    })
	  });
	};

	var buildApiData = function buildApiData(intent) {
	  var userSayses = intent.userSaysNode.data.user_says.split("\n");
	  var responses = intent.responseNode.data.response.split("\n");

	  return {
	    name: intent.userSaysNode.data.id + ': ' + userSayses[0] + '+' + responses[0],
	    contexts: intent.contextsIn,
	    templates: userSayses,
	    responses: [{
	      speech: responses,
	      affectedContexts: intent.contextsOut
	    }]
	  };
	};

	var buildIntentsDataFromCyElements = function buildIntentsDataFromCyElements(elements) {
	  return getIntents(elements).map(function (i) {
	    return assignInOutEdges(i, elements);
	  }).map(function (i) {
	    return assignContextName(i, elements);
	  }).map(buildApiData);
	};

	var sendCreateIntentRequest = function sendCreateIntentRequest(intentData) {
	  _jquery2.default.ajax({
	    url: "https://api.api.ai/v1/intents?v=20160416",
	    beforeSend: function beforeSend(request) {
	      request.setRequestHeader("Authorization", "Bearer key");
	    },
	    type: "POST",
	    data: JSON.stringify(intentData),
	    contentType: "application/json",
	    complete: function complete(e) {
	      console.log(e);
	    }
	  });
	  console.log(JSON.stringify(intentData));
	};

	var cyElements = function cyElements(state, action) {
	  if (typeof state === 'undefined') {
	    var localState = _LocalStorage2.default.getElements();
	    console.log(localState);
	    return localState == null ? [] : localState;
	  }

	  switch (action.type) {
	    /* panel control */
	    case 'CLEAR_INTENTS':
	      console.log('clear intents');
	      return [];

	    case 'ADD_INTENT':
	      return [].concat(_toConsumableArray(state.map(function (t) {
	        return unselectElement(t);
	      })), [{
	        group: "nodes",
	        data: { user_says: "", id: action.id - 3 },
	        classes: "user_says",
	        position: { x: 100, y: 100 }
	      }, {
	        group: "nodes",
	        data: { response: "", id: action.id - 2 },
	        classes: "response",
	        position: { x: 140, y: 100 }
	      }, {
	        group: "edges",
	        data: { source: action.id - 3, target: action.id - 2, id: action.id - 1 },
	        classes: "us2r",
	        selectable: false
	      }]);
	    // TODO: position
	    // position: { x: -this.state.cy.viewport().pan().x / this.state.cy.zoom() + 40, y: -this.state.cy.viewport().pan().y / this.state.cy.zoom() + 40 }

	    case 'ADD_EDGE':
	      console.log("add edge");
	      // FIXME: temporarily avoid cycle in one intent
	      if (getEdgesBetween(action.target, action.source, state).length > 0) {
	        return state.map(function (t) {
	          return unselectElement(t);
	        });
	      }
	      return [].concat(_toConsumableArray(state.map(function (t) {
	        return unselectElement(t);
	      })), [{
	        group: "edges",
	        data: { source: action.source, target: action.target, id: action.id },
	        classes: "r2us",
	        selectable: false
	      }]);

	    case "SAVE_USER_SAYS_PROPERTIES":
	      return state.map(function (t) {
	        return modifyElement(unselectElement(t), action.nodeId, {
	          user_says: action.userSays
	        });
	      });

	    case "SAVE_RESPONSE_PROPERTIES":
	      return state.map(function (t) {
	        return modifyElement(unselectElement(t), action.nodeId, {
	          response: action.response
	        });
	      });

	    // create intent
	    case 'SEND_CREATE_INTENT_REQUEST':
	      console.log("send create intent request");
	      buildIntentsDataFromCyElements(state).forEach(sendCreateIntentRequest);
	      return state;

	    default:
	      return state;
	  }
	};

	exports.default = cyElements;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(32);

	var LocalStorage = React.createClass({
	  displayName: 'LocalStorage',

	  statics: {
	    saveElements: function saveElements(elements) {
	      var elementId = 0;
	      if (elements !== undefined) {
	        elementId = parseInt(elements.reduce(function (previous, current) {
	          if (parseInt(current.data.id) !== NaN && current.data.id > previous) {
	            return current.data.id;
	          }
	          return previous;
	        }, 0)) + 1;
	      }

	      localStorage.setItem("elementId", elementId);
	      localStorage.setItem("elements", JSON.stringify(elements));
	    },

	    saveEntities: function saveEntities(entities) {
	      localStorage.setItem("entities", JSON.stringify(entities));
	    },

	    getElements: function getElements(key) {
	      if (key == null) {
	        var elements = localStorage.getItem("elements");
	        if (elements && elements != "{}") {
	          return JSON.parse(elements);
	        } else {
	          return null;
	        }
	      } else if (key == "entities") {
	        return JSON.parse(localStorage.getItem(key));
	      } else {
	        return localStorage.getItem(key);
	      }
	    }
	  },
	  render: function render() {}
	});

	module.exports = LocalStorage;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-04-05T19:26Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.3",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {
			var key;

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the 1.x branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _DefaultVisualStyle = __webpack_require__(195);

	var _DefaultVisualStyle2 = _interopRequireDefault(_DefaultVisualStyle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var cyStyle = function cyStyle() {
	  var state = arguments.length <= 0 || arguments[0] === undefined ? _DefaultVisualStyle2.default : arguments[0];
	  var action = arguments[1];

	  switch (action.type) {
	    default:
	      return state;
	  }
	};

	exports.default = cyStyle;

/***/ },
/* 195 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var DefaultVisualStyle = [{
	  selector: 'node',
	  css: {
	    'text-valign': 'center',
	    'text-halign': 'center',
	    'color': 'white',
	    'text-outline-width': 2,
	    'text-outline-color': '#888',
	    'text-wrap': 'wrap',
	    'text-max-width': '1000px'
	  }
	}, {
	  selector: 'node.user_says',
	  css: {
	    'label': 'data(user_says)',
	    'shape': 'triangle'
	  }
	}, {
	  selector: 'node.response',
	  css: {
	    'label': 'data(response)',
	    'shape': 'rectangle'
	  }
	}, {
	  selector: 'edge',
	  css: {
	    'target-arrow-shape': 'triangle'
	  }
	}, {
	  selector: 'edge.us2r',
	  css: {
	    'color': '#555',
	    'line-color': '#555',
	    'target-arrow-color': '#555'
	  }
	}, {
	  selector: 'edge.r2us',
	  css: {
	    'color': '#ccc',
	    'line-color': '#ccc',
	    'target-arrow-color': '#ccc'
	  }
	}, {
	  selector: ':selected',
	  css: {
	    'background-color': 'black',
	    'line-color': 'black',
	    'target-arrow-color': 'black',
	    'source-arrow-color': 'black',
	    'text-outline-color': 'black'
	  }
	}];

	exports.default = DefaultVisualStyle;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _jquery = __webpack_require__(193);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _LocalStorage = __webpack_require__(192);

	var _LocalStorage2 = _interopRequireDefault(_LocalStorage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var changeEntityName = function changeEntityName(entities, entityId, name) {
	  return entities.map(function (entity, index) {
	    if (index == entityId) {
	      return Object.assign({}, entity, { name: name });
	    }
	    return entity;
	  });
	};

	var addReferenceEntry = function addReferenceEntry(entities, entityId, ref) {
	  return entities.map(function (entity, index) {
	    if (index == entityId) {
	      return Object.assign({}, entity, { entries: [].concat(_toConsumableArray(entity.entries), [ref]) });
	    }
	    return entity;
	  });
	};

	var changeReferenceValue = function changeReferenceValue(entities, entityId, refId, refValue) {
	  return entities.map(function (entity, index) {
	    if (index == entityId) {
	      return Object.assign({}, entity, { entries: entity.entries.map(function (ref, ref_index) {
	          if (ref_index == refId) {
	            return Object.assign({}, ref, { value: refValue });
	          }
	          return ref;
	        }) });
	    }
	    return entity;
	  });
	};

	var changeSynonyms = function changeSynonyms(entities, entityId, refId, synonyms) {
	  return entities.map(function (entity, index) {
	    if (index == entityId) {
	      return Object.assign({}, entity, { entries: entity.entries.map(function (ref, ref_index) {
	          if (ref_index == refId) {
	            return Object.assign({}, ref, { synonyms: synonyms.split(";") });
	          }
	          return ref;
	        }) });
	    }
	    return entity;
	  });
	};

	var removeEmptyValues = function removeEmptyValues(entities) {
	  return entities.map(function (entity) {
	    return Object.assign({}, entity, { entries: entity.entries.filter(function (ref) {
	        return ref.value != "" && ref.synonyms != null && ref.synonyms.length > 0;
	      }) });
	  }).filter(function (entity) {
	    return entity.name != "" && entity.entries != null && entity.entries.length > 0;
	  });
	};

	var sendCreateEntitiesRequest = function sendCreateEntitiesRequest(entities) {
	  _jquery2.default.ajax({
	    url: "https://api.api.ai/v1/entities?v=20160422",
	    beforeSend: function beforeSend(request) {
	      request.setRequestHeader("Authorization", "Bearer key");
	    },
	    type: "POST",
	    data: JSON.stringify(entities),
	    contentType: "application/json",
	    complete: function complete(e) {
	      console.log(e);
	    }
	  });
	};

	var entities = function entities(state, action) {
	  if (typeof state === 'undefined') {
	    var _entities = _LocalStorage2.default.getElements("entities");
	    return _entities == null ? [] : _entities;
	  }

	  switch (action.type) {
	    case "ADD_ENTITY":
	      return [].concat(_toConsumableArray(state), [{
	        name: '',
	        entries: [{
	          value: '',
	          synonyms: []
	        }]
	      }]);
	    case "CHANGE_ENTITY_NAME":
	      return changeEntityName(state, action.entityId, action.name);
	    case "SAVE_ENTITIES":
	      var newEntities = removeEmptyValues(state);
	      _LocalStorage2.default.saveEntities(newEntities);
	      sendCreateEntitiesRequest(newEntities);
	      return newEntities;
	    case "ADD_REFERENCE_ENTRY":
	      return addReferenceEntry(state, action.entityId, {
	        value: '',
	        synonyms: []
	      });
	    case "CHANGE_REFERENCE_VALUE":
	      return changeReferenceValue(state, action.entityId, action.refId, action.refValue);
	    case "CHANGE_SYNONYMS":
	      return changeSynonyms(state, action.entityId, action.refId, action.synonyms);
	    default:
	      return state;
	  }
	};

	exports.default = entities;

/***/ },
/* 197 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var intentPropertiesPanel = function intentPropertiesPanel() {
	  var state = arguments.length <= 0 || arguments[0] === undefined ? {
	    userSays: {
	      hideProperty: true,
	      text: '',
	      selectedNode: -1
	    },
	    response: {
	      hideProperty: true,
	      text: '',
	      selectedNode: -1
	    }
	  } : arguments[0];
	  var action = arguments[1];

	  switch (action.type) {
	    case 'SHOW_HIDE_INTENT_PROPERTY':
	      if (action.targetNode !== null) {
	        return {
	          userSays: {
	            hideProperty: action.nodeType != 'userSays',
	            text: action.targetNode.data.user_says || "",
	            selectedNode: parseInt(action.targetNode.data.id)
	          },
	          response: {
	            hideProperty: action.nodeType != 'response',
	            text: action.targetNode.data.response || "",
	            selectedNode: parseInt(action.targetNode.data.id)
	          }
	        };
	      }
	      return Object.assign({}, state, {
	        userSays: Object.assign({}, state.userSays, { hideProperty: true }),
	        response: Object.assign({}, state.response, { hideProperty: true })
	      });
	    case 'CHANGE_USER_SAYS_FIELD':
	      return Object.assign({}, state, {
	        userSays: Object.assign({}, state.userSays, { text: action.value })
	      });
	    case 'CHANGE_RESPONSE_FIELD':
	      return Object.assign({}, state, {
	        response: Object.assign({}, state.response, { text: action.value })
	      });
	    default:
	      return state;
	  }
	};

	exports.default = intentPropertiesPanel;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(199);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(201)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./style.css", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./style.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(200)();
	// imports


	// module
	exports.push([module.id, "body { \n   font: 14px helvetica neue, helvetica, arial, sans-serif;\n}\n\n.cy_container {\n    height: 100%;\n    width: 80%;\n    position: absolute;\n    left: 20%;\n    top: 0;\n}\n\n.base_panel {\n    width: 20%;\n    min-width: 200px;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 100;\n    background-color: lightgray;\n}\n\n.right_panel {\n    width: 20%;\n    min-width: 200px;\n    height: 100%;\n    position: absolute;\n    right: 0;\n    top: 0;\n    z-index: 100;\n    background-color: lightgray;\n}", ""]);

	// exports


/***/ },
/* 200 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(203);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(201)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../css-loader/index.js!./bootstrap.css", function() {
				var newContent = require("!!./../../../css-loader/index.js!./bootstrap.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(200)();
	// imports


	// module
	exports.push([module.id, "/*!\n * Bootstrap v3.3.6 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  vertical-align: baseline;\n}\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n[hidden],\ntemplate {\n  display: none;\n}\na {\n  background-color: transparent;\n}\na:active,\na:hover {\n  outline: 0;\n}\nabbr[title] {\n  border-bottom: 1px dotted;\n}\nb,\nstrong {\n  font-weight: bold;\n}\ndfn {\n  font-style: italic;\n}\nh1 {\n  margin: .67em 0;\n  font-size: 2em;\n}\nmark {\n  color: #000;\n  background: #ff0;\n}\nsmall {\n  font-size: 80%;\n}\nsub,\nsup {\n  position: relative;\n  font-size: 75%;\n  line-height: 0;\n  vertical-align: baseline;\n}\nsup {\n  top: -.5em;\n}\nsub {\n  bottom: -.25em;\n}\nimg {\n  border: 0;\n}\nsvg:not(:root) {\n  overflow: hidden;\n}\nfigure {\n  margin: 1em 40px;\n}\nhr {\n  height: 0;\n  -webkit-box-sizing: content-box;\n     -moz-box-sizing: content-box;\n          box-sizing: content-box;\n}\npre {\n  overflow: auto;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  margin: 0;\n  font: inherit;\n  color: inherit;\n}\nbutton {\n  overflow: visible;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\ninput {\n  line-height: normal;\n}\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n  padding: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-box-sizing: content-box;\n     -moz-box-sizing: content-box;\n          box-sizing: content-box;\n  -webkit-appearance: textfield;\n}\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\nfieldset {\n  padding: .35em .625em .75em;\n  margin: 0 2px;\n  border: 1px solid #c0c0c0;\n}\nlegend {\n  padding: 0;\n  border: 0;\n}\ntextarea {\n  overflow: auto;\n}\noptgroup {\n  font-weight: bold;\n}\ntable {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\ntd,\nth {\n  padding: 0;\n}\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\n@media print {\n  *,\n  *:before,\n  *:after {\n    color: #000 !important;\n    text-shadow: none !important;\n    background: transparent !important;\n    -webkit-box-shadow: none !important;\n            box-shadow: none !important;\n  }\n  a,\n  a:visited {\n    text-decoration: underline;\n  }\n  a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n  a[href^=\"#\"]:after,\n  a[href^=\"javascript:\"]:after {\n    content: \"\";\n  }\n  pre,\n  blockquote {\n    border: 1px solid #999;\n\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  img {\n    max-width: 100% !important;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  .navbar {\n    display: none;\n  }\n  .btn > .caret,\n  .dropup > .btn > .caret {\n    border-top-color: #000 !important;\n  }\n  .label {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}\n@font-face {\n  font-family: 'Glyphicons Halflings';\n\n  src: url(" + __webpack_require__(204) + ");\n  src: url(" + __webpack_require__(204) + "?#iefix) format('embedded-opentype'), url(" + __webpack_require__(205) + ") format('woff2'), url(" + __webpack_require__(206) + ") format('woff'), url(" + __webpack_require__(207) + ") format('truetype'), url(" + __webpack_require__(208) + "#glyphicons_halflingsregular) format('svg');\n}\n.glyphicon {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-family: 'Glyphicons Halflings';\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.glyphicon-asterisk:before {\n  content: \"*\";\n}\n.glyphicon-plus:before {\n  content: \"+\";\n}\n.glyphicon-euro:before,\n.glyphicon-eur:before {\n  content: \"\\20AC\";\n}\n.glyphicon-minus:before {\n  content: \"\\2212\";\n}\n.glyphicon-cloud:before {\n  content: \"\\2601\";\n}\n.glyphicon-envelope:before {\n  content: \"\\2709\";\n}\n.glyphicon-pencil:before {\n  content: \"\\270F\";\n}\n.glyphicon-glass:before {\n  content: \"\\E001\";\n}\n.glyphicon-music:before {\n  content: \"\\E002\";\n}\n.glyphicon-search:before {\n  content: \"\\E003\";\n}\n.glyphicon-heart:before {\n  content: \"\\E005\";\n}\n.glyphicon-star:before {\n  content: \"\\E006\";\n}\n.glyphicon-star-empty:before {\n  content: \"\\E007\";\n}\n.glyphicon-user:before {\n  content: \"\\E008\";\n}\n.glyphicon-film:before {\n  content: \"\\E009\";\n}\n.glyphicon-th-large:before {\n  content: \"\\E010\";\n}\n.glyphicon-th:before {\n  content: \"\\E011\";\n}\n.glyphicon-th-list:before {\n  content: \"\\E012\";\n}\n.glyphicon-ok:before {\n  content: \"\\E013\";\n}\n.glyphicon-remove:before {\n  content: \"\\E014\";\n}\n.glyphicon-zoom-in:before {\n  content: \"\\E015\";\n}\n.glyphicon-zoom-out:before {\n  content: \"\\E016\";\n}\n.glyphicon-off:before {\n  content: \"\\E017\";\n}\n.glyphicon-signal:before {\n  content: \"\\E018\";\n}\n.glyphicon-cog:before {\n  content: \"\\E019\";\n}\n.glyphicon-trash:before {\n  content: \"\\E020\";\n}\n.glyphicon-home:before {\n  content: \"\\E021\";\n}\n.glyphicon-file:before {\n  content: \"\\E022\";\n}\n.glyphicon-time:before {\n  content: \"\\E023\";\n}\n.glyphicon-road:before {\n  content: \"\\E024\";\n}\n.glyphicon-download-alt:before {\n  content: \"\\E025\";\n}\n.glyphicon-download:before {\n  content: \"\\E026\";\n}\n.glyphicon-upload:before {\n  content: \"\\E027\";\n}\n.glyphicon-inbox:before {\n  content: \"\\E028\";\n}\n.glyphicon-play-circle:before {\n  content: \"\\E029\";\n}\n.glyphicon-repeat:before {\n  content: \"\\E030\";\n}\n.glyphicon-refresh:before {\n  content: \"\\E031\";\n}\n.glyphicon-list-alt:before {\n  content: \"\\E032\";\n}\n.glyphicon-lock:before {\n  content: \"\\E033\";\n}\n.glyphicon-flag:before {\n  content: \"\\E034\";\n}\n.glyphicon-headphones:before {\n  content: \"\\E035\";\n}\n.glyphicon-volume-off:before {\n  content: \"\\E036\";\n}\n.glyphicon-volume-down:before {\n  content: \"\\E037\";\n}\n.glyphicon-volume-up:before {\n  content: \"\\E038\";\n}\n.glyphicon-qrcode:before {\n  content: \"\\E039\";\n}\n.glyphicon-barcode:before {\n  content: \"\\E040\";\n}\n.glyphicon-tag:before {\n  content: \"\\E041\";\n}\n.glyphicon-tags:before {\n  content: \"\\E042\";\n}\n.glyphicon-book:before {\n  content: \"\\E043\";\n}\n.glyphicon-bookmark:before {\n  content: \"\\E044\";\n}\n.glyphicon-print:before {\n  content: \"\\E045\";\n}\n.glyphicon-camera:before {\n  content: \"\\E046\";\n}\n.glyphicon-font:before {\n  content: \"\\E047\";\n}\n.glyphicon-bold:before {\n  content: \"\\E048\";\n}\n.glyphicon-italic:before {\n  content: \"\\E049\";\n}\n.glyphicon-text-height:before {\n  content: \"\\E050\";\n}\n.glyphicon-text-width:before {\n  content: \"\\E051\";\n}\n.glyphicon-align-left:before {\n  content: \"\\E052\";\n}\n.glyphicon-align-center:before {\n  content: \"\\E053\";\n}\n.glyphicon-align-right:before {\n  content: \"\\E054\";\n}\n.glyphicon-align-justify:before {\n  content: \"\\E055\";\n}\n.glyphicon-list:before {\n  content: \"\\E056\";\n}\n.glyphicon-indent-left:before {\n  content: \"\\E057\";\n}\n.glyphicon-indent-right:before {\n  content: \"\\E058\";\n}\n.glyphicon-facetime-video:before {\n  content: \"\\E059\";\n}\n.glyphicon-picture:before {\n  content: \"\\E060\";\n}\n.glyphicon-map-marker:before {\n  content: \"\\E062\";\n}\n.glyphicon-adjust:before {\n  content: \"\\E063\";\n}\n.glyphicon-tint:before {\n  content: \"\\E064\";\n}\n.glyphicon-edit:before {\n  content: \"\\E065\";\n}\n.glyphicon-share:before {\n  content: \"\\E066\";\n}\n.glyphicon-check:before {\n  content: \"\\E067\";\n}\n.glyphicon-move:before {\n  content: \"\\E068\";\n}\n.glyphicon-step-backward:before {\n  content: \"\\E069\";\n}\n.glyphicon-fast-backward:before {\n  content: \"\\E070\";\n}\n.glyphicon-backward:before {\n  content: \"\\E071\";\n}\n.glyphicon-play:before {\n  content: \"\\E072\";\n}\n.glyphicon-pause:before {\n  content: \"\\E073\";\n}\n.glyphicon-stop:before {\n  content: \"\\E074\";\n}\n.glyphicon-forward:before {\n  content: \"\\E075\";\n}\n.glyphicon-fast-forward:before {\n  content: \"\\E076\";\n}\n.glyphicon-step-forward:before {\n  content: \"\\E077\";\n}\n.glyphicon-eject:before {\n  content: \"\\E078\";\n}\n.glyphicon-chevron-left:before {\n  content: \"\\E079\";\n}\n.glyphicon-chevron-right:before {\n  content: \"\\E080\";\n}\n.glyphicon-plus-sign:before {\n  content: \"\\E081\";\n}\n.glyphicon-minus-sign:before {\n  content: \"\\E082\";\n}\n.glyphicon-remove-sign:before {\n  content: \"\\E083\";\n}\n.glyphicon-ok-sign:before {\n  content: \"\\E084\";\n}\n.glyphicon-question-sign:before {\n  content: \"\\E085\";\n}\n.glyphicon-info-sign:before {\n  content: \"\\E086\";\n}\n.glyphicon-screenshot:before {\n  content: \"\\E087\";\n}\n.glyphicon-remove-circle:before {\n  content: \"\\E088\";\n}\n.glyphicon-ok-circle:before {\n  content: \"\\E089\";\n}\n.glyphicon-ban-circle:before {\n  content: \"\\E090\";\n}\n.glyphicon-arrow-left:before {\n  content: \"\\E091\";\n}\n.glyphicon-arrow-right:before {\n  content: \"\\E092\";\n}\n.glyphicon-arrow-up:before {\n  content: \"\\E093\";\n}\n.glyphicon-arrow-down:before {\n  content: \"\\E094\";\n}\n.glyphicon-share-alt:before {\n  content: \"\\E095\";\n}\n.glyphicon-resize-full:before {\n  content: \"\\E096\";\n}\n.glyphicon-resize-small:before {\n  content: \"\\E097\";\n}\n.glyphicon-exclamation-sign:before {\n  content: \"\\E101\";\n}\n.glyphicon-gift:before {\n  content: \"\\E102\";\n}\n.glyphicon-leaf:before {\n  content: \"\\E103\";\n}\n.glyphicon-fire:before {\n  content: \"\\E104\";\n}\n.glyphicon-eye-open:before {\n  content: \"\\E105\";\n}\n.glyphicon-eye-close:before {\n  content: \"\\E106\";\n}\n.glyphicon-warning-sign:before {\n  content: \"\\E107\";\n}\n.glyphicon-plane:before {\n  content: \"\\E108\";\n}\n.glyphicon-calendar:before {\n  content: \"\\E109\";\n}\n.glyphicon-random:before {\n  content: \"\\E110\";\n}\n.glyphicon-comment:before {\n  content: \"\\E111\";\n}\n.glyphicon-magnet:before {\n  content: \"\\E112\";\n}\n.glyphicon-chevron-up:before {\n  content: \"\\E113\";\n}\n.glyphicon-chevron-down:before {\n  content: \"\\E114\";\n}\n.glyphicon-retweet:before {\n  content: \"\\E115\";\n}\n.glyphicon-shopping-cart:before {\n  content: \"\\E116\";\n}\n.glyphicon-folder-close:before {\n  content: \"\\E117\";\n}\n.glyphicon-folder-open:before {\n  content: \"\\E118\";\n}\n.glyphicon-resize-vertical:before {\n  content: \"\\E119\";\n}\n.glyphicon-resize-horizontal:before {\n  content: \"\\E120\";\n}\n.glyphicon-hdd:before {\n  content: \"\\E121\";\n}\n.glyphicon-bullhorn:before {\n  content: \"\\E122\";\n}\n.glyphicon-bell:before {\n  content: \"\\E123\";\n}\n.glyphicon-certificate:before {\n  content: \"\\E124\";\n}\n.glyphicon-thumbs-up:before {\n  content: \"\\E125\";\n}\n.glyphicon-thumbs-down:before {\n  content: \"\\E126\";\n}\n.glyphicon-hand-right:before {\n  content: \"\\E127\";\n}\n.glyphicon-hand-left:before {\n  content: \"\\E128\";\n}\n.glyphicon-hand-up:before {\n  content: \"\\E129\";\n}\n.glyphicon-hand-down:before {\n  content: \"\\E130\";\n}\n.glyphicon-circle-arrow-right:before {\n  content: \"\\E131\";\n}\n.glyphicon-circle-arrow-left:before {\n  content: \"\\E132\";\n}\n.glyphicon-circle-arrow-up:before {\n  content: \"\\E133\";\n}\n.glyphicon-circle-arrow-down:before {\n  content: \"\\E134\";\n}\n.glyphicon-globe:before {\n  content: \"\\E135\";\n}\n.glyphicon-wrench:before {\n  content: \"\\E136\";\n}\n.glyphicon-tasks:before {\n  content: \"\\E137\";\n}\n.glyphicon-filter:before {\n  content: \"\\E138\";\n}\n.glyphicon-briefcase:before {\n  content: \"\\E139\";\n}\n.glyphicon-fullscreen:before {\n  content: \"\\E140\";\n}\n.glyphicon-dashboard:before {\n  content: \"\\E141\";\n}\n.glyphicon-paperclip:before {\n  content: \"\\E142\";\n}\n.glyphicon-heart-empty:before {\n  content: \"\\E143\";\n}\n.glyphicon-link:before {\n  content: \"\\E144\";\n}\n.glyphicon-phone:before {\n  content: \"\\E145\";\n}\n.glyphicon-pushpin:before {\n  content: \"\\E146\";\n}\n.glyphicon-usd:before {\n  content: \"\\E148\";\n}\n.glyphicon-gbp:before {\n  content: \"\\E149\";\n}\n.glyphicon-sort:before {\n  content: \"\\E150\";\n}\n.glyphicon-sort-by-alphabet:before {\n  content: \"\\E151\";\n}\n.glyphicon-sort-by-alphabet-alt:before {\n  content: \"\\E152\";\n}\n.glyphicon-sort-by-order:before {\n  content: \"\\E153\";\n}\n.glyphicon-sort-by-order-alt:before {\n  content: \"\\E154\";\n}\n.glyphicon-sort-by-attributes:before {\n  content: \"\\E155\";\n}\n.glyphicon-sort-by-attributes-alt:before {\n  content: \"\\E156\";\n}\n.glyphicon-unchecked:before {\n  content: \"\\E157\";\n}\n.glyphicon-expand:before {\n  content: \"\\E158\";\n}\n.glyphicon-collapse-down:before {\n  content: \"\\E159\";\n}\n.glyphicon-collapse-up:before {\n  content: \"\\E160\";\n}\n.glyphicon-log-in:before {\n  content: \"\\E161\";\n}\n.glyphicon-flash:before {\n  content: \"\\E162\";\n}\n.glyphicon-log-out:before {\n  content: \"\\E163\";\n}\n.glyphicon-new-window:before {\n  content: \"\\E164\";\n}\n.glyphicon-record:before {\n  content: \"\\E165\";\n}\n.glyphicon-save:before {\n  content: \"\\E166\";\n}\n.glyphicon-open:before {\n  content: \"\\E167\";\n}\n.glyphicon-saved:before {\n  content: \"\\E168\";\n}\n.glyphicon-import:before {\n  content: \"\\E169\";\n}\n.glyphicon-export:before {\n  content: \"\\E170\";\n}\n.glyphicon-send:before {\n  content: \"\\E171\";\n}\n.glyphicon-floppy-disk:before {\n  content: \"\\E172\";\n}\n.glyphicon-floppy-saved:before {\n  content: \"\\E173\";\n}\n.glyphicon-floppy-remove:before {\n  content: \"\\E174\";\n}\n.glyphicon-floppy-save:before {\n  content: \"\\E175\";\n}\n.glyphicon-floppy-open:before {\n  content: \"\\E176\";\n}\n.glyphicon-credit-card:before {\n  content: \"\\E177\";\n}\n.glyphicon-transfer:before {\n  content: \"\\E178\";\n}\n.glyphicon-cutlery:before {\n  content: \"\\E179\";\n}\n.glyphicon-header:before {\n  content: \"\\E180\";\n}\n.glyphicon-compressed:before {\n  content: \"\\E181\";\n}\n.glyphicon-earphone:before {\n  content: \"\\E182\";\n}\n.glyphicon-phone-alt:before {\n  content: \"\\E183\";\n}\n.glyphicon-tower:before {\n  content: \"\\E184\";\n}\n.glyphicon-stats:before {\n  content: \"\\E185\";\n}\n.glyphicon-sd-video:before {\n  content: \"\\E186\";\n}\n.glyphicon-hd-video:before {\n  content: \"\\E187\";\n}\n.glyphicon-subtitles:before {\n  content: \"\\E188\";\n}\n.glyphicon-sound-stereo:before {\n  content: \"\\E189\";\n}\n.glyphicon-sound-dolby:before {\n  content: \"\\E190\";\n}\n.glyphicon-sound-5-1:before {\n  content: \"\\E191\";\n}\n.glyphicon-sound-6-1:before {\n  content: \"\\E192\";\n}\n.glyphicon-sound-7-1:before {\n  content: \"\\E193\";\n}\n.glyphicon-copyright-mark:before {\n  content: \"\\E194\";\n}\n.glyphicon-registration-mark:before {\n  content: \"\\E195\";\n}\n.glyphicon-cloud-download:before {\n  content: \"\\E197\";\n}\n.glyphicon-cloud-upload:before {\n  content: \"\\E198\";\n}\n.glyphicon-tree-conifer:before {\n  content: \"\\E199\";\n}\n.glyphicon-tree-deciduous:before {\n  content: \"\\E200\";\n}\n.glyphicon-cd:before {\n  content: \"\\E201\";\n}\n.glyphicon-save-file:before {\n  content: \"\\E202\";\n}\n.glyphicon-open-file:before {\n  content: \"\\E203\";\n}\n.glyphicon-level-up:before {\n  content: \"\\E204\";\n}\n.glyphicon-copy:before {\n  content: \"\\E205\";\n}\n.glyphicon-paste:before {\n  content: \"\\E206\";\n}\n.glyphicon-alert:before {\n  content: \"\\E209\";\n}\n.glyphicon-equalizer:before {\n  content: \"\\E210\";\n}\n.glyphicon-king:before {\n  content: \"\\E211\";\n}\n.glyphicon-queen:before {\n  content: \"\\E212\";\n}\n.glyphicon-pawn:before {\n  content: \"\\E213\";\n}\n.glyphicon-bishop:before {\n  content: \"\\E214\";\n}\n.glyphicon-knight:before {\n  content: \"\\E215\";\n}\n.glyphicon-baby-formula:before {\n  content: \"\\E216\";\n}\n.glyphicon-tent:before {\n  content: \"\\26FA\";\n}\n.glyphicon-blackboard:before {\n  content: \"\\E218\";\n}\n.glyphicon-bed:before {\n  content: \"\\E219\";\n}\n.glyphicon-apple:before {\n  content: \"\\F8FF\";\n}\n.glyphicon-erase:before {\n  content: \"\\E221\";\n}\n.glyphicon-hourglass:before {\n  content: \"\\231B\";\n}\n.glyphicon-lamp:before {\n  content: \"\\E223\";\n}\n.glyphicon-duplicate:before {\n  content: \"\\E224\";\n}\n.glyphicon-piggy-bank:before {\n  content: \"\\E225\";\n}\n.glyphicon-scissors:before {\n  content: \"\\E226\";\n}\n.glyphicon-bitcoin:before {\n  content: \"\\E227\";\n}\n.glyphicon-btc:before {\n  content: \"\\E227\";\n}\n.glyphicon-xbt:before {\n  content: \"\\E227\";\n}\n.glyphicon-yen:before {\n  content: \"\\A5\";\n}\n.glyphicon-jpy:before {\n  content: \"\\A5\";\n}\n.glyphicon-ruble:before {\n  content: \"\\20BD\";\n}\n.glyphicon-rub:before {\n  content: \"\\20BD\";\n}\n.glyphicon-scale:before {\n  content: \"\\E230\";\n}\n.glyphicon-ice-lolly:before {\n  content: \"\\E231\";\n}\n.glyphicon-ice-lolly-tasted:before {\n  content: \"\\E232\";\n}\n.glyphicon-education:before {\n  content: \"\\E233\";\n}\n.glyphicon-option-horizontal:before {\n  content: \"\\E234\";\n}\n.glyphicon-option-vertical:before {\n  content: \"\\E235\";\n}\n.glyphicon-menu-hamburger:before {\n  content: \"\\E236\";\n}\n.glyphicon-modal-window:before {\n  content: \"\\E237\";\n}\n.glyphicon-oil:before {\n  content: \"\\E238\";\n}\n.glyphicon-grain:before {\n  content: \"\\E239\";\n}\n.glyphicon-sunglasses:before {\n  content: \"\\E240\";\n}\n.glyphicon-text-size:before {\n  content: \"\\E241\";\n}\n.glyphicon-text-color:before {\n  content: \"\\E242\";\n}\n.glyphicon-text-background:before {\n  content: \"\\E243\";\n}\n.glyphicon-object-align-top:before {\n  content: \"\\E244\";\n}\n.glyphicon-object-align-bottom:before {\n  content: \"\\E245\";\n}\n.glyphicon-object-align-horizontal:before {\n  content: \"\\E246\";\n}\n.glyphicon-object-align-left:before {\n  content: \"\\E247\";\n}\n.glyphicon-object-align-vertical:before {\n  content: \"\\E248\";\n}\n.glyphicon-object-align-right:before {\n  content: \"\\E249\";\n}\n.glyphicon-triangle-right:before {\n  content: \"\\E250\";\n}\n.glyphicon-triangle-left:before {\n  content: \"\\E251\";\n}\n.glyphicon-triangle-bottom:before {\n  content: \"\\E252\";\n}\n.glyphicon-triangle-top:before {\n  content: \"\\E253\";\n}\n.glyphicon-console:before {\n  content: \"\\E254\";\n}\n.glyphicon-superscript:before {\n  content: \"\\E255\";\n}\n.glyphicon-subscript:before {\n  content: \"\\E256\";\n}\n.glyphicon-menu-left:before {\n  content: \"\\E257\";\n}\n.glyphicon-menu-right:before {\n  content: \"\\E258\";\n}\n.glyphicon-menu-down:before {\n  content: \"\\E259\";\n}\n.glyphicon-menu-up:before {\n  content: \"\\E260\";\n}\n* {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n*:before,\n*:after {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\nhtml {\n  font-size: 10px;\n\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #333;\n  background-color: #fff;\n}\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\na {\n  color: #337ab7;\n  text-decoration: none;\n}\na:hover,\na:focus {\n  color: #23527c;\n  text-decoration: underline;\n}\na:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nfigure {\n  margin: 0;\n}\nimg {\n  vertical-align: middle;\n}\n.img-responsive,\n.thumbnail > img,\n.thumbnail a > img,\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n.img-rounded {\n  border-radius: 6px;\n}\n.img-thumbnail {\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n  padding: 4px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: all .2s ease-in-out;\n       -o-transition: all .2s ease-in-out;\n          transition: all .2s ease-in-out;\n}\n.img-circle {\n  border-radius: 50%;\n}\nhr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #eee;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n[role=\"button\"] {\n  cursor: pointer;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\nh1 small,\nh2 small,\nh3 small,\nh4 small,\nh5 small,\nh6 small,\n.h1 small,\n.h2 small,\n.h3 small,\n.h4 small,\n.h5 small,\n.h6 small,\nh1 .small,\nh2 .small,\nh3 .small,\nh4 .small,\nh5 .small,\nh6 .small,\n.h1 .small,\n.h2 .small,\n.h3 .small,\n.h4 .small,\n.h5 .small,\n.h6 .small {\n  font-weight: normal;\n  line-height: 1;\n  color: #777;\n}\nh1,\n.h1,\nh2,\n.h2,\nh3,\n.h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\nh1 small,\n.h1 small,\nh2 small,\n.h2 small,\nh3 small,\n.h3 small,\nh1 .small,\n.h1 .small,\nh2 .small,\n.h2 .small,\nh3 .small,\n.h3 .small {\n  font-size: 65%;\n}\nh4,\n.h4,\nh5,\n.h5,\nh6,\n.h6 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nh4 small,\n.h4 small,\nh5 small,\n.h5 small,\nh6 small,\n.h6 small,\nh4 .small,\n.h4 .small,\nh5 .small,\n.h5 .small,\nh6 .small,\n.h6 .small {\n  font-size: 75%;\n}\nh1,\n.h1 {\n  font-size: 36px;\n}\nh2,\n.h2 {\n  font-size: 30px;\n}\nh3,\n.h3 {\n  font-size: 24px;\n}\nh4,\n.h4 {\n  font-size: 18px;\n}\nh5,\n.h5 {\n  font-size: 14px;\n}\nh6,\n.h6 {\n  font-size: 12px;\n}\np {\n  margin: 0 0 10px;\n}\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.4;\n}\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\nsmall,\n.small {\n  font-size: 85%;\n}\nmark,\n.mark {\n  padding: .2em;\n  background-color: #fcf8e3;\n}\n.text-left {\n  text-align: left;\n}\n.text-right {\n  text-align: right;\n}\n.text-center {\n  text-align: center;\n}\n.text-justify {\n  text-align: justify;\n}\n.text-nowrap {\n  white-space: nowrap;\n}\n.text-lowercase {\n  text-transform: lowercase;\n}\n.text-uppercase {\n  text-transform: uppercase;\n}\n.text-capitalize {\n  text-transform: capitalize;\n}\n.text-muted {\n  color: #777;\n}\n.text-primary {\n  color: #337ab7;\n}\na.text-primary:hover,\na.text-primary:focus {\n  color: #286090;\n}\n.text-success {\n  color: #3c763d;\n}\na.text-success:hover,\na.text-success:focus {\n  color: #2b542c;\n}\n.text-info {\n  color: #31708f;\n}\na.text-info:hover,\na.text-info:focus {\n  color: #245269;\n}\n.text-warning {\n  color: #8a6d3b;\n}\na.text-warning:hover,\na.text-warning:focus {\n  color: #66512c;\n}\n.text-danger {\n  color: #a94442;\n}\na.text-danger:hover,\na.text-danger:focus {\n  color: #843534;\n}\n.bg-primary {\n  color: #fff;\n  background-color: #337ab7;\n}\na.bg-primary:hover,\na.bg-primary:focus {\n  background-color: #286090;\n}\n.bg-success {\n  background-color: #dff0d8;\n}\na.bg-success:hover,\na.bg-success:focus {\n  background-color: #c1e2b3;\n}\n.bg-info {\n  background-color: #d9edf7;\n}\na.bg-info:hover,\na.bg-info:focus {\n  background-color: #afd9ee;\n}\n.bg-warning {\n  background-color: #fcf8e3;\n}\na.bg-warning:hover,\na.bg-warning:focus {\n  background-color: #f7ecb5;\n}\n.bg-danger {\n  background-color: #f2dede;\n}\na.bg-danger:hover,\na.bg-danger:focus {\n  background-color: #e4b9b9;\n}\n.page-header {\n  padding-bottom: 9px;\n  margin: 40px 0 20px;\n  border-bottom: 1px solid #eee;\n}\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\nul ul,\nol ul,\nul ol,\nol ol {\n  margin-bottom: 0;\n}\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n.list-inline {\n  padding-left: 0;\n  margin-left: -5px;\n  list-style: none;\n}\n.list-inline > li {\n  display: inline-block;\n  padding-right: 5px;\n  padding-left: 5px;\n}\ndl {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\ndt,\ndd {\n  line-height: 1.42857143;\n}\ndt {\n  font-weight: bold;\n}\ndd {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .dl-horizontal dt {\n    float: left;\n    width: 160px;\n    overflow: hidden;\n    clear: left;\n    text-align: right;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dl-horizontal dd {\n    margin-left: 180px;\n  }\n}\nabbr[title],\nabbr[data-original-title] {\n  cursor: help;\n  border-bottom: 1px dotted #777;\n}\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\nblockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  font-size: 17.5px;\n  border-left: 5px solid #eee;\n}\nblockquote p:last-child,\nblockquote ul:last-child,\nblockquote ol:last-child {\n  margin-bottom: 0;\n}\nblockquote footer,\nblockquote small,\nblockquote .small {\n  display: block;\n  font-size: 80%;\n  line-height: 1.42857143;\n  color: #777;\n}\nblockquote footer:before,\nblockquote small:before,\nblockquote .small:before {\n  content: '\\2014   \\A0';\n}\n.blockquote-reverse,\nblockquote.pull-right {\n  padding-right: 15px;\n  padding-left: 0;\n  text-align: right;\n  border-right: 5px solid #eee;\n  border-left: 0;\n}\n.blockquote-reverse footer:before,\nblockquote.pull-right footer:before,\n.blockquote-reverse small:before,\nblockquote.pull-right small:before,\n.blockquote-reverse .small:before,\nblockquote.pull-right .small:before {\n  content: '';\n}\n.blockquote-reverse footer:after,\nblockquote.pull-right footer:after,\n.blockquote-reverse small:after,\nblockquote.pull-right small:after,\n.blockquote-reverse .small:after,\nblockquote.pull-right .small:after {\n  content: '\\A0   \\2014';\n}\naddress {\n  margin-bottom: 20px;\n  font-style: normal;\n  line-height: 1.42857143;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\nkbd {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #fff;\n  background-color: #333;\n  border-radius: 3px;\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);\n          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);\n}\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: bold;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\npre {\n  display: block;\n  padding: 9.5px;\n  margin: 0 0 10px;\n  font-size: 13px;\n  line-height: 1.42857143;\n  color: #333;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\npre code {\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  white-space: pre-wrap;\n  background-color: transparent;\n  border-radius: 0;\n}\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n.container {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n.container-fluid {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n.row {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n.col-xs-12 {\n  width: 100%;\n}\n.col-xs-11 {\n  width: 91.66666667%;\n}\n.col-xs-10 {\n  width: 83.33333333%;\n}\n.col-xs-9 {\n  width: 75%;\n}\n.col-xs-8 {\n  width: 66.66666667%;\n}\n.col-xs-7 {\n  width: 58.33333333%;\n}\n.col-xs-6 {\n  width: 50%;\n}\n.col-xs-5 {\n  width: 41.66666667%;\n}\n.col-xs-4 {\n  width: 33.33333333%;\n}\n.col-xs-3 {\n  width: 25%;\n}\n.col-xs-2 {\n  width: 16.66666667%;\n}\n.col-xs-1 {\n  width: 8.33333333%;\n}\n.col-xs-pull-12 {\n  right: 100%;\n}\n.col-xs-pull-11 {\n  right: 91.66666667%;\n}\n.col-xs-pull-10 {\n  right: 83.33333333%;\n}\n.col-xs-pull-9 {\n  right: 75%;\n}\n.col-xs-pull-8 {\n  right: 66.66666667%;\n}\n.col-xs-pull-7 {\n  right: 58.33333333%;\n}\n.col-xs-pull-6 {\n  right: 50%;\n}\n.col-xs-pull-5 {\n  right: 41.66666667%;\n}\n.col-xs-pull-4 {\n  right: 33.33333333%;\n}\n.col-xs-pull-3 {\n  right: 25%;\n}\n.col-xs-pull-2 {\n  right: 16.66666667%;\n}\n.col-xs-pull-1 {\n  right: 8.33333333%;\n}\n.col-xs-pull-0 {\n  right: auto;\n}\n.col-xs-push-12 {\n  left: 100%;\n}\n.col-xs-push-11 {\n  left: 91.66666667%;\n}\n.col-xs-push-10 {\n  left: 83.33333333%;\n}\n.col-xs-push-9 {\n  left: 75%;\n}\n.col-xs-push-8 {\n  left: 66.66666667%;\n}\n.col-xs-push-7 {\n  left: 58.33333333%;\n}\n.col-xs-push-6 {\n  left: 50%;\n}\n.col-xs-push-5 {\n  left: 41.66666667%;\n}\n.col-xs-push-4 {\n  left: 33.33333333%;\n}\n.col-xs-push-3 {\n  left: 25%;\n}\n.col-xs-push-2 {\n  left: 16.66666667%;\n}\n.col-xs-push-1 {\n  left: 8.33333333%;\n}\n.col-xs-push-0 {\n  left: auto;\n}\n.col-xs-offset-12 {\n  margin-left: 100%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666667%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666667%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.33333333%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666667%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.66666667%;\n}\n.col-xs-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-xs-offset-0 {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\n    float: left;\n  }\n  .col-sm-12 {\n    width: 100%;\n  }\n  .col-sm-11 {\n    width: 91.66666667%;\n  }\n  .col-sm-10 {\n    width: 83.33333333%;\n  }\n  .col-sm-9 {\n    width: 75%;\n  }\n  .col-sm-8 {\n    width: 66.66666667%;\n  }\n  .col-sm-7 {\n    width: 58.33333333%;\n  }\n  .col-sm-6 {\n    width: 50%;\n  }\n  .col-sm-5 {\n    width: 41.66666667%;\n  }\n  .col-sm-4 {\n    width: 33.33333333%;\n  }\n  .col-sm-3 {\n    width: 25%;\n  }\n  .col-sm-2 {\n    width: 16.66666667%;\n  }\n  .col-sm-1 {\n    width: 8.33333333%;\n  }\n  .col-sm-pull-12 {\n    right: 100%;\n  }\n  .col-sm-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-sm-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-sm-pull-9 {\n    right: 75%;\n  }\n  .col-sm-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-sm-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-sm-pull-6 {\n    right: 50%;\n  }\n  .col-sm-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-sm-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-sm-pull-3 {\n    right: 25%;\n  }\n  .col-sm-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-sm-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-sm-pull-0 {\n    right: auto;\n  }\n  .col-sm-push-12 {\n    left: 100%;\n  }\n  .col-sm-push-11 {\n    left: 91.66666667%;\n  }\n  .col-sm-push-10 {\n    left: 83.33333333%;\n  }\n  .col-sm-push-9 {\n    left: 75%;\n  }\n  .col-sm-push-8 {\n    left: 66.66666667%;\n  }\n  .col-sm-push-7 {\n    left: 58.33333333%;\n  }\n  .col-sm-push-6 {\n    left: 50%;\n  }\n  .col-sm-push-5 {\n    left: 41.66666667%;\n  }\n  .col-sm-push-4 {\n    left: 33.33333333%;\n  }\n  .col-sm-push-3 {\n    left: 25%;\n  }\n  .col-sm-push-2 {\n    left: 16.66666667%;\n  }\n  .col-sm-push-1 {\n    left: 8.33333333%;\n  }\n  .col-sm-push-0 {\n    left: auto;\n  }\n  .col-sm-offset-12 {\n    margin-left: 100%;\n  }\n  .col-sm-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-sm-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n  .col-sm-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-sm-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n  .col-sm-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-sm-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n  .col-sm-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-sm-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-sm-offset-0 {\n    margin-left: 0;\n  }\n}\n@media (min-width: 992px) {\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666667%;\n  }\n  .col-md-10 {\n    width: 83.33333333%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666667%;\n  }\n  .col-md-7 {\n    width: 58.33333333%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.66666667%;\n  }\n  .col-md-1 {\n    width: 8.33333333%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-md-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-md-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666667%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666667%;\n  }\n  .col-md-push-7 {\n    left: 58.33333333%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.66666667%;\n  }\n  .col-md-push-1 {\n    left: 8.33333333%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0;\n  }\n}\n@media (min-width: 1200px) {\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\n    float: left;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-11 {\n    width: 91.66666667%;\n  }\n  .col-lg-10 {\n    width: 83.33333333%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-8 {\n    width: 66.66666667%;\n  }\n  .col-lg-7 {\n    width: 58.33333333%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-5 {\n    width: 41.66666667%;\n  }\n  .col-lg-4 {\n    width: 33.33333333%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-2 {\n    width: 16.66666667%;\n  }\n  .col-lg-1 {\n    width: 8.33333333%;\n  }\n  .col-lg-pull-12 {\n    right: 100%;\n  }\n  .col-lg-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-lg-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-lg-pull-9 {\n    right: 75%;\n  }\n  .col-lg-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-lg-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-lg-pull-6 {\n    right: 50%;\n  }\n  .col-lg-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-lg-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-lg-pull-3 {\n    right: 25%;\n  }\n  .col-lg-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-lg-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-lg-pull-0 {\n    right: auto;\n  }\n  .col-lg-push-12 {\n    left: 100%;\n  }\n  .col-lg-push-11 {\n    left: 91.66666667%;\n  }\n  .col-lg-push-10 {\n    left: 83.33333333%;\n  }\n  .col-lg-push-9 {\n    left: 75%;\n  }\n  .col-lg-push-8 {\n    left: 66.66666667%;\n  }\n  .col-lg-push-7 {\n    left: 58.33333333%;\n  }\n  .col-lg-push-6 {\n    left: 50%;\n  }\n  .col-lg-push-5 {\n    left: 41.66666667%;\n  }\n  .col-lg-push-4 {\n    left: 33.33333333%;\n  }\n  .col-lg-push-3 {\n    left: 25%;\n  }\n  .col-lg-push-2 {\n    left: 16.66666667%;\n  }\n  .col-lg-push-1 {\n    left: 8.33333333%;\n  }\n  .col-lg-push-0 {\n    left: auto;\n  }\n  .col-lg-offset-12 {\n    margin-left: 100%;\n  }\n  .col-lg-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-lg-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n  .col-lg-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-lg-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n  .col-lg-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-lg-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n  .col-lg-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-lg-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-lg-offset-0 {\n    margin-left: 0;\n  }\n}\ntable {\n  background-color: transparent;\n}\ncaption {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  color: #777;\n  text-align: left;\n}\nth {\n  text-align: left;\n}\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n}\n.table > thead > tr > th,\n.table > tbody > tr > th,\n.table > tfoot > tr > th,\n.table > thead > tr > td,\n.table > tbody > tr > td,\n.table > tfoot > tr > td {\n  padding: 8px;\n  line-height: 1.42857143;\n  vertical-align: top;\n  border-top: 1px solid #ddd;\n}\n.table > thead > tr > th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #ddd;\n}\n.table > caption + thead > tr:first-child > th,\n.table > colgroup + thead > tr:first-child > th,\n.table > thead:first-child > tr:first-child > th,\n.table > caption + thead > tr:first-child > td,\n.table > colgroup + thead > tr:first-child > td,\n.table > thead:first-child > tr:first-child > td {\n  border-top: 0;\n}\n.table > tbody + tbody {\n  border-top: 2px solid #ddd;\n}\n.table .table {\n  background-color: #fff;\n}\n.table-condensed > thead > tr > th,\n.table-condensed > tbody > tr > th,\n.table-condensed > tfoot > tr > th,\n.table-condensed > thead > tr > td,\n.table-condensed > tbody > tr > td,\n.table-condensed > tfoot > tr > td {\n  padding: 5px;\n}\n.table-bordered {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > tbody > tr > th,\n.table-bordered > tfoot > tr > th,\n.table-bordered > thead > tr > td,\n.table-bordered > tbody > tr > td,\n.table-bordered > tfoot > tr > td {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > thead > tr > td {\n  border-bottom-width: 2px;\n}\n.table-striped > tbody > tr:nth-of-type(odd) {\n  background-color: #f9f9f9;\n}\n.table-hover > tbody > tr:hover {\n  background-color: #f5f5f5;\n}\ntable col[class*=\"col-\"] {\n  position: static;\n  display: table-column;\n  float: none;\n}\ntable td[class*=\"col-\"],\ntable th[class*=\"col-\"] {\n  position: static;\n  display: table-cell;\n  float: none;\n}\n.table > thead > tr > td.active,\n.table > tbody > tr > td.active,\n.table > tfoot > tr > td.active,\n.table > thead > tr > th.active,\n.table > tbody > tr > th.active,\n.table > tfoot > tr > th.active,\n.table > thead > tr.active > td,\n.table > tbody > tr.active > td,\n.table > tfoot > tr.active > td,\n.table > thead > tr.active > th,\n.table > tbody > tr.active > th,\n.table > tfoot > tr.active > th {\n  background-color: #f5f5f5;\n}\n.table-hover > tbody > tr > td.active:hover,\n.table-hover > tbody > tr > th.active:hover,\n.table-hover > tbody > tr.active:hover > td,\n.table-hover > tbody > tr:hover > .active,\n.table-hover > tbody > tr.active:hover > th {\n  background-color: #e8e8e8;\n}\n.table > thead > tr > td.success,\n.table > tbody > tr > td.success,\n.table > tfoot > tr > td.success,\n.table > thead > tr > th.success,\n.table > tbody > tr > th.success,\n.table > tfoot > tr > th.success,\n.table > thead > tr.success > td,\n.table > tbody > tr.success > td,\n.table > tfoot > tr.success > td,\n.table > thead > tr.success > th,\n.table > tbody > tr.success > th,\n.table > tfoot > tr.success > th {\n  background-color: #dff0d8;\n}\n.table-hover > tbody > tr > td.success:hover,\n.table-hover > tbody > tr > th.success:hover,\n.table-hover > tbody > tr.success:hover > td,\n.table-hover > tbody > tr:hover > .success,\n.table-hover > tbody > tr.success:hover > th {\n  background-color: #d0e9c6;\n}\n.table > thead > tr > td.info,\n.table > tbody > tr > td.info,\n.table > tfoot > tr > td.info,\n.table > thead > tr > th.info,\n.table > tbody > tr > th.info,\n.table > tfoot > tr > th.info,\n.table > thead > tr.info > td,\n.table > tbody > tr.info > td,\n.table > tfoot > tr.info > td,\n.table > thead > tr.info > th,\n.table > tbody > tr.info > th,\n.table > tfoot > tr.info > th {\n  background-color: #d9edf7;\n}\n.table-hover > tbody > tr > td.info:hover,\n.table-hover > tbody > tr > th.info:hover,\n.table-hover > tbody > tr.info:hover > td,\n.table-hover > tbody > tr:hover > .info,\n.table-hover > tbody > tr.info:hover > th {\n  background-color: #c4e3f3;\n}\n.table > thead > tr > td.warning,\n.table > tbody > tr > td.warning,\n.table > tfoot > tr > td.warning,\n.table > thead > tr > th.warning,\n.table > tbody > tr > th.warning,\n.table > tfoot > tr > th.warning,\n.table > thead > tr.warning > td,\n.table > tbody > tr.warning > td,\n.table > tfoot > tr.warning > td,\n.table > thead > tr.warning > th,\n.table > tbody > tr.warning > th,\n.table > tfoot > tr.warning > th {\n  background-color: #fcf8e3;\n}\n.table-hover > tbody > tr > td.warning:hover,\n.table-hover > tbody > tr > th.warning:hover,\n.table-hover > tbody > tr.warning:hover > td,\n.table-hover > tbody > tr:hover > .warning,\n.table-hover > tbody > tr.warning:hover > th {\n  background-color: #faf2cc;\n}\n.table > thead > tr > td.danger,\n.table > tbody > tr > td.danger,\n.table > tfoot > tr > td.danger,\n.table > thead > tr > th.danger,\n.table > tbody > tr > th.danger,\n.table > tfoot > tr > th.danger,\n.table > thead > tr.danger > td,\n.table > tbody > tr.danger > td,\n.table > tfoot > tr.danger > td,\n.table > thead > tr.danger > th,\n.table > tbody > tr.danger > th,\n.table > tfoot > tr.danger > th {\n  background-color: #f2dede;\n}\n.table-hover > tbody > tr > td.danger:hover,\n.table-hover > tbody > tr > th.danger:hover,\n.table-hover > tbody > tr.danger:hover > td,\n.table-hover > tbody > tr:hover > .danger,\n.table-hover > tbody > tr.danger:hover > th {\n  background-color: #ebcccc;\n}\n.table-responsive {\n  min-height: .01%;\n  overflow-x: auto;\n}\n@media screen and (max-width: 767px) {\n  .table-responsive {\n    width: 100%;\n    margin-bottom: 15px;\n    overflow-y: hidden;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    border: 1px solid #ddd;\n  }\n  .table-responsive > .table {\n    margin-bottom: 0;\n  }\n  .table-responsive > .table > thead > tr > th,\n  .table-responsive > .table > tbody > tr > th,\n  .table-responsive > .table > tfoot > tr > th,\n  .table-responsive > .table > thead > tr > td,\n  .table-responsive > .table > tbody > tr > td,\n  .table-responsive > .table > tfoot > tr > td {\n    white-space: nowrap;\n  }\n  .table-responsive > .table-bordered {\n    border: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:first-child,\n  .table-responsive > .table-bordered > tbody > tr > th:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n  .table-responsive > .table-bordered > thead > tr > td:first-child,\n  .table-responsive > .table-bordered > tbody > tr > td:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n    border-left: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:last-child,\n  .table-responsive > .table-bordered > tbody > tr > th:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n  .table-responsive > .table-bordered > thead > tr > td:last-child,\n  .table-responsive > .table-bordered > tbody > tr > td:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n    border-right: 0;\n  }\n  .table-responsive > .table-bordered > tbody > tr:last-child > th,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > th,\n  .table-responsive > .table-bordered > tbody > tr:last-child > td,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > td {\n    border-bottom: 0;\n  }\n}\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\nlegend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #333;\n  border: 0;\n  border-bottom: 1px solid #e5e5e5;\n}\nlabel {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\ninput[type=\"search\"] {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\ninput[type=\"file\"] {\n  display: block;\n}\ninput[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\nselect[multiple],\nselect[size] {\n  height: auto;\n}\ninput[type=\"file\"]:focus,\ninput[type=\"radio\"]:focus,\ninput[type=\"checkbox\"]:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\noutput {\n  display: block;\n  padding-top: 7px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555;\n}\n.form-control {\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555;\n  background-color: #fff;\n  background-image: none;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;\n       -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n}\n.form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);\n          box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);\n}\n.form-control::-moz-placeholder {\n  color: #999;\n  opacity: 1;\n}\n.form-control:-ms-input-placeholder {\n  color: #999;\n}\n.form-control::-webkit-input-placeholder {\n  color: #999;\n}\n.form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\n.form-control[disabled],\n.form-control[readonly],\nfieldset[disabled] .form-control {\n  background-color: #eee;\n  opacity: 1;\n}\n.form-control[disabled],\nfieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\ntextarea.form-control {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: none;\n}\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  input[type=\"date\"].form-control,\n  input[type=\"time\"].form-control,\n  input[type=\"datetime-local\"].form-control,\n  input[type=\"month\"].form-control {\n    line-height: 34px;\n  }\n  input[type=\"date\"].input-sm,\n  input[type=\"time\"].input-sm,\n  input[type=\"datetime-local\"].input-sm,\n  input[type=\"month\"].input-sm,\n  .input-group-sm input[type=\"date\"],\n  .input-group-sm input[type=\"time\"],\n  .input-group-sm input[type=\"datetime-local\"],\n  .input-group-sm input[type=\"month\"] {\n    line-height: 30px;\n  }\n  input[type=\"date\"].input-lg,\n  input[type=\"time\"].input-lg,\n  input[type=\"datetime-local\"].input-lg,\n  input[type=\"month\"].input-lg,\n  .input-group-lg input[type=\"date\"],\n  .input-group-lg input[type=\"time\"],\n  .input-group-lg input[type=\"datetime-local\"],\n  .input-group-lg input[type=\"month\"] {\n    line-height: 46px;\n  }\n}\n.form-group {\n  margin-bottom: 15px;\n}\n.radio,\n.checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.radio label,\n.checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  cursor: pointer;\n}\n.radio input[type=\"radio\"],\n.radio-inline input[type=\"radio\"],\n.checkbox input[type=\"checkbox\"],\n.checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-top: 4px \\9;\n  margin-left: -20px;\n}\n.radio + .radio,\n.checkbox + .checkbox {\n  margin-top: -5px;\n}\n.radio-inline,\n.checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  vertical-align: middle;\n  cursor: pointer;\n}\n.radio-inline + .radio-inline,\n.checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\ninput[type=\"radio\"][disabled],\ninput[type=\"checkbox\"][disabled],\ninput[type=\"radio\"].disabled,\ninput[type=\"checkbox\"].disabled,\nfieldset[disabled] input[type=\"radio\"],\nfieldset[disabled] input[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\n.radio-inline.disabled,\n.checkbox-inline.disabled,\nfieldset[disabled] .radio-inline,\nfieldset[disabled] .checkbox-inline {\n  cursor: not-allowed;\n}\n.radio.disabled label,\n.checkbox.disabled label,\nfieldset[disabled] .radio label,\nfieldset[disabled] .checkbox label {\n  cursor: not-allowed;\n}\n.form-control-static {\n  min-height: 34px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n  margin-bottom: 0;\n}\n.form-control-static.input-lg,\n.form-control-static.input-sm {\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-sm {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-sm {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-sm,\nselect[multiple].input-sm {\n  height: auto;\n}\n.form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\n.form-group-sm textarea.form-control,\n.form-group-sm select[multiple].form-control {\n  height: auto;\n}\n.form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.input-lg {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-lg {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-lg,\nselect[multiple].input-lg {\n  height: auto;\n}\n.form-group-lg .form-control {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.form-group-lg select.form-control {\n  height: 46px;\n  line-height: 46px;\n}\n.form-group-lg textarea.form-control,\n.form-group-lg select[multiple].form-control {\n  height: auto;\n}\n.form-group-lg .form-control-static {\n  height: 46px;\n  min-height: 38px;\n  padding: 11px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.has-feedback {\n  position: relative;\n}\n.has-feedback .form-control {\n  padding-right: 42.5px;\n}\n.form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 34px;\n  height: 34px;\n  line-height: 34px;\n  text-align: center;\n  pointer-events: none;\n}\n.input-lg + .form-control-feedback,\n.input-group-lg + .form-control-feedback,\n.form-group-lg .form-control + .form-control-feedback {\n  width: 46px;\n  height: 46px;\n  line-height: 46px;\n}\n.input-sm + .form-control-feedback,\n.input-group-sm + .form-control-feedback,\n.form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\n.has-success .help-block,\n.has-success .control-label,\n.has-success .radio,\n.has-success .checkbox,\n.has-success .radio-inline,\n.has-success .checkbox-inline,\n.has-success.radio label,\n.has-success.checkbox label,\n.has-success.radio-inline label,\n.has-success.checkbox-inline label {\n  color: #3c763d;\n}\n.has-success .form-control {\n  border-color: #3c763d;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-success .form-control:focus {\n  border-color: #2b542c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;\n}\n.has-success .input-group-addon {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #3c763d;\n}\n.has-success .form-control-feedback {\n  color: #3c763d;\n}\n.has-warning .help-block,\n.has-warning .control-label,\n.has-warning .radio,\n.has-warning .checkbox,\n.has-warning .radio-inline,\n.has-warning .checkbox-inline,\n.has-warning.radio label,\n.has-warning.checkbox label,\n.has-warning.radio-inline label,\n.has-warning.checkbox-inline label {\n  color: #8a6d3b;\n}\n.has-warning .form-control {\n  border-color: #8a6d3b;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-warning .form-control:focus {\n  border-color: #66512c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;\n}\n.has-warning .input-group-addon {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #8a6d3b;\n}\n.has-warning .form-control-feedback {\n  color: #8a6d3b;\n}\n.has-error .help-block,\n.has-error .control-label,\n.has-error .radio,\n.has-error .checkbox,\n.has-error .radio-inline,\n.has-error .checkbox-inline,\n.has-error.radio label,\n.has-error.checkbox label,\n.has-error.radio-inline label,\n.has-error.checkbox-inline label {\n  color: #a94442;\n}\n.has-error .form-control {\n  border-color: #a94442;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-error .form-control:focus {\n  border-color: #843534;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;\n}\n.has-error .input-group-addon {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #a94442;\n}\n.has-error .form-control-feedback {\n  color: #a94442;\n}\n.has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\n.has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\n.help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #737373;\n}\n@media (min-width: 768px) {\n  .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-static {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .form-inline .input-group .input-group-addon,\n  .form-inline .input-group .input-group-btn,\n  .form-inline .input-group .form-control {\n    width: auto;\n  }\n  .form-inline .input-group > .form-control {\n    width: 100%;\n  }\n  .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio,\n  .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio label,\n  .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  .form-inline .radio input[type=\"radio\"],\n  .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox,\n.form-horizontal .radio-inline,\n.form-horizontal .checkbox-inline {\n  padding-top: 7px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox {\n  min-height: 27px;\n}\n.form-horizontal .form-group {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .control-label {\n    padding-top: 7px;\n    margin-bottom: 0;\n    text-align: right;\n  }\n}\n.form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-lg .control-label {\n    padding-top: 11px;\n    font-size: 18px;\n  }\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\n.btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.btn:focus,\n.btn:active:focus,\n.btn.active:focus,\n.btn.focus,\n.btn:active.focus,\n.btn.active.focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n.btn:hover,\n.btn:focus,\n.btn.focus {\n  color: #333;\n  text-decoration: none;\n}\n.btn:active,\n.btn.active {\n  background-image: none;\n  outline: 0;\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n}\n.btn.disabled,\n.btn[disabled],\nfieldset[disabled] .btn {\n  cursor: not-allowed;\n  filter: alpha(opacity=65);\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  opacity: .65;\n}\na.btn.disabled,\nfieldset[disabled] a.btn {\n  pointer-events: none;\n}\n.btn-default {\n  color: #333;\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default:focus,\n.btn-default.focus {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #8c8c8c;\n}\n.btn-default:hover {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active:hover,\n.btn-default.active:hover,\n.open > .dropdown-toggle.btn-default:hover,\n.btn-default:active:focus,\n.btn-default.active:focus,\n.open > .dropdown-toggle.btn-default:focus,\n.btn-default:active.focus,\n.btn-default.active.focus,\n.open > .dropdown-toggle.btn-default.focus {\n  color: #333;\n  background-color: #d4d4d4;\n  border-color: #8c8c8c;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  background-image: none;\n}\n.btn-default.disabled:hover,\n.btn-default[disabled]:hover,\nfieldset[disabled] .btn-default:hover,\n.btn-default.disabled:focus,\n.btn-default[disabled]:focus,\nfieldset[disabled] .btn-default:focus,\n.btn-default.disabled.focus,\n.btn-default[disabled].focus,\nfieldset[disabled] .btn-default.focus {\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default .badge {\n  color: #fff;\n  background-color: #333;\n}\n.btn-primary {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary:focus,\n.btn-primary.focus {\n  color: #fff;\n  background-color: #286090;\n  border-color: #122b40;\n}\n.btn-primary:hover {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active:hover,\n.btn-primary.active:hover,\n.open > .dropdown-toggle.btn-primary:hover,\n.btn-primary:active:focus,\n.btn-primary.active:focus,\n.open > .dropdown-toggle.btn-primary:focus,\n.btn-primary:active.focus,\n.btn-primary.active.focus,\n.open > .dropdown-toggle.btn-primary.focus {\n  color: #fff;\n  background-color: #204d74;\n  border-color: #122b40;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  background-image: none;\n}\n.btn-primary.disabled:hover,\n.btn-primary[disabled]:hover,\nfieldset[disabled] .btn-primary:hover,\n.btn-primary.disabled:focus,\n.btn-primary[disabled]:focus,\nfieldset[disabled] .btn-primary:focus,\n.btn-primary.disabled.focus,\n.btn-primary[disabled].focus,\nfieldset[disabled] .btn-primary.focus {\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.btn-success {\n  color: #fff;\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success:focus,\n.btn-success.focus {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #255625;\n}\n.btn-success:hover {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active:hover,\n.btn-success.active:hover,\n.open > .dropdown-toggle.btn-success:hover,\n.btn-success:active:focus,\n.btn-success.active:focus,\n.open > .dropdown-toggle.btn-success:focus,\n.btn-success:active.focus,\n.btn-success.active.focus,\n.open > .dropdown-toggle.btn-success.focus {\n  color: #fff;\n  background-color: #398439;\n  border-color: #255625;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  background-image: none;\n}\n.btn-success.disabled:hover,\n.btn-success[disabled]:hover,\nfieldset[disabled] .btn-success:hover,\n.btn-success.disabled:focus,\n.btn-success[disabled]:focus,\nfieldset[disabled] .btn-success:focus,\n.btn-success.disabled.focus,\n.btn-success[disabled].focus,\nfieldset[disabled] .btn-success.focus {\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success .badge {\n  color: #5cb85c;\n  background-color: #fff;\n}\n.btn-info {\n  color: #fff;\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info:focus,\n.btn-info.focus {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #1b6d85;\n}\n.btn-info:hover {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active:hover,\n.btn-info.active:hover,\n.open > .dropdown-toggle.btn-info:hover,\n.btn-info:active:focus,\n.btn-info.active:focus,\n.open > .dropdown-toggle.btn-info:focus,\n.btn-info:active.focus,\n.btn-info.active.focus,\n.open > .dropdown-toggle.btn-info.focus {\n  color: #fff;\n  background-color: #269abc;\n  border-color: #1b6d85;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  background-image: none;\n}\n.btn-info.disabled:hover,\n.btn-info[disabled]:hover,\nfieldset[disabled] .btn-info:hover,\n.btn-info.disabled:focus,\n.btn-info[disabled]:focus,\nfieldset[disabled] .btn-info:focus,\n.btn-info.disabled.focus,\n.btn-info[disabled].focus,\nfieldset[disabled] .btn-info.focus {\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info .badge {\n  color: #5bc0de;\n  background-color: #fff;\n}\n.btn-warning {\n  color: #fff;\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning:focus,\n.btn-warning.focus {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #985f0d;\n}\n.btn-warning:hover {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active:hover,\n.btn-warning.active:hover,\n.open > .dropdown-toggle.btn-warning:hover,\n.btn-warning:active:focus,\n.btn-warning.active:focus,\n.open > .dropdown-toggle.btn-warning:focus,\n.btn-warning:active.focus,\n.btn-warning.active.focus,\n.open > .dropdown-toggle.btn-warning.focus {\n  color: #fff;\n  background-color: #d58512;\n  border-color: #985f0d;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  background-image: none;\n}\n.btn-warning.disabled:hover,\n.btn-warning[disabled]:hover,\nfieldset[disabled] .btn-warning:hover,\n.btn-warning.disabled:focus,\n.btn-warning[disabled]:focus,\nfieldset[disabled] .btn-warning:focus,\n.btn-warning.disabled.focus,\n.btn-warning[disabled].focus,\nfieldset[disabled] .btn-warning.focus {\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning .badge {\n  color: #f0ad4e;\n  background-color: #fff;\n}\n.btn-danger {\n  color: #fff;\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger:focus,\n.btn-danger.focus {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #761c19;\n}\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active:hover,\n.btn-danger.active:hover,\n.open > .dropdown-toggle.btn-danger:hover,\n.btn-danger:active:focus,\n.btn-danger.active:focus,\n.open > .dropdown-toggle.btn-danger:focus,\n.btn-danger:active.focus,\n.btn-danger.active.focus,\n.open > .dropdown-toggle.btn-danger.focus {\n  color: #fff;\n  background-color: #ac2925;\n  border-color: #761c19;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  background-image: none;\n}\n.btn-danger.disabled:hover,\n.btn-danger[disabled]:hover,\nfieldset[disabled] .btn-danger:hover,\n.btn-danger.disabled:focus,\n.btn-danger[disabled]:focus,\nfieldset[disabled] .btn-danger:focus,\n.btn-danger.disabled.focus,\n.btn-danger[disabled].focus,\nfieldset[disabled] .btn-danger.focus {\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger .badge {\n  color: #d9534f;\n  background-color: #fff;\n}\n.btn-link {\n  font-weight: normal;\n  color: #337ab7;\n  border-radius: 0;\n}\n.btn-link,\n.btn-link:active,\n.btn-link.active,\n.btn-link[disabled],\nfieldset[disabled] .btn-link {\n  background-color: transparent;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n.btn-link,\n.btn-link:hover,\n.btn-link:focus,\n.btn-link:active {\n  border-color: transparent;\n}\n.btn-link:hover,\n.btn-link:focus {\n  color: #23527c;\n  text-decoration: underline;\n  background-color: transparent;\n}\n.btn-link[disabled]:hover,\nfieldset[disabled] .btn-link:hover,\n.btn-link[disabled]:focus,\nfieldset[disabled] .btn-link:focus {\n  color: #777;\n  text-decoration: none;\n}\n.btn-lg,\n.btn-group-lg > .btn {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.btn-sm,\n.btn-group-sm > .btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-xs,\n.btn-group-xs > .btn {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n.btn-block + .btn-block {\n  margin-top: 5px;\n}\ninput[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}\n.fade {\n  opacity: 0;\n  -webkit-transition: opacity .15s linear;\n       -o-transition: opacity .15s linear;\n          transition: opacity .15s linear;\n}\n.fade.in {\n  opacity: 1;\n}\n.collapse {\n  display: none;\n}\n.collapse.in {\n  display: block;\n}\ntr.collapse.in {\n  display: table-row;\n}\ntbody.collapse.in {\n  display: table-row-group;\n}\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  -webkit-transition-timing-function: ease;\n       -o-transition-timing-function: ease;\n          transition-timing-function: ease;\n  -webkit-transition-duration: .35s;\n       -o-transition-duration: .35s;\n          transition-duration: .35s;\n  -webkit-transition-property: height, visibility;\n       -o-transition-property: height, visibility;\n          transition-property: height, visibility;\n}\n.caret {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 2px;\n  vertical-align: middle;\n  border-top: 4px dashed;\n  border-top: 4px solid \\9;\n  border-right: 4px solid transparent;\n  border-left: 4px solid transparent;\n}\n.dropup,\n.dropdown {\n  position: relative;\n}\n.dropdown-toggle:focus {\n  outline: 0;\n}\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  font-size: 14px;\n  text-align: left;\n  list-style: none;\n  background-color: #fff;\n  -webkit-background-clip: padding-box;\n          background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, .15);\n  border-radius: 4px;\n  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n          box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n}\n.dropdown-menu.pull-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu .divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.dropdown-menu > li > a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #333;\n  white-space: nowrap;\n}\n.dropdown-menu > li > a:hover,\n.dropdown-menu > li > a:focus {\n  color: #262626;\n  text-decoration: none;\n  background-color: #f5f5f5;\n}\n.dropdown-menu > .active > a,\n.dropdown-menu > .active > a:hover,\n.dropdown-menu > .active > a:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #337ab7;\n  outline: 0;\n}\n.dropdown-menu > .disabled > a,\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  color: #777;\n}\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n  background-image: none;\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n}\n.open > .dropdown-menu {\n  display: block;\n}\n.open > a {\n  outline: 0;\n}\n.dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu-left {\n  right: auto;\n  left: 0;\n}\n.dropdown-header {\n  display: block;\n  padding: 3px 20px;\n  font-size: 12px;\n  line-height: 1.42857143;\n  color: #777;\n  white-space: nowrap;\n}\n.dropdown-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 990;\n}\n.pull-right > .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n.dropup .caret,\n.navbar-fixed-bottom .dropdown .caret {\n  content: \"\";\n  border-top: 0;\n  border-bottom: 4px dashed;\n  border-bottom: 4px solid \\9;\n}\n.dropup .dropdown-menu,\n.navbar-fixed-bottom .dropdown .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-bottom: 2px;\n}\n@media (min-width: 768px) {\n  .navbar-right .dropdown-menu {\n    right: 0;\n    left: auto;\n  }\n  .navbar-right .dropdown-menu-left {\n    right: auto;\n    left: 0;\n  }\n}\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  float: left;\n}\n.btn-group > .btn:hover,\n.btn-group-vertical > .btn:hover,\n.btn-group > .btn:focus,\n.btn-group-vertical > .btn:focus,\n.btn-group > .btn:active,\n.btn-group-vertical > .btn:active,\n.btn-group > .btn.active,\n.btn-group-vertical > .btn.active {\n  z-index: 2;\n}\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.btn-toolbar {\n  margin-left: -5px;\n}\n.btn-toolbar .btn,\n.btn-toolbar .btn-group,\n.btn-toolbar .input-group {\n  float: left;\n}\n.btn-toolbar > .btn,\n.btn-toolbar > .btn-group,\n.btn-toolbar > .input-group {\n  margin-left: 5px;\n}\n.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group > .btn:last-child:not(:first-child),\n.btn-group > .dropdown-toggle:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group > .btn-group {\n  float: left;\n}\n.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group .dropdown-toggle:active,\n.btn-group.open .dropdown-toggle {\n  outline: 0;\n}\n.btn-group > .btn + .dropdown-toggle {\n  padding-right: 8px;\n  padding-left: 8px;\n}\n.btn-group > .btn-lg + .dropdown-toggle {\n  padding-right: 12px;\n  padding-left: 12px;\n}\n.btn-group.open .dropdown-toggle {\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n}\n.btn-group.open .dropdown-toggle.btn-link {\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n.btn .caret {\n  margin-left: 0;\n}\n.btn-lg .caret {\n  border-width: 5px 5px 0;\n  border-bottom-width: 0;\n}\n.dropup .btn-lg .caret {\n  border-width: 0 5px 5px;\n}\n.btn-group-vertical > .btn,\n.btn-group-vertical > .btn-group,\n.btn-group-vertical > .btn-group > .btn {\n  display: block;\n  float: none;\n  width: 100%;\n  max-width: 100%;\n}\n.btn-group-vertical > .btn-group > .btn {\n  float: none;\n}\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n.btn-group-vertical > .btn:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn:first-child:not(:last-child) {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn:last-child:not(:first-child) {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group-justified {\n  display: table;\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: separate;\n}\n.btn-group-justified > .btn,\n.btn-group-justified > .btn-group {\n  display: table-cell;\n  float: none;\n  width: 1%;\n}\n.btn-group-justified > .btn-group .btn {\n  width: 100%;\n}\n.btn-group-justified > .btn-group .dropdown-menu {\n  left: auto;\n}\n[data-toggle=\"buttons\"] > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn input[type=\"checkbox\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"checkbox\"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.input-group[class*=\"col-\"] {\n  float: none;\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.input-group .form-control:focus {\n  z-index: 3;\n}\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-group-lg > .form-control,\nselect.input-group-lg > .input-group-addon,\nselect.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-group-lg > .form-control,\ntextarea.input-group-lg > .input-group-addon,\ntextarea.input-group-lg > .input-group-btn > .btn,\nselect[multiple].input-group-lg > .form-control,\nselect[multiple].input-group-lg > .input-group-addon,\nselect[multiple].input-group-lg > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-sm > .form-control,\n.input-group-sm > .input-group-addon,\n.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-group-sm > .form-control,\nselect.input-group-sm > .input-group-addon,\nselect.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-group-sm > .form-control,\ntextarea.input-group-sm > .input-group-addon,\ntextarea.input-group-sm > .input-group-btn > .btn,\nselect[multiple].input-group-sm > .form-control,\nselect[multiple].input-group-sm > .input-group-addon,\nselect[multiple].input-group-sm > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-addon,\n.input-group-btn,\n.input-group .form-control {\n  display: table-cell;\n}\n.input-group-addon:not(:first-child):not(:last-child),\n.input-group-btn:not(:first-child):not(:last-child),\n.input-group .form-control:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.input-group-addon,\n.input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n}\n.input-group-addon {\n  padding: 6px 12px;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1;\n  color: #555;\n  text-align: center;\n  background-color: #eee;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n.input-group-addon.input-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n.input-group-addon.input-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  border-radius: 6px;\n}\n.input-group-addon input[type=\"radio\"],\n.input-group-addon input[type=\"checkbox\"] {\n  margin-top: 0;\n}\n.input-group .form-control:first-child,\n.input-group-addon:first-child,\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group > .btn,\n.input-group-btn:first-child > .dropdown-toggle,\n.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.input-group-addon:first-child {\n  border-right: 0;\n}\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group > .btn,\n.input-group-btn:last-child > .dropdown-toggle,\n.input-group-btn:first-child > .btn:not(:first-child),\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.input-group-addon:last-child {\n  border-left: 0;\n}\n.input-group-btn {\n  position: relative;\n  font-size: 0;\n  white-space: nowrap;\n}\n.input-group-btn > .btn {\n  position: relative;\n}\n.input-group-btn > .btn + .btn {\n  margin-left: -1px;\n}\n.input-group-btn > .btn:hover,\n.input-group-btn > .btn:focus,\n.input-group-btn > .btn:active {\n  z-index: 2;\n}\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group {\n  margin-right: -1px;\n}\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group {\n  z-index: 2;\n  margin-left: -1px;\n}\n.nav {\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n.nav > li {\n  position: relative;\n  display: block;\n}\n.nav > li > a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n.nav > li > a:hover,\n.nav > li > a:focus {\n  text-decoration: none;\n  background-color: #eee;\n}\n.nav > li.disabled > a {\n  color: #777;\n}\n.nav > li.disabled > a:hover,\n.nav > li.disabled > a:focus {\n  color: #777;\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n}\n.nav .open > a,\n.nav .open > a:hover,\n.nav .open > a:focus {\n  background-color: #eee;\n  border-color: #337ab7;\n}\n.nav .nav-divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.nav > li > a > img {\n  max-width: none;\n}\n.nav-tabs {\n  border-bottom: 1px solid #ddd;\n}\n.nav-tabs > li {\n  float: left;\n  margin-bottom: -1px;\n}\n.nav-tabs > li > a {\n  margin-right: 2px;\n  line-height: 1.42857143;\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.nav-tabs > li > a:hover {\n  border-color: #eee #eee #ddd;\n}\n.nav-tabs > li.active > a,\n.nav-tabs > li.active > a:hover,\n.nav-tabs > li.active > a:focus {\n  color: #555;\n  cursor: default;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-bottom-color: transparent;\n}\n.nav-tabs.nav-justified {\n  width: 100%;\n  border-bottom: 0;\n}\n.nav-tabs.nav-justified > li {\n  float: none;\n}\n.nav-tabs.nav-justified > li > a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-tabs.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-tabs.nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs.nav-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs.nav-justified > .active > a,\n.nav-tabs.nav-justified > .active > a:hover,\n.nav-tabs.nav-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs.nav-justified > .active > a,\n  .nav-tabs.nav-justified > .active > a:hover,\n  .nav-tabs.nav-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.nav-pills > li {\n  float: left;\n}\n.nav-pills > li > a {\n  border-radius: 4px;\n}\n.nav-pills > li + li {\n  margin-left: 2px;\n}\n.nav-pills > li.active > a,\n.nav-pills > li.active > a:hover,\n.nav-pills > li.active > a:focus {\n  color: #fff;\n  background-color: #337ab7;\n}\n.nav-stacked > li {\n  float: none;\n}\n.nav-stacked > li + li {\n  margin-top: 2px;\n  margin-left: 0;\n}\n.nav-justified {\n  width: 100%;\n}\n.nav-justified > li {\n  float: none;\n}\n.nav-justified > li > a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs-justified {\n  border-bottom: 0;\n}\n.nav-tabs-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs-justified > .active > a,\n.nav-tabs-justified > .active > a:hover,\n.nav-tabs-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs-justified > .active > a,\n  .nav-tabs-justified > .active > a:hover,\n  .nav-tabs-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.tab-content > .tab-pane {\n  display: none;\n}\n.tab-content > .active {\n  display: block;\n}\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar {\n  position: relative;\n  min-height: 50px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n}\n@media (min-width: 768px) {\n  .navbar {\n    border-radius: 4px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-header {\n    float: left;\n  }\n}\n.navbar-collapse {\n  padding-right: 15px;\n  padding-left: 15px;\n  overflow-x: visible;\n  -webkit-overflow-scrolling: touch;\n  border-top: 1px solid transparent;\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);\n          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);\n}\n.navbar-collapse.in {\n  overflow-y: auto;\n}\n@media (min-width: 768px) {\n  .navbar-collapse {\n    width: auto;\n    border-top: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n  }\n  .navbar-collapse.collapse {\n    display: block !important;\n    height: auto !important;\n    padding-bottom: 0;\n    overflow: visible !important;\n  }\n  .navbar-collapse.in {\n    overflow-y: visible;\n  }\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-static-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n.navbar-fixed-top .navbar-collapse,\n.navbar-fixed-bottom .navbar-collapse {\n  max-height: 340px;\n}\n@media (max-device-width: 480px) and (orientation: landscape) {\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    max-height: 200px;\n  }\n}\n.container > .navbar-header,\n.container-fluid > .navbar-header,\n.container > .navbar-collapse,\n.container-fluid > .navbar-collapse {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .container > .navbar-header,\n  .container-fluid > .navbar-header,\n  .container > .navbar-collapse,\n  .container-fluid > .navbar-collapse {\n    margin-right: 0;\n    margin-left: 0;\n  }\n}\n.navbar-static-top {\n  z-index: 1000;\n  border-width: 0 0 1px;\n}\n@media (min-width: 768px) {\n  .navbar-static-top {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  position: fixed;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n@media (min-width: 768px) {\n  .navbar-fixed-top,\n  .navbar-fixed-bottom {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top {\n  top: 0;\n  border-width: 0 0 1px;\n}\n.navbar-fixed-bottom {\n  bottom: 0;\n  margin-bottom: 0;\n  border-width: 1px 0 0;\n}\n.navbar-brand {\n  float: left;\n  height: 50px;\n  padding: 15px 15px;\n  font-size: 18px;\n  line-height: 20px;\n}\n.navbar-brand:hover,\n.navbar-brand:focus {\n  text-decoration: none;\n}\n.navbar-brand > img {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar > .container .navbar-brand,\n  .navbar > .container-fluid .navbar-brand {\n    margin-left: -15px;\n  }\n}\n.navbar-toggle {\n  position: relative;\n  float: right;\n  padding: 9px 10px;\n  margin-top: 8px;\n  margin-right: 15px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.navbar-toggle:focus {\n  outline: 0;\n}\n.navbar-toggle .icon-bar {\n  display: block;\n  width: 22px;\n  height: 2px;\n  border-radius: 1px;\n}\n.navbar-toggle .icon-bar + .icon-bar {\n  margin-top: 4px;\n}\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n}\n.navbar-nav {\n  margin: 7.5px -15px;\n}\n.navbar-nav > li > a {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  line-height: 20px;\n}\n@media (max-width: 767px) {\n  .navbar-nav .open .dropdown-menu {\n    position: static;\n    float: none;\n    width: auto;\n    margin-top: 0;\n    background-color: transparent;\n    border: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n  }\n  .navbar-nav .open .dropdown-menu > li > a,\n  .navbar-nav .open .dropdown-menu .dropdown-header {\n    padding: 5px 15px 5px 25px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a {\n    line-height: 20px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-nav .open .dropdown-menu > li > a:focus {\n    background-image: none;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-nav {\n    float: left;\n    margin: 0;\n  }\n  .navbar-nav > li {\n    float: left;\n  }\n  .navbar-nav > li > a {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n}\n.navbar-form {\n  padding: 10px 15px;\n  margin-top: 8px;\n  margin-right: -15px;\n  margin-bottom: 8px;\n  margin-left: -15px;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);\n          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);\n}\n@media (min-width: 768px) {\n  .navbar-form .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control-static {\n    display: inline-block;\n  }\n  .navbar-form .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .navbar-form .input-group .input-group-addon,\n  .navbar-form .input-group .input-group-btn,\n  .navbar-form .input-group .form-control {\n    width: auto;\n  }\n  .navbar-form .input-group > .form-control {\n    width: 100%;\n  }\n  .navbar-form .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio,\n  .navbar-form .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio label,\n  .navbar-form .checkbox label {\n    padding-left: 0;\n  }\n  .navbar-form .radio input[type=\"radio\"],\n  .navbar-form .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .navbar-form .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n@media (max-width: 767px) {\n  .navbar-form .form-group {\n    margin-bottom: 5px;\n  }\n  .navbar-form .form-group:last-child {\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-form {\n    width: auto;\n    padding-top: 0;\n    padding-bottom: 0;\n    margin-right: 0;\n    margin-left: 0;\n    border: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n  }\n}\n.navbar-nav > li > .dropdown-menu {\n  margin-top: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {\n  margin-bottom: 0;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.navbar-btn {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.navbar-btn.btn-sm {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.navbar-btn.btn-xs {\n  margin-top: 14px;\n  margin-bottom: 14px;\n}\n.navbar-text {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n@media (min-width: 768px) {\n  .navbar-text {\n    float: left;\n    margin-right: 15px;\n    margin-left: 15px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-left {\n    float: left !important;\n  }\n  .navbar-right {\n    float: right !important;\n    margin-right: -15px;\n  }\n  .navbar-right ~ .navbar-right {\n    margin-right: 0;\n  }\n}\n.navbar-default {\n  background-color: #f8f8f8;\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-brand {\n  color: #777;\n}\n.navbar-default .navbar-brand:hover,\n.navbar-default .navbar-brand:focus {\n  color: #5e5e5e;\n  background-color: transparent;\n}\n.navbar-default .navbar-text {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a:hover,\n.navbar-default .navbar-nav > li > a:focus {\n  color: #333;\n  background-color: transparent;\n}\n.navbar-default .navbar-nav > .active > a,\n.navbar-default .navbar-nav > .active > a:hover,\n.navbar-default .navbar-nav > .active > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .disabled > a,\n.navbar-default .navbar-nav > .disabled > a:hover,\n.navbar-default .navbar-nav > .disabled > a:focus {\n  color: #ccc;\n  background-color: transparent;\n}\n.navbar-default .navbar-toggle {\n  border-color: #ddd;\n}\n.navbar-default .navbar-toggle:hover,\n.navbar-default .navbar-toggle:focus {\n  background-color: #ddd;\n}\n.navbar-default .navbar-toggle .icon-bar {\n  background-color: #888;\n}\n.navbar-default .navbar-collapse,\n.navbar-default .navbar-form {\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .open > a,\n.navbar-default .navbar-nav > .open > a:hover,\n.navbar-default .navbar-nav > .open > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n@media (max-width: 767px) {\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a {\n    color: #777;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #333;\n    background-color: transparent;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #555;\n    background-color: #e7e7e7;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #ccc;\n    background-color: transparent;\n  }\n}\n.navbar-default .navbar-link {\n  color: #777;\n}\n.navbar-default .navbar-link:hover {\n  color: #333;\n}\n.navbar-default .btn-link {\n  color: #777;\n}\n.navbar-default .btn-link:hover,\n.navbar-default .btn-link:focus {\n  color: #333;\n}\n.navbar-default .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-default .btn-link:hover,\n.navbar-default .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-default .btn-link:focus {\n  color: #ccc;\n}\n.navbar-inverse {\n  background-color: #222;\n  border-color: #080808;\n}\n.navbar-inverse .navbar-brand {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-brand:hover,\n.navbar-inverse .navbar-brand:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-text {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a:hover,\n.navbar-inverse .navbar-nav > li > a:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-nav > .active > a,\n.navbar-inverse .navbar-nav > .active > a:hover,\n.navbar-inverse .navbar-nav > .active > a:focus {\n  color: #fff;\n  background-color: #080808;\n}\n.navbar-inverse .navbar-nav > .disabled > a,\n.navbar-inverse .navbar-nav > .disabled > a:hover,\n.navbar-inverse .navbar-nav > .disabled > a:focus {\n  color: #444;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-toggle {\n  border-color: #333;\n}\n.navbar-inverse .navbar-toggle:hover,\n.navbar-inverse .navbar-toggle:focus {\n  background-color: #333;\n}\n.navbar-inverse .navbar-toggle .icon-bar {\n  background-color: #fff;\n}\n.navbar-inverse .navbar-collapse,\n.navbar-inverse .navbar-form {\n  border-color: #101010;\n}\n.navbar-inverse .navbar-nav > .open > a,\n.navbar-inverse .navbar-nav > .open > a:hover,\n.navbar-inverse .navbar-nav > .open > a:focus {\n  color: #fff;\n  background-color: #080808;\n}\n@media (max-width: 767px) {\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {\n    border-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {\n    color: #9d9d9d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #fff;\n    background-color: transparent;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #fff;\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #444;\n    background-color: transparent;\n  }\n}\n.navbar-inverse .navbar-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-link:hover {\n  color: #fff;\n}\n.navbar-inverse .btn-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link:focus {\n  color: #fff;\n}\n.navbar-inverse .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-inverse .btn-link:focus {\n  color: #444;\n}\n.breadcrumb {\n  padding: 8px 15px;\n  margin-bottom: 20px;\n  list-style: none;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n.breadcrumb > li {\n  display: inline-block;\n}\n.breadcrumb > li + li:before {\n  padding: 0 5px;\n  color: #ccc;\n  content: \"/\\A0\";\n}\n.breadcrumb > .active {\n  color: #777;\n}\n.pagination {\n  display: inline-block;\n  padding-left: 0;\n  margin: 20px 0;\n  border-radius: 4px;\n}\n.pagination > li {\n  display: inline;\n}\n.pagination > li > a,\n.pagination > li > span {\n  position: relative;\n  float: left;\n  padding: 6px 12px;\n  margin-left: -1px;\n  line-height: 1.42857143;\n  color: #337ab7;\n  text-decoration: none;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n.pagination > li:first-child > a,\n.pagination > li:first-child > span {\n  margin-left: 0;\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.pagination > li:last-child > a,\n.pagination > li:last-child > span {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.pagination > li > a:hover,\n.pagination > li > span:hover,\n.pagination > li > a:focus,\n.pagination > li > span:focus {\n  z-index: 2;\n  color: #23527c;\n  background-color: #eee;\n  border-color: #ddd;\n}\n.pagination > .active > a,\n.pagination > .active > span,\n.pagination > .active > a:hover,\n.pagination > .active > span:hover,\n.pagination > .active > a:focus,\n.pagination > .active > span:focus {\n  z-index: 3;\n  color: #fff;\n  cursor: default;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.pagination > .disabled > span,\n.pagination > .disabled > span:hover,\n.pagination > .disabled > span:focus,\n.pagination > .disabled > a,\n.pagination > .disabled > a:hover,\n.pagination > .disabled > a:focus {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #fff;\n  border-color: #ddd;\n}\n.pagination-lg > li > a,\n.pagination-lg > li > span {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.pagination-lg > li:first-child > a,\n.pagination-lg > li:first-child > span {\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.pagination-lg > li:last-child > a,\n.pagination-lg > li:last-child > span {\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.pagination-sm > li > a,\n.pagination-sm > li > span {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.pagination-sm > li:first-child > a,\n.pagination-sm > li:first-child > span {\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.pagination-sm > li:last-child > a,\n.pagination-sm > li:last-child > span {\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n.pager {\n  padding-left: 0;\n  margin: 20px 0;\n  text-align: center;\n  list-style: none;\n}\n.pager li {\n  display: inline;\n}\n.pager li > a,\n.pager li > span {\n  display: inline-block;\n  padding: 5px 14px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 15px;\n}\n.pager li > a:hover,\n.pager li > a:focus {\n  text-decoration: none;\n  background-color: #eee;\n}\n.pager .next > a,\n.pager .next > span {\n  float: right;\n}\n.pager .previous > a,\n.pager .previous > span {\n  float: left;\n}\n.pager .disabled > a,\n.pager .disabled > a:hover,\n.pager .disabled > a:focus,\n.pager .disabled > span {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #fff;\n}\n.label {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75%;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n}\na.label:hover,\na.label:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.label:empty {\n  display: none;\n}\n.btn .label {\n  position: relative;\n  top: -1px;\n}\n.label-default {\n  background-color: #777;\n}\n.label-default[href]:hover,\n.label-default[href]:focus {\n  background-color: #5e5e5e;\n}\n.label-primary {\n  background-color: #337ab7;\n}\n.label-primary[href]:hover,\n.label-primary[href]:focus {\n  background-color: #286090;\n}\n.label-success {\n  background-color: #5cb85c;\n}\n.label-success[href]:hover,\n.label-success[href]:focus {\n  background-color: #449d44;\n}\n.label-info {\n  background-color: #5bc0de;\n}\n.label-info[href]:hover,\n.label-info[href]:focus {\n  background-color: #31b0d5;\n}\n.label-warning {\n  background-color: #f0ad4e;\n}\n.label-warning[href]:hover,\n.label-warning[href]:focus {\n  background-color: #ec971f;\n}\n.label-danger {\n  background-color: #d9534f;\n}\n.label-danger[href]:hover,\n.label-danger[href]:focus {\n  background-color: #c9302c;\n}\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  background-color: #777;\n  border-radius: 10px;\n}\n.badge:empty {\n  display: none;\n}\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n.btn-xs .badge,\n.btn-group-xs > .btn .badge {\n  top: 0;\n  padding: 1px 5px;\n}\na.badge:hover,\na.badge:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group-item.active > .badge,\n.nav-pills > .active > a > .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.list-group-item > .badge {\n  float: right;\n}\n.list-group-item > .badge + .badge {\n  margin-right: 5px;\n}\n.nav-pills > li > a > .badge {\n  margin-left: 3px;\n}\n.jumbotron {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  margin-bottom: 30px;\n  color: inherit;\n  background-color: #eee;\n}\n.jumbotron h1,\n.jumbotron .h1 {\n  color: inherit;\n}\n.jumbotron p {\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-weight: 200;\n}\n.jumbotron > hr {\n  border-top-color: #d5d5d5;\n}\n.container .jumbotron,\n.container-fluid .jumbotron {\n  padding-right: 15px;\n  padding-left: 15px;\n  border-radius: 6px;\n}\n.jumbotron .container {\n  max-width: 100%;\n}\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron,\n  .container-fluid .jumbotron {\n    padding-right: 60px;\n    padding-left: 60px;\n  }\n  .jumbotron h1,\n  .jumbotron .h1 {\n    font-size: 63px;\n  }\n}\n.thumbnail {\n  display: block;\n  padding: 4px;\n  margin-bottom: 20px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: border .2s ease-in-out;\n       -o-transition: border .2s ease-in-out;\n          transition: border .2s ease-in-out;\n}\n.thumbnail > img,\n.thumbnail a > img {\n  margin-right: auto;\n  margin-left: auto;\n}\na.thumbnail:hover,\na.thumbnail:focus,\na.thumbnail.active {\n  border-color: #337ab7;\n}\n.thumbnail .caption {\n  padding: 9px;\n  color: #333;\n}\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.alert h4 {\n  margin-top: 0;\n  color: inherit;\n}\n.alert .alert-link {\n  font-weight: bold;\n}\n.alert > p,\n.alert > ul {\n  margin-bottom: 0;\n}\n.alert > p + p {\n  margin-top: 5px;\n}\n.alert-dismissable,\n.alert-dismissible {\n  padding-right: 35px;\n}\n.alert-dismissable .close,\n.alert-dismissible .close {\n  position: relative;\n  top: -2px;\n  right: -21px;\n  color: inherit;\n}\n.alert-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.alert-success hr {\n  border-top-color: #c9e2b3;\n}\n.alert-success .alert-link {\n  color: #2b542c;\n}\n.alert-info {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.alert-info hr {\n  border-top-color: #a6e1ec;\n}\n.alert-info .alert-link {\n  color: #245269;\n}\n.alert-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.alert-warning hr {\n  border-top-color: #f7e1b5;\n}\n.alert-warning .alert-link {\n  color: #66512c;\n}\n.alert-danger {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.alert-danger hr {\n  border-top-color: #e4b9c0;\n}\n.alert-danger .alert-link {\n  color: #843534;\n}\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@-o-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n.progress {\n  height: 20px;\n  margin-bottom: 20px;\n  overflow: hidden;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);\n          box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);\n}\n.progress-bar {\n  float: left;\n  width: 0;\n  height: 100%;\n  font-size: 12px;\n  line-height: 20px;\n  color: #fff;\n  text-align: center;\n  background-color: #337ab7;\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);\n          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);\n  -webkit-transition: width .6s ease;\n       -o-transition: width .6s ease;\n          transition: width .6s ease;\n}\n.progress-striped .progress-bar,\n.progress-bar-striped {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  -webkit-background-size: 40px 40px;\n          background-size: 40px 40px;\n}\n.progress.active .progress-bar,\n.progress-bar.active {\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\n       -o-animation: progress-bar-stripes 2s linear infinite;\n          animation: progress-bar-stripes 2s linear infinite;\n}\n.progress-bar-success {\n  background-color: #5cb85c;\n}\n.progress-striped .progress-bar-success {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-info {\n  background-color: #5bc0de;\n}\n.progress-striped .progress-bar-info {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-warning {\n  background-color: #f0ad4e;\n}\n.progress-striped .progress-bar-warning {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-danger {\n  background-color: #d9534f;\n}\n.progress-striped .progress-bar-danger {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.media {\n  margin-top: 15px;\n}\n.media:first-child {\n  margin-top: 0;\n}\n.media,\n.media-body {\n  overflow: hidden;\n  zoom: 1;\n}\n.media-body {\n  width: 10000px;\n}\n.media-object {\n  display: block;\n}\n.media-object.img-thumbnail {\n  max-width: none;\n}\n.media-right,\n.media > .pull-right {\n  padding-left: 10px;\n}\n.media-left,\n.media > .pull-left {\n  padding-right: 10px;\n}\n.media-left,\n.media-right,\n.media-body {\n  display: table-cell;\n  vertical-align: top;\n}\n.media-middle {\n  vertical-align: middle;\n}\n.media-bottom {\n  vertical-align: bottom;\n}\n.media-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.media-list {\n  padding-left: 0;\n  list-style: none;\n}\n.list-group {\n  padding-left: 0;\n  margin-bottom: 20px;\n}\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n.list-group-item:first-child {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\na.list-group-item,\nbutton.list-group-item {\n  color: #555;\n}\na.list-group-item .list-group-item-heading,\nbutton.list-group-item .list-group-item-heading {\n  color: #333;\n}\na.list-group-item:hover,\nbutton.list-group-item:hover,\na.list-group-item:focus,\nbutton.list-group-item:focus {\n  color: #555;\n  text-decoration: none;\n  background-color: #f5f5f5;\n}\nbutton.list-group-item {\n  width: 100%;\n  text-align: left;\n}\n.list-group-item.disabled,\n.list-group-item.disabled:hover,\n.list-group-item.disabled:focus {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #eee;\n}\n.list-group-item.disabled .list-group-item-heading,\n.list-group-item.disabled:hover .list-group-item-heading,\n.list-group-item.disabled:focus .list-group-item-heading {\n  color: inherit;\n}\n.list-group-item.disabled .list-group-item-text,\n.list-group-item.disabled:hover .list-group-item-text,\n.list-group-item.disabled:focus .list-group-item-text {\n  color: #777;\n}\n.list-group-item.active,\n.list-group-item.active:hover,\n.list-group-item.active:focus {\n  z-index: 2;\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.list-group-item.active .list-group-item-heading,\n.list-group-item.active:hover .list-group-item-heading,\n.list-group-item.active:focus .list-group-item-heading,\n.list-group-item.active .list-group-item-heading > small,\n.list-group-item.active:hover .list-group-item-heading > small,\n.list-group-item.active:focus .list-group-item-heading > small,\n.list-group-item.active .list-group-item-heading > .small,\n.list-group-item.active:hover .list-group-item-heading > .small,\n.list-group-item.active:focus .list-group-item-heading > .small {\n  color: inherit;\n}\n.list-group-item.active .list-group-item-text,\n.list-group-item.active:hover .list-group-item-text,\n.list-group-item.active:focus .list-group-item-text {\n  color: #c7ddef;\n}\n.list-group-item-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n}\na.list-group-item-success,\nbutton.list-group-item-success {\n  color: #3c763d;\n}\na.list-group-item-success .list-group-item-heading,\nbutton.list-group-item-success .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-success:hover,\nbutton.list-group-item-success:hover,\na.list-group-item-success:focus,\nbutton.list-group-item-success:focus {\n  color: #3c763d;\n  background-color: #d0e9c6;\n}\na.list-group-item-success.active,\nbutton.list-group-item-success.active,\na.list-group-item-success.active:hover,\nbutton.list-group-item-success.active:hover,\na.list-group-item-success.active:focus,\nbutton.list-group-item-success.active:focus {\n  color: #fff;\n  background-color: #3c763d;\n  border-color: #3c763d;\n}\n.list-group-item-info {\n  color: #31708f;\n  background-color: #d9edf7;\n}\na.list-group-item-info,\nbutton.list-group-item-info {\n  color: #31708f;\n}\na.list-group-item-info .list-group-item-heading,\nbutton.list-group-item-info .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-info:hover,\nbutton.list-group-item-info:hover,\na.list-group-item-info:focus,\nbutton.list-group-item-info:focus {\n  color: #31708f;\n  background-color: #c4e3f3;\n}\na.list-group-item-info.active,\nbutton.list-group-item-info.active,\na.list-group-item-info.active:hover,\nbutton.list-group-item-info.active:hover,\na.list-group-item-info.active:focus,\nbutton.list-group-item-info.active:focus {\n  color: #fff;\n  background-color: #31708f;\n  border-color: #31708f;\n}\n.list-group-item-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n}\na.list-group-item-warning,\nbutton.list-group-item-warning {\n  color: #8a6d3b;\n}\na.list-group-item-warning .list-group-item-heading,\nbutton.list-group-item-warning .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-warning:hover,\nbutton.list-group-item-warning:hover,\na.list-group-item-warning:focus,\nbutton.list-group-item-warning:focus {\n  color: #8a6d3b;\n  background-color: #faf2cc;\n}\na.list-group-item-warning.active,\nbutton.list-group-item-warning.active,\na.list-group-item-warning.active:hover,\nbutton.list-group-item-warning.active:hover,\na.list-group-item-warning.active:focus,\nbutton.list-group-item-warning.active:focus {\n  color: #fff;\n  background-color: #8a6d3b;\n  border-color: #8a6d3b;\n}\n.list-group-item-danger {\n  color: #a94442;\n  background-color: #f2dede;\n}\na.list-group-item-danger,\nbutton.list-group-item-danger {\n  color: #a94442;\n}\na.list-group-item-danger .list-group-item-heading,\nbutton.list-group-item-danger .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-danger:hover,\nbutton.list-group-item-danger:hover,\na.list-group-item-danger:focus,\nbutton.list-group-item-danger:focus {\n  color: #a94442;\n  background-color: #ebcccc;\n}\na.list-group-item-danger.active,\nbutton.list-group-item-danger.active,\na.list-group-item-danger.active:hover,\nbutton.list-group-item-danger.active:hover,\na.list-group-item-danger.active:focus,\nbutton.list-group-item-danger.active:focus {\n  color: #fff;\n  background-color: #a94442;\n  border-color: #a94442;\n}\n.list-group-item-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.list-group-item-text {\n  margin-bottom: 0;\n  line-height: 1.3;\n}\n.panel {\n  margin-bottom: 20px;\n  background-color: #fff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n          box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n}\n.panel-body {\n  padding: 15px;\n}\n.panel-heading {\n  padding: 10px 15px;\n  border-bottom: 1px solid transparent;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel-heading > .dropdown .dropdown-toggle {\n  color: inherit;\n}\n.panel-title {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 16px;\n  color: inherit;\n}\n.panel-title > a,\n.panel-title > small,\n.panel-title > .small,\n.panel-title > small > a,\n.panel-title > .small > a {\n  color: inherit;\n}\n.panel-footer {\n  padding: 10px 15px;\n  background-color: #f5f5f5;\n  border-top: 1px solid #ddd;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .list-group,\n.panel > .panel-collapse > .list-group {\n  margin-bottom: 0;\n}\n.panel > .list-group .list-group-item,\n.panel > .panel-collapse > .list-group .list-group-item {\n  border-width: 1px 0;\n  border-radius: 0;\n}\n.panel > .list-group:first-child .list-group-item:first-child,\n.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {\n  border-top: 0;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .list-group:last-child .list-group-item:last-child,\n.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {\n  border-bottom: 0;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.panel-heading + .list-group .list-group-item:first-child {\n  border-top-width: 0;\n}\n.list-group + .panel-footer {\n  border-top-width: 0;\n}\n.panel > .table,\n.panel > .table-responsive > .table,\n.panel > .panel-collapse > .table {\n  margin-bottom: 0;\n}\n.panel > .table caption,\n.panel > .table-responsive > .table caption,\n.panel > .panel-collapse > .table caption {\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.panel > .table:first-child,\n.panel > .table-responsive:first-child > .table:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {\n  border-top-left-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {\n  border-top-right-radius: 3px;\n}\n.panel > .table:last-child,\n.panel > .table-responsive:last-child > .table:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {\n  border-bottom-right-radius: 3px;\n}\n.panel > .panel-body + .table,\n.panel > .panel-body + .table-responsive,\n.panel > .table + .panel-body,\n.panel > .table-responsive + .panel-body {\n  border-top: 1px solid #ddd;\n}\n.panel > .table > tbody:first-child > tr:first-child th,\n.panel > .table > tbody:first-child > tr:first-child td {\n  border-top: 0;\n}\n.panel > .table-bordered,\n.panel > .table-responsive > .table-bordered {\n  border: 0;\n}\n.panel > .table-bordered > thead > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,\n.panel > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-bordered > thead > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,\n.panel > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-bordered > tfoot > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n  border-left: 0;\n}\n.panel > .table-bordered > thead > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,\n.panel > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-bordered > thead > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,\n.panel > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-bordered > tfoot > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n  border-right: 0;\n}\n.panel > .table-bordered > thead > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,\n.panel > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-bordered > thead > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,\n.panel > .table-bordered > tbody > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {\n  border-bottom: 0;\n}\n.panel > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-bordered > tfoot > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {\n  border-bottom: 0;\n}\n.panel > .table-responsive {\n  margin-bottom: 0;\n  border: 0;\n}\n.panel-group {\n  margin-bottom: 20px;\n}\n.panel-group .panel {\n  margin-bottom: 0;\n  border-radius: 4px;\n}\n.panel-group .panel + .panel {\n  margin-top: 5px;\n}\n.panel-group .panel-heading {\n  border-bottom: 0;\n}\n.panel-group .panel-heading + .panel-collapse > .panel-body,\n.panel-group .panel-heading + .panel-collapse > .list-group {\n  border-top: 1px solid #ddd;\n}\n.panel-group .panel-footer {\n  border-top: 0;\n}\n.panel-group .panel-footer + .panel-collapse .panel-body {\n  border-bottom: 1px solid #ddd;\n}\n.panel-default {\n  border-color: #ddd;\n}\n.panel-default > .panel-heading {\n  color: #333;\n  background-color: #f5f5f5;\n  border-color: #ddd;\n}\n.panel-default > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ddd;\n}\n.panel-default > .panel-heading .badge {\n  color: #f5f5f5;\n  background-color: #333;\n}\n.panel-default > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ddd;\n}\n.panel-primary {\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #337ab7;\n}\n.panel-primary > .panel-heading .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.panel-primary > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #337ab7;\n}\n.panel-success {\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #d6e9c6;\n}\n.panel-success > .panel-heading .badge {\n  color: #dff0d8;\n  background-color: #3c763d;\n}\n.panel-success > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #d6e9c6;\n}\n.panel-info {\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #bce8f1;\n}\n.panel-info > .panel-heading .badge {\n  color: #d9edf7;\n  background-color: #31708f;\n}\n.panel-info > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #bce8f1;\n}\n.panel-warning {\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #faebcc;\n}\n.panel-warning > .panel-heading .badge {\n  color: #fcf8e3;\n  background-color: #8a6d3b;\n}\n.panel-warning > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #faebcc;\n}\n.panel-danger {\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ebccd1;\n}\n.panel-danger > .panel-heading .badge {\n  color: #f2dede;\n  background-color: #a94442;\n}\n.panel-danger > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ebccd1;\n}\n.embed-responsive {\n  position: relative;\n  display: block;\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n}\n.embed-responsive .embed-responsive-item,\n.embed-responsive iframe,\n.embed-responsive embed,\n.embed-responsive object,\n.embed-responsive video {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n.embed-responsive-16by9 {\n  padding-bottom: 56.25%;\n}\n.embed-responsive-4by3 {\n  padding-bottom: 75%;\n}\n.well {\n  min-height: 20px;\n  padding: 19px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #e3e3e3;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);\n}\n.well blockquote {\n  border-color: #ddd;\n  border-color: rgba(0, 0, 0, .15);\n}\n.well-lg {\n  padding: 24px;\n  border-radius: 6px;\n}\n.well-sm {\n  padding: 9px;\n  border-radius: 3px;\n}\n.close {\n  float: right;\n  font-size: 21px;\n  font-weight: bold;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  filter: alpha(opacity=20);\n  opacity: .2;\n}\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\nbutton.close {\n  -webkit-appearance: none;\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n}\n.modal-open {\n  overflow: hidden;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  overflow: hidden;\n  -webkit-overflow-scrolling: touch;\n  outline: 0;\n}\n.modal.fade .modal-dialog {\n  -webkit-transition: -webkit-transform .3s ease-out;\n       -o-transition:      -o-transform .3s ease-out;\n          transition:         transform .3s ease-out;\n  -webkit-transform: translate(0, -25%);\n      -ms-transform: translate(0, -25%);\n       -o-transform: translate(0, -25%);\n          transform: translate(0, -25%);\n}\n.modal.in .modal-dialog {\n  -webkit-transform: translate(0, 0);\n      -ms-transform: translate(0, 0);\n       -o-transform: translate(0, 0);\n          transform: translate(0, 0);\n}\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 10px;\n}\n.modal-content {\n  position: relative;\n  background-color: #fff;\n  -webkit-background-clip: padding-box;\n          background-clip: padding-box;\n  border: 1px solid #999;\n  border: 1px solid rgba(0, 0, 0, .2);\n  border-radius: 6px;\n  outline: 0;\n  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\n          box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\n}\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n.modal-backdrop.fade {\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n.modal-backdrop.in {\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\n.modal-header {\n  padding: 15px;\n  border-bottom: 1px solid #e5e5e5;\n}\n.modal-header .close {\n  margin-top: -2px;\n}\n.modal-title {\n  margin: 0;\n  line-height: 1.42857143;\n}\n.modal-body {\n  position: relative;\n  padding: 15px;\n}\n.modal-footer {\n  padding: 15px;\n  text-align: right;\n  border-top: 1px solid #e5e5e5;\n}\n.modal-footer .btn + .btn {\n  margin-bottom: 0;\n  margin-left: 5px;\n}\n.modal-footer .btn-group .btn + .btn {\n  margin-left: -1px;\n}\n.modal-footer .btn-block + .btn-block {\n  margin-left: 0;\n}\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\n            box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  filter: alpha(opacity=0);\n  opacity: 0;\n\n  line-break: auto;\n}\n.tooltip.in {\n  filter: alpha(opacity=90);\n  opacity: .9;\n}\n.tooltip.top {\n  padding: 5px 0;\n  margin-top: -3px;\n}\n.tooltip.right {\n  padding: 0 5px;\n  margin-left: 3px;\n}\n.tooltip.bottom {\n  padding: 5px 0;\n  margin-top: 3px;\n}\n.tooltip.left {\n  padding: 0 5px;\n  margin-left: -3px;\n}\n.tooltip-inner {\n  max-width: 200px;\n  padding: 3px 8px;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 4px;\n}\n.tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.tooltip.top .tooltip-arrow {\n  bottom: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-left .tooltip-arrow {\n  right: 5px;\n  bottom: 0;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-right .tooltip-arrow {\n  bottom: 0;\n  left: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.right .tooltip-arrow {\n  top: 50%;\n  left: 0;\n  margin-top: -5px;\n  border-width: 5px 5px 5px 0;\n  border-right-color: #000;\n}\n.tooltip.left .tooltip-arrow {\n  top: 50%;\n  right: 0;\n  margin-top: -5px;\n  border-width: 5px 0 5px 5px;\n  border-left-color: #000;\n}\n.tooltip.bottom .tooltip-arrow {\n  top: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-left .tooltip-arrow {\n  top: 0;\n  right: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-right .tooltip-arrow {\n  top: 0;\n  left: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: none;\n  max-width: 276px;\n  padding: 1px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  background-color: #fff;\n  -webkit-background-clip: padding-box;\n          background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, .2);\n  border-radius: 6px;\n  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\n          box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\n\n  line-break: auto;\n}\n.popover.top {\n  margin-top: -10px;\n}\n.popover.right {\n  margin-left: 10px;\n}\n.popover.bottom {\n  margin-top: 10px;\n}\n.popover.left {\n  margin-left: -10px;\n}\n.popover-title {\n  padding: 8px 14px;\n  margin: 0;\n  font-size: 14px;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-radius: 5px 5px 0 0;\n}\n.popover-content {\n  padding: 9px 14px;\n}\n.popover > .arrow,\n.popover > .arrow:after {\n  position: absolute;\n  display: block;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.popover > .arrow {\n  border-width: 11px;\n}\n.popover > .arrow:after {\n  content: \"\";\n  border-width: 10px;\n}\n.popover.top > .arrow {\n  bottom: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-color: #999;\n  border-top-color: rgba(0, 0, 0, .25);\n  border-bottom-width: 0;\n}\n.popover.top > .arrow:after {\n  bottom: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-color: #fff;\n  border-bottom-width: 0;\n}\n.popover.right > .arrow {\n  top: 50%;\n  left: -11px;\n  margin-top: -11px;\n  border-right-color: #999;\n  border-right-color: rgba(0, 0, 0, .25);\n  border-left-width: 0;\n}\n.popover.right > .arrow:after {\n  bottom: -10px;\n  left: 1px;\n  content: \" \";\n  border-right-color: #fff;\n  border-left-width: 0;\n}\n.popover.bottom > .arrow {\n  top: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-width: 0;\n  border-bottom-color: #999;\n  border-bottom-color: rgba(0, 0, 0, .25);\n}\n.popover.bottom > .arrow:after {\n  top: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-width: 0;\n  border-bottom-color: #fff;\n}\n.popover.left > .arrow {\n  top: 50%;\n  right: -11px;\n  margin-top: -11px;\n  border-right-width: 0;\n  border-left-color: #999;\n  border-left-color: rgba(0, 0, 0, .25);\n}\n.popover.left > .arrow:after {\n  right: 1px;\n  bottom: -10px;\n  content: \" \";\n  border-right-width: 0;\n  border-left-color: #fff;\n}\n.carousel {\n  position: relative;\n}\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n.carousel-inner > .item {\n  position: relative;\n  display: none;\n  -webkit-transition: .6s ease-in-out left;\n       -o-transition: .6s ease-in-out left;\n          transition: .6s ease-in-out left;\n}\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  line-height: 1;\n}\n@media all and (transform-3d), (-webkit-transform-3d) {\n  .carousel-inner > .item {\n    -webkit-transition: -webkit-transform .6s ease-in-out;\n         -o-transition:      -o-transform .6s ease-in-out;\n            transition:         transform .6s ease-in-out;\n\n    -webkit-backface-visibility: hidden;\n            backface-visibility: hidden;\n    -webkit-perspective: 1000px;\n            perspective: 1000px;\n  }\n  .carousel-inner > .item.next,\n  .carousel-inner > .item.active.right {\n    left: 0;\n    -webkit-transform: translate3d(100%, 0, 0);\n            transform: translate3d(100%, 0, 0);\n  }\n  .carousel-inner > .item.prev,\n  .carousel-inner > .item.active.left {\n    left: 0;\n    -webkit-transform: translate3d(-100%, 0, 0);\n            transform: translate3d(-100%, 0, 0);\n  }\n  .carousel-inner > .item.next.left,\n  .carousel-inner > .item.prev.right,\n  .carousel-inner > .item.active {\n    left: 0;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n.carousel-inner > .active,\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  display: block;\n}\n.carousel-inner > .active {\n  left: 0;\n}\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.carousel-inner > .next {\n  left: 100%;\n}\n.carousel-inner > .prev {\n  left: -100%;\n}\n.carousel-inner > .next.left,\n.carousel-inner > .prev.right {\n  left: 0;\n}\n.carousel-inner > .active.left {\n  left: -100%;\n}\n.carousel-inner > .active.right {\n  left: 100%;\n}\n.carousel-control {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 15%;\n  font-size: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\n  background-color: rgba(0, 0, 0, 0);\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\n.carousel-control.left {\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .5)), to(rgba(0, 0, 0, .0001)));\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control.right {\n  right: 0;\n  left: auto;\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .0001)), to(rgba(0, 0, 0, .5)));\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control:hover,\n.carousel-control:focus {\n  color: #fff;\n  text-decoration: none;\n  filter: alpha(opacity=90);\n  outline: 0;\n  opacity: .9;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-left,\n.carousel-control .glyphicon-chevron-right {\n  position: absolute;\n  top: 50%;\n  z-index: 5;\n  display: inline-block;\n  margin-top: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .glyphicon-chevron-left {\n  left: 50%;\n  margin-left: -10px;\n}\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-right {\n  right: 50%;\n  margin-right: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next {\n  width: 20px;\n  height: 20px;\n  font-family: serif;\n  line-height: 1;\n}\n.carousel-control .icon-prev:before {\n  content: '\\2039';\n}\n.carousel-control .icon-next:before {\n  content: '\\203A';\n}\n.carousel-indicators {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  z-index: 15;\n  width: 60%;\n  padding-left: 0;\n  margin-left: -30%;\n  text-align: center;\n  list-style: none;\n}\n.carousel-indicators li {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 1px;\n  text-indent: -999px;\n  cursor: pointer;\n  background-color: #000 \\9;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid #fff;\n  border-radius: 10px;\n}\n.carousel-indicators .active {\n  width: 12px;\n  height: 12px;\n  margin: 0;\n  background-color: #fff;\n}\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\n}\n.carousel-caption .btn {\n  text-shadow: none;\n}\n@media screen and (min-width: 768px) {\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-prev,\n  .carousel-control .icon-next {\n    width: 30px;\n    height: 30px;\n    margin-top: -10px;\n    font-size: 30px;\n  }\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .icon-prev {\n    margin-left: -10px;\n  }\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-next {\n    margin-right: -10px;\n  }\n  .carousel-caption {\n    right: 20%;\n    left: 20%;\n    padding-bottom: 30px;\n  }\n  .carousel-indicators {\n    bottom: 20px;\n  }\n}\n.clearfix:before,\n.clearfix:after,\n.dl-horizontal dd:before,\n.dl-horizontal dd:after,\n.container:before,\n.container:after,\n.container-fluid:before,\n.container-fluid:after,\n.row:before,\n.row:after,\n.form-horizontal .form-group:before,\n.form-horizontal .form-group:after,\n.btn-toolbar:before,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:before,\n.btn-group-vertical > .btn-group:after,\n.nav:before,\n.nav:after,\n.navbar:before,\n.navbar:after,\n.navbar-header:before,\n.navbar-header:after,\n.navbar-collapse:before,\n.navbar-collapse:after,\n.pager:before,\n.pager:after,\n.panel-body:before,\n.panel-body:after,\n.modal-header:before,\n.modal-header:after,\n.modal-footer:before,\n.modal-footer:after {\n  display: table;\n  content: \" \";\n}\n.clearfix:after,\n.dl-horizontal dd:after,\n.container:after,\n.container-fluid:after,\n.row:after,\n.form-horizontal .form-group:after,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:after,\n.nav:after,\n.navbar:after,\n.navbar-header:after,\n.navbar-collapse:after,\n.pager:after,\n.panel-body:after,\n.modal-header:after,\n.modal-footer:after {\n  clear: both;\n}\n.center-block {\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n}\n.pull-right {\n  float: right !important;\n}\n.pull-left {\n  float: left !important;\n}\n.hide {\n  display: none !important;\n}\n.show {\n  display: block !important;\n}\n.invisible {\n  visibility: hidden;\n}\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n.hidden {\n  display: none !important;\n}\n.affix {\n  position: fixed;\n}\n@-ms-viewport {\n  width: device-width;\n}\n.visible-xs,\n.visible-sm,\n.visible-md,\n.visible-lg {\n  display: none !important;\n}\n.visible-xs-block,\n.visible-xs-inline,\n.visible-xs-inline-block,\n.visible-sm-block,\n.visible-sm-inline,\n.visible-sm-inline-block,\n.visible-md-block,\n.visible-md-inline,\n.visible-md-inline-block,\n.visible-lg-block,\n.visible-lg-inline,\n.visible-lg-inline-block {\n  display: none !important;\n}\n@media (max-width: 767px) {\n  .visible-xs {\n    display: block !important;\n  }\n  table.visible-xs {\n    display: table !important;\n  }\n  tr.visible-xs {\n    display: table-row !important;\n  }\n  th.visible-xs,\n  td.visible-xs {\n    display: table-cell !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-block {\n    display: block !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline {\n    display: inline !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm {\n    display: block !important;\n  }\n  table.visible-sm {\n    display: table !important;\n  }\n  tr.visible-sm {\n    display: table-row !important;\n  }\n  th.visible-sm,\n  td.visible-sm {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-block {\n    display: block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md {\n    display: block !important;\n  }\n  table.visible-md {\n    display: table !important;\n  }\n  tr.visible-md {\n    display: table-row !important;\n  }\n  th.visible-md,\n  td.visible-md {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-block {\n    display: block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg {\n    display: block !important;\n  }\n  table.visible-lg {\n    display: table !important;\n  }\n  tr.visible-lg {\n    display: table-row !important;\n  }\n  th.visible-lg,\n  td.visible-lg {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-block {\n    display: block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (max-width: 767px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .hidden-sm {\n    display: none !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .hidden-md {\n    display: none !important;\n  }\n}\n@media (min-width: 1200px) {\n  .hidden-lg {\n    display: none !important;\n  }\n}\n.visible-print {\n  display: none !important;\n}\n@media print {\n  .visible-print {\n    display: block !important;\n  }\n  table.visible-print {\n    display: table !important;\n  }\n  tr.visible-print {\n    display: table-row !important;\n  }\n  th.visible-print,\n  td.visible-print {\n    display: table-cell !important;\n  }\n}\n.visible-print-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-block {\n    display: block !important;\n  }\n}\n.visible-print-inline {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline {\n    display: inline !important;\n  }\n}\n.visible-print-inline-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline-block {\n    display: inline-block !important;\n  }\n}\n@media print {\n  .hidden-print {\n    display: none !important;\n  }\n}\n/*# sourceMappingURL=bootstrap.css.map */\n", ""]);

	// exports


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f4769f9bdb7466be65088239c12046d1.eot";

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "448c34a56d699c29117adc64c43affeb.woff2";

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fa2772327f55d8198301fdb8bcfc8158.woff";

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "e18bbf611f2a2e43afc071aa2f4e1512.ttf";

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "89889688147bd7575d6327160d64e760.svg";

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Panel = __webpack_require__(210);

	var _Panel2 = _interopRequireDefault(_Panel);

	var _CyReact = __webpack_require__(220);

	var _CyReact2 = _interopRequireDefault(_CyReact);

	var _EntityPanel = __webpack_require__(224);

	var _EntityPanel2 = _interopRequireDefault(_EntityPanel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var App = function App() {
		return _react2.default.createElement(
			'div',
			null,
			_react2.default.createElement(_Panel2.default, null),
			_react2.default.createElement(_CyReact2.default, { containerId: 'react' }),
			_react2.default.createElement(_EntityPanel2.default, null)
		);
	};

	exports.default = App;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _IntentControl = __webpack_require__(211);

	var _IntentControl2 = _interopRequireDefault(_IntentControl);

	var _UserSaysPropertyControl = __webpack_require__(214);

	var _UserSaysPropertyControl2 = _interopRequireDefault(_UserSaysPropertyControl);

	var _ResponsePropertyControl = __webpack_require__(217);

	var _ResponsePropertyControl2 = _interopRequireDefault(_ResponsePropertyControl);

	var _IntentRequest = __webpack_require__(219);

	var _IntentRequest2 = _interopRequireDefault(_IntentRequest);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Panel = function Panel() {
	  return _react2.default.createElement(
	    'div',
	    { className: 'base_panel' },
	    _react2.default.createElement(_IntentControl2.default, null),
	    _react2.default.createElement(_UserSaysPropertyControl2.default, null),
	    _react2.default.createElement(_ResponsePropertyControl2.default, null),
	    _react2.default.createElement(_IntentRequest2.default, null)
	  );
	};

	exports.default = Panel;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _reactRedux = __webpack_require__(166);

	var _actions = __webpack_require__(212);

	var _IntentButtons = __webpack_require__(213);

	var _IntentButtons2 = _interopRequireDefault(_IntentButtons);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var mapStateToProps = function mapStateToProps() {
	  return {};
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    onClearIntentsClick: function onClearIntentsClick() {
	      if (confirm("Are you sure you want to clear all elements?")) {
	        dispatch((0, _actions.clearIntents)());
	      }
	    },
	    onAddIntentClick: function onAddIntentClick() {
	      dispatch((0, _actions.addIntent)());
	    }
	  };
	};

	var IntentControl = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_IntentButtons2.default);

	exports.default = IntentControl;

/***/ },
/* 212 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var clearIntents = exports.clearIntents = function clearIntents() {
	  return {
	    type: "CLEAR_INTENTS"
	  };
	};

	var addIntent = exports.addIntent = function addIntent() {
	  return {
	    type: "ADD_INTENT",
	    id: intentId += 3
	  };
	};

	var saveUserSaysProperties = exports.saveUserSaysProperties = function saveUserSaysProperties(nodeId, userSays) {
	  return {
	    type: "SAVE_USER_SAYS_PROPERTIES",
	    nodeId: nodeId,
	    userSays: userSays
	  };
	};

	var saveResponseProperties = exports.saveResponseProperties = function saveResponseProperties(nodeId, response) {
	  return {
	    type: "SAVE_RESPONSE_PROPERTIES",
	    nodeId: nodeId,
	    response: response
	  };
	};

	var changeUserSaysField = exports.changeUserSaysField = function changeUserSaysField(value) {
	  return {
	    type: "CHANGE_USER_SAYS_FIELD",
	    value: value
	  };
	};

	var changeResponseField = exports.changeResponseField = function changeResponseField(value) {
	  return {
	    type: "CHANGE_RESPONSE_FIELD",
	    value: value
	  };
	};

	var sendCreateIntentRequest = exports.sendCreateIntentRequest = function sendCreateIntentRequest() {
	  return {
	    type: "SEND_CREATE_INTENT_REQUEST"
	  };
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var IntentButtons = function IntentButtons(_ref) {
	  var onClearIntentsClick = _ref.onClearIntentsClick;
	  var onAddIntentClick = _ref.onAddIntentClick;
	  return _react2.default.createElement(
	    "div",
	    null,
	    _react2.default.createElement(
	      "div",
	      null,
	      _react2.default.createElement(
	        "button",
	        { id: "clear_btn",
	          className: "btn btn-default",
	          onClick: function onClick() {
	            return onClearIntentsClick();
	          } },
	        "Clear"
	      )
	    ),
	    _react2.default.createElement(
	      "div",
	      null,
	      _react2.default.createElement(
	        "button",
	        { id: "add_intent_btn",
	          className: "btn btn-default",
	          onClick: function onClick() {
	            return onAddIntentClick();
	          } },
	        "Create Intent"
	      )
	    )
	  );
	};

	IntentButtons.propTypes = {
	  onClearIntentsClick: _react.PropTypes.func.isRequired,
	  onAddIntentClick: _react.PropTypes.func.isRequired
	};

	exports.default = IntentButtons;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _reactRedux = __webpack_require__(166);

	var _actions = __webpack_require__(215);

	var _actions2 = __webpack_require__(212);

	var _UserSaysProperty = __webpack_require__(216);

	var _UserSaysProperty2 = _interopRequireDefault(_UserSaysProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    panel: state.intentPropertiesPanel.userSays
	  };
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    onSaveUserSaysPropertiesClick: function onSaveUserSaysPropertiesClick(nodeId, userSays) {
	      dispatch((0, _actions2.saveUserSaysProperties)(nodeId, userSays));
	      dispatch((0, _actions.showHideIntentProperties)(null));
	    },
	    onUserSaysChange: function onUserSaysChange(value) {
	      dispatch((0, _actions2.changeUserSaysField)(value));
	    }
	  };
	};

	var UserSaysPropertyControl = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_UserSaysProperty2.default);

	exports.default = UserSaysPropertyControl;

/***/ },
/* 215 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var showHideIntentProperties = exports.showHideIntentProperties = function showHideIntentProperties(targetNode, nodeType) {
	  return {
	    type: "SHOW_HIDE_INTENT_PROPERTY",
	    targetNode: targetNode,
	    nodeType: nodeType
	  };
	};

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var UserSaysProperty = function UserSaysProperty(_ref) {
	  var panel = _ref.panel;
	  var onSaveUserSaysPropertiesClick = _ref.onSaveUserSaysPropertiesClick;
	  var onUserSaysChange = _ref.onUserSaysChange;
	  return _react2.default.createElement(
	    "form",
	    { id: "user_says_info",
	      action: "#",
	      hidden: panel.hideProperty,
	      onSubmit: function onSubmit(e) {
	        e.preventDefault();
	        onSaveUserSaysPropertiesClick(panel.selectedNode, e.target.user_says.value);
	      } },
	    _react2.default.createElement(
	      "label",
	      null,
	      "User Says"
	    ),
	    _react2.default.createElement("textarea", {
	      className: "form-control",
	      name: "user_says",
	      rows: panel.text.split("\n").length,
	      value: panel.text,
	      onChange: function onChange(e) {
	        return onUserSaysChange(e.target.value);
	      } }),
	    _react2.default.createElement(
	      "button",
	      { className: "btn btn-default", type: "submit" },
	      "Save"
	    )
	  );
	};

	UserSaysProperty.propTypes = {
	  panel: _react.PropTypes.shape({
	    hideProperty: _react.PropTypes.bool.isRequired,
	    text: _react.PropTypes.string.isRequired,
	    selectedNode: _react.PropTypes.number.isRequired
	  }).isRequired,
	  onSaveUserSaysPropertiesClick: _react.PropTypes.func.isRequired,
	  onUserSaysChange: _react.PropTypes.func.isRequired
	};

	exports.default = UserSaysProperty;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _reactRedux = __webpack_require__(166);

	var _actions = __webpack_require__(215);

	var _actions2 = __webpack_require__(212);

	var _ResponseProperty = __webpack_require__(218);

	var _ResponseProperty2 = _interopRequireDefault(_ResponseProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    panel: state.intentPropertiesPanel.response
	  };
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    onSaveResponsePropertiesClick: function onSaveResponsePropertiesClick(nodeId, response) {
	      dispatch((0, _actions2.saveResponseProperties)(nodeId, response));
	      dispatch((0, _actions.showHideIntentProperties)(null));
	    },
	    onResponseChange: function onResponseChange(value) {
	      dispatch((0, _actions2.chnageResponseField)(value));
	    }
	  };
	};

	var ResponsePropertyControl = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_ResponseProperty2.default);

	exports.default = ResponsePropertyControl;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ResponseProperty = function ResponseProperty(_ref) {
	  var panel = _ref.panel;
	  var onSaveResponsePropertiesClick = _ref.onSaveResponsePropertiesClick;
	  var onResponseChange = _ref.onResponseChange;
	  return _react2.default.createElement(
	    "form",
	    { id: "response_info",
	      action: "#",
	      hidden: panel.hideProperty,
	      onSubmit: function onSubmit(e) {
	        e.preventDefault();
	        onSaveResponsePropertiesClick(panel.selectedNode, e.target.user_says.value);
	      } },
	    _react2.default.createElement(
	      "label",
	      null,
	      "Response"
	    ),
	    _react2.default.createElement("textarea", {
	      className: "form-control",
	      name: "user_says",
	      rows: panel.text.split("\n").length,
	      value: panel.text,
	      onChange: function onChange(e) {
	        return onResponseChange(e.target.value);
	      } }),
	    _react2.default.createElement(
	      "button",
	      { className: "btn btn-default", type: "submit" },
	      "Save"
	    )
	  );
	};

	ResponseProperty.propTypes = {
	  panel: _react.PropTypes.shape({
	    hideProperty: _react.PropTypes.bool.isRequired,
	    text: _react.PropTypes.string.isRequired,
	    selectedNode: _react.PropTypes.number.isRequired
	  }).isRequired,
	  onSaveResponsePropertiesClick: _react.PropTypes.func.isRequired,
	  onResponseChange: _react.PropTypes.func.isRequired
	};

	exports.default = ResponseProperty;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(166);

	var _actions = __webpack_require__(212);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var IntentRequest = function IntentRequest(_ref) {
	  var dispatch = _ref.dispatch;
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(
	      'button',
	      { id: 'submit_btn',
	        className: 'btn btn-default',
	        onClick: function onClick() {
	          return dispatch((0, _actions.sendCreateIntentRequest)());
	        } },
	      'Submit'
	    )
	  );
	};

	IntentRequest = (0, _reactRedux.connect)()(IntentRequest);

	exports.default = IntentRequest;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(166);

	var _LocalStorage = __webpack_require__(192);

	var _LocalStorage2 = _interopRequireDefault(_LocalStorage);

	var _actions = __webpack_require__(215);

	var _actions2 = __webpack_require__(221);

	var _cytoscape = __webpack_require__(222);

	var _cytoscape2 = _interopRequireDefault(_cytoscape);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var Cy = _react2.default.createClass({
	  displayName: 'Cy',

	  componentDidMount: function componentDidMount() {
	    this.createCy();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this.updateCy();
	    this.saveToLocalStorage();
	  },

	  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	    return !(nextProps.graph.elements === this.props.graph.elements) || !(nextProps.graph.style === this.props.graph.style);
	  },

	  updateCy: function updateCy() {
	    this.cy.remove("node");
	    this.cy.add(this.props.graph.elements);
	    this.cy.style(this.props.graph.style);
	  },

	  createCy: function createCy() {
	    this.cy = (0, _cytoscape2.default)({
	      container: document.getElementById(this.props.containerId),

	      boxSelectionEnabled: false,
	      selectionType: 'additive',
	      autounselectify: false,
	      minZoom: 1,
	      maxZoom: 10,

	      style: this.props.graph.style,
	      elements: this.props.graph.elements,
	      layout: {
	        name: 'preset',
	        padding: 5
	      }
	    });

	    console.log("created cy");

	    this.setEventListner();
	    this.showHideIntentProperties();
	  },

	  setEventListner: function setEventListner() {
	    this._cxtdragStart = false;
	    this._edgeFrom = null;
	    this._edgeTo = null;

	    /* Edge control */
	    this.cy.on('cxtdrag', 'node.response', this.dragNode);
	    this.cy.on('cxtdragover', 'node.user_says', this.dragOverNode);
	    this.cy.on('cxtdragout', 'node.user_says', this.dragOutNode);
	    this.cy.on('cxttapend', 'node.response', this.tapEndNode);

	    // save elements to local storage
	    this.cy.on('position', this.saveToLocalStorage);

	    // show or hide intent info editor
	    this.cy.on('select, unselect', 'node', this.showHideIntentProperties);

	    // TODO
	    // delete intent or edge
	    // $('body').keydown(function(event) {
	    //     if ($("input[type='text']:focus").length > 0) {
	    //         return;
	    //     }
	    //     var key = event.which || event.keyCode; // event.keyCode is used for IE8 and earlier
	    //     if (key == 8) {
	    //         this.cy.$(':selected').unselect().remove();
	    //     }
	    // })
	  },

	  dragNode: function dragNode(evt) {
	    var node = evt.cyTarget;
	    this._cxtdragStart = true;
	    this._edgeFrom = node;
	  },

	  dragOverNode: function dragOverNode(evt) {
	    var node = evt.cyTarget;
	    if (!this._cxtdragStart || node == this._edgeFrom) {
	      return;
	    }
	    this._edgeTo = node;
	  },

	  dragOutNode: function dragOutNode(evt) {
	    var node = evt.cyTarget;
	    if (!this._cxtdragStart || node != this._edgeTo) {
	      return;
	    }
	    this._edgeTo = null;
	  },

	  tapEndNode: function tapEndNode(evt) {
	    var node = evt.cyTarget;
	    if (!this._cxtdragStart) {
	      return;
	    }
	    this._cxtdragStart = false;
	    if (this._edgeTo == null) {
	      return;
	    }

	    this.props.addEdge(this._edgeFrom.id(), this._edgeTo.id());
	    this._edgeTo = null;
	  },

	  showHideIntentProperties: function showHideIntentProperties() {
	    var selectedUserSays = this.cy.$("node:selected");
	    var targetNode = null,
	        type = null;
	    if (selectedUserSays.length == 1) {
	      targetNode = selectedUserSays[0].json();
	      type = selectedUserSays[0].hasClass("user_says") ? "userSays" : "response";
	    }
	    this.props.showHideIntentProperties(targetNode, type);
	  },

	  saveToLocalStorage: function saveToLocalStorage() {
	    _LocalStorage2.default.saveElements([].concat(_toConsumableArray(this.cy.nodes().jsons()), _toConsumableArray(this.cy.edges().jsons())));
	  },

	  render: function render() {
	    return _react2.default.createElement('div', { id: 'react', className: 'cy_container' });
	  }
	});

	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    graph: { elements: state.cyElements, style: state.cyStyle }
	  };
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    addEdge: function addEdge(source, target) {
	      dispatch((0, _actions2.addEdge)(source, target));
	    },
	    showHideIntentProperties: function showHideIntentProperties(targetNode, nodeType) {
	      dispatch((0, _actions.showHideIntentProperties)(targetNode, nodeType));
	    }
	  };
	};

	var CyReact = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Cy);

	exports.default = CyReact;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.addEdge = undefined;

	var _LocalStorage = __webpack_require__(192);

	var _LocalStorage2 = _interopRequireDefault(_LocalStorage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var intentId = parseInt(_LocalStorage2.default.getElements("elementId"));

	var addEdge = exports.addEdge = function addEdge(source, target) {
	  return {
	    type: "ADD_EDGE",
	    source: source,
	    target: target,
	    id: intentId++
	  };
	};

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(setImmediate, __dirname) {/*!
	Copyright (c) 2016 The Cytoscape Consortium

	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the “Software”), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	of the Software, and to permit persons to whom the Software is furnished to do
	so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	*/

	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.cytoscape = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('./util');
	var is = _dereq_('./is');
	var Promise = _dereq_('./promise');

	var Animation = function( target, opts, opts2 ){
	  if( !(this instanceof Animation) ){
	    return new Animation( target, opts, opts2 );
	  }

	  var _p = this._private = util.extend( {
	    duration: 1000
	  }, opts, opts2 );

	  _p.target = target;
	  _p.style = _p.style || _p.css;
	  _p.started = false;
	  _p.playing = false;
	  _p.hooked = false;
	  _p.applying = false;
	  _p.progress = 0;
	  _p.completes = [];
	  _p.frames = [];

	  if( _p.complete && is.fn(_p.complete) ){
	    _p.completes.push( _p.complete );
	  }

	  // for future timeline/animations impl
	  this.length = 1;
	  this[0] = this;
	};

	var anifn = Animation.prototype;

	util.extend( anifn, {

	  instanceString: function(){ return 'animation'; },

	  hook: function(){
	    var _p = this._private;

	    if( !_p.hooked ){
	      // add to target's animation queue
	      var q;
	      var tAni = _p.target._private.animation;
	      if( _p.queue ){
	        q = tAni.queue;
	      } else {
	        q = tAni.current;
	      }
	      q.push( this );

	      // add to the animation loop pool
	      if( is.elementOrCollection( _p.target ) ){
	        _p.target.cy().addToAnimationPool( _p.target );
	      }

	      _p.hooked = true;
	    }

	    return this;
	  },

	  play: function(){
	    var _p = this._private;

	    // autorewind
	    if( _p.progress === 1 ){
	      _p.progress = 0;
	    }

	    _p.playing = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will start the animation...

	    return this;
	  },

	  playing: function(){
	    return this._private.playing;
	  },

	  apply: function(){
	    var _p = this._private;

	    _p.applying = true;
	    _p.started = false; // needs to be started by animation loop
	    _p.stopped = false;

	    this.hook();

	    // the animation loop will apply the animation at this progress

	    return this;
	  },

	  applying: function(){
	    return this._private.applying;
	  },

	  pause: function(){
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;

	    return this;
	  },

	  stop: function(){
	    var _p = this._private;

	    _p.playing = false;
	    _p.started = false;
	    _p.stopped = true; // to be removed from animation queues

	    return this;
	  },

	  rewind: function(){
	    return this.progress(0);
	  },

	  fastforward: function(){
	    return this.progress(1);
	  },

	  time: function( t ){
	    var _p = this._private;

	    if( t === undefined ){
	      return _p.progress * _p.duration;
	    } else {
	      return this.progress( t / _p.duration );
	    }
	  },

	  progress: function( p ){
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if( p === undefined ){
	      return _p.progress;
	    } else {
	      if( wasPlaying ){
	        this.pause();
	      }

	      _p.progress = p;
	      _p.started = false;

	      if( wasPlaying ){
	        this.play();
	      }
	    }

	    return this;
	  },

	  completed: function(){
	    return this._private.progress === 1;
	  },

	  reverse: function(){
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if( wasPlaying ){
	      this.pause();
	    }

	    _p.progress = 1 - _p.progress;
	    _p.started = false;

	    var swap = function( a, b ){
	      var _pa = _p[a];

	      _p[a] = _p[b];
	      _p[b] = _pa;
	    };

	    swap( 'zoom', 'startZoom' );
	    swap( 'pan', 'startPan' );
	    swap( 'position', 'startPosition' );

	    // swap styles
	    for( var i = 0; i < _p.style.length; i++ ){
	      var prop = _p.style[i];
	      var name = prop.name;
	      var startStyleProp = _p.startStyle[ name ];

	      _p.startStyle[ name ] = _p.startStyle[ util.dash2camel( name ) ] = prop;
	      _p.style[i] = startStyleProp;
	    }

	    if( wasPlaying ){
	      this.play();
	    }

	    return this;
	  },

	  promise: function( type ){
	    var _p = this._private;

	    var arr;

	    switch( type ){
	      case 'frame':
	        arr = _p.frames;
	        break;
	      default:
	      case 'complete':
	      case 'completed':
	        arr = _p.completes;
	    }

	    return new Promise(function( resolve, reject ){
	      arr.push(function(){
	        resolve();
	      });
	    });
	  }

	} );

	anifn.complete = anifn.completed;

	module.exports = Animation;

	},{"./is":77,"./promise":80,"./util":94}],2:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  aStar: function(options) {
	    var eles = this;

	    options = options || {};

	    // Reconstructs the path from Start to End, acumulating the result in pathAcum
	    var reconstructPath = function(start, end, cameFromMap, pathAcum) {
	      // Base case
	      if (start == end) {
	        pathAcum.push( cy.getElementById(end) );
	        return pathAcum;
	      }

	      if (end in cameFromMap) {
	        // We know which node is before the last one
	        var previous = cameFromMap[end];
	        var previousEdge = cameFromEdge[end];

	        pathAcum.push( cy.getElementById(end) );
	        pathAcum.push( cy.getElementById(previousEdge) );


	        return reconstructPath(start,
	                     previous,
	                     cameFromMap,
	                     pathAcum);
	      }

	      // We should not reach here!
	      return undefined;
	    };

	    // Returns the index of the element in openSet which has minimum fScore
	    var findMin = function(openSet, fScore) {
	      if (openSet.length === 0) {
	        // Should never be the case
	        return undefined;
	      }
	      var minPos = 0;
	      var tempScore = fScore[openSet[0]];
	      for (var i = 1; i < openSet.length; i++) {
	        var s = fScore[openSet[i]];
	        if (s < tempScore) {
	          tempScore = s;
	          minPos = i;
	        }
	      }
	      return minPos;
	    };

	    var cy = this._private.cy;

	    // root - mandatory!
	    if (options != null && options.root != null) {
	      var source = is.string(options.root) ?
	        // use it as a selector, e.g. "#rootID
	        this.filter(options.root)[0] :
	        options.root[0];
	    } else {
	      return undefined;
	    }

	    // goal - mandatory!
	    if (options.goal != null) {
	      var target = is.string(options.goal) ?
	        // use it as a selector, e.g. "#goalID
	        this.filter(options.goal)[0] :
	        options.goal[0];
	    } else {
	      return undefined;
	    }

	    // Heuristic function - optional
	    if (options.heuristic != null && is.fn(options.heuristic)) {
	      var heuristic = options.heuristic;
	    } else {
	      var heuristic = function(){ return 0; }; // use constant if unspecified
	    }

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var closedSet = [];
	    var openSet = [source.id()];
	    var cameFrom = {};
	    var cameFromEdge = {};
	    var gScore = {};
	    var fScore = {};

	    gScore[source.id()] = 0;
	    fScore[source.id()] = heuristic(source);

	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();

	    // Counter
	    var steps = 0;

	    // Main loop
	    while (openSet.length > 0) {
	      var minPos = findMin(openSet, fScore);
	      var cMin = cy.getElementById( openSet[minPos] );
	      steps++;

	      // If we've found our goal, then we are done
	      if (cMin.id() == target.id()) {
	        var rPath = reconstructPath(source.id(), target.id(), cameFrom, []);
	        rPath.reverse();
	        return {
	          found : true,
	          distance : gScore[cMin.id()],
	          path : eles.spawn(rPath),
	          steps : steps
	        };
	      }

	      // Add cMin to processed nodes
	      closedSet.push(cMin.id());
	      // Remove cMin from boundary nodes
	      openSet.splice(minPos, 1);

	      // Update scores for neighbors of cMin
	      // Take into account if graph is directed or not
	      var vwEdges = cMin.connectedEdges();
	      if( directed ){ vwEdges = vwEdges.stdFilter(function(ele){ return ele.data('source') === cMin.id(); }); }
	      vwEdges = vwEdges.intersect(edges);

	      for (var i = 0; i < vwEdges.length; i++) {
	        var e = vwEdges[i];
	        var w = e.connectedNodes().stdFilter(function(n){ return n.id() !== cMin.id(); }).intersect(nodes);

	        // if node is in closedSet, ignore it
	        if (closedSet.indexOf(w.id()) != -1) {
	          continue;
	        }

	        // New tentative score for node w
	        var tempScore = gScore[cMin.id()] + weightFn.apply(e, [e]);

	        // Update gScore for node w if:
	        //   w not present in openSet
	        // OR
	        //   tentative gScore is less than previous value

	        // w not in openSet
	        if (openSet.indexOf(w.id()) == -1) {
	          gScore[w.id()] = tempScore;
	          fScore[w.id()] = tempScore + heuristic(w);
	          openSet.push(w.id()); // Add node to openSet
	          cameFrom[w.id()] = cMin.id();
	          cameFromEdge[w.id()] = e.id();
	          continue;
	        }
	        // w already in openSet, but with greater gScore
	        if (tempScore < gScore[w.id()]) {
	          gScore[w.id()] = tempScore;
	          fScore[w.id()] = tempScore + heuristic(w);
	          cameFrom[w.id()] = cMin.id();
	        }

	      } // End of neighbors update

	    } // End of main loop

	    // If we've reached here, then we've not reached our goal
	    return {
	      found : false,
	      distance : undefined,
	      path : undefined,
	      steps : steps
	    };
	  }

	}); // elesfn


	module.exports = elesfn;

	},{"../../is":77}],3:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');
	var util = _dereq_('../../util');

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  bellmanFord: function(options) {
	    var eles = this;

	    options = options || {};

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // root - mandatory!
	    if (options.root != null) {
	      if (is.string(options.root)) {
	        // use it as a selector, e.g. "#rootID
	        var source = this.filter(options.root)[0];
	      } else {
	        var source = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Initializations
	    var cost = [];
	    var predecessor = [];
	    var predEdge = [];

	    for (var i = 0; i < numNodes; i++) {
	      if (nodes[i].id() === source.id()) {
	        cost[i] = 0;
	      } else {
	        cost[i] = Infinity;
	      }
	      predecessor[i] = undefined;
	    }

	    // Edges relaxation
	    var flag = false;
	    for (var i = 1; i < numNodes; i++) {
	      flag = false;
	      for (var e = 0; e < edges.length; e++) {
	        var sourceIndex = id2position[edges[e].source().id()];
	        var targetIndex = id2position[edges[e].target().id()];
	        var weight = weightFn.apply(edges[e], [edges[e]]);

	        var temp = cost[sourceIndex] + weight;
	        if (temp < cost[targetIndex]) {
	          cost[targetIndex] = temp;
	          predecessor[targetIndex] = sourceIndex;
	          predEdge[targetIndex] = edges[e];
	          flag = true;
	        }

	        // If undirected graph, we need to take into account the 'reverse' edge
	        if (!directed) {
	          var temp = cost[targetIndex] + weight;
	          if (temp < cost[sourceIndex]) {
	            cost[sourceIndex] = temp;
	            predecessor[sourceIndex] = targetIndex;
	            predEdge[sourceIndex] = edges[e];
	            flag = true;
	          }
	        }
	      }

	      if (!flag) {
	        break;
	      }
	    }

	    if (flag) {
	      // Check for negative weight cycles
	      for (var e = 0; e < edges.length; e++) {
	        var sourceIndex = id2position[edges[e].source().id()];
	        var targetIndex = id2position[edges[e].target().id()];
	        var weight = weightFn.apply(edges[e], [edges[e]]);

	        if (cost[sourceIndex] + weight < cost[targetIndex]) {
	          util.error("Graph contains a negative weight cycle for Bellman-Ford");
	          return { pathTo: undefined,
	               distanceTo: undefined,
	               hasNegativeWeightCycle: true};
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for (var i = 0; i < numNodes; i++) {
	      position2id.push(nodes[i].id());
	    }


	    var res = {
	      distanceTo : function(to) {
	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return cost[id2position[toId]];
	      },

	      pathTo : function(to) {

	        var reconstructPathAux = function(predecessor, fromPos, toPos, position2id, acumPath, predEdge) {
	          for(;;){
	            // Add toId to path
	            acumPath.push( cy.getElementById(position2id[toPos]) );
	            acumPath.push( predEdge[toPos] );

	            if (fromPos === toPos) {
	              // reached starting node
	              return acumPath;
	            }

	            // If no path exists, discart acumulated path and return undefined
	            var predPos = predecessor[toPos];
	            if (typeof predPos === "undefined") {
	              return undefined;
	            }

	            toPos = predPos;
	          }

	        };

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }
	        var path = [];

	        // This returns a reversed path
	        var res =  reconstructPathAux(predecessor,
	                      id2position[source.id()],
	                      id2position[toId],
	                      position2id,
	                      path,
	                      predEdge);

	        // Get it in the correct order and return it
	        if (res != null) {
	          res.reverse();
	        }

	        return eles.spawn(res);
	      },

	      hasNegativeWeightCycle: false
	    };

	    return res;

	  } // bellmanFord

	}); // elesfn

	module.exports = elesfn;

	},{"../../is":77,"../../util":94}],4:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
	  betweennessCentrality: function (options) {
	    options = options || {};

	    // Weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	      var weighted = true;
	    } else {
	      var weighted = false;
	    }

	    // Directed - default false
	    if (options.directed != null && is.bool(options.directed)) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var priorityInsert = function (queue, ele) {
	      queue.unshift(ele);
	      for (var i = 0; d[queue[i]] < d[queue[i + 1]] && i < queue.length - 1; i++) {
	        var tmp = queue[i];
	        queue[i] = queue[i + 1];
	        queue[i + 1] = tmp;
	      }
	    };

	    var cy = this._private.cy;

	    // starting
	    var V = this.nodes();
	    var A = {};
	    var C = {};

	    // A contains the neighborhoods of every node
	    for (var i = 0; i < V.length; i++) {
	      if (directed) {
	        A[V[i].id()] = V[i].outgoers("node"); // get outgoers of every node
	      } else {
	        A[V[i].id()] = V[i].openNeighborhood("node"); // get neighbors of every node
	      }
	    }

	    // C contains the betweenness values
	    for (var i = 0; i < V.length; i++) {
	      C[V[i].id()] = 0;
	    }

	    for (var s = 0; s < V.length; s++) {
	      var S = []; // stack
	      var P = {};
	      var g = {};
	      var d = {};
	      var Q = []; // queue

	      // init dictionaries
	      for (var i = 0; i < V.length; i++) {
	        P[V[i].id()] = [];
	        g[V[i].id()] = 0;
	        d[V[i].id()] = Number.POSITIVE_INFINITY;
	      }

	      g[V[s].id()] = 1; // sigma
	      d[V[s].id()] = 0; // distance to s

	      Q.unshift(V[s].id());

	      while (Q.length > 0) {
	        var v = Q.pop();
	        S.push(v);
	        if (weighted) {
	          A[v].forEach(function (w) {
	            if (cy.$('#' + v).edgesTo(w).length > 0) {
	              var edge = cy.$('#' + v).edgesTo(w)[0];
	            } else {
	              var edge = w.edgesTo('#' + v)[0];
	            }

	            var edgeWeight = weightFn.apply(edge, [edge]);

	            if (d[w.id()] > d[v] + edgeWeight) {
	              d[w.id()] = d[v] + edgeWeight;
	              if (Q.indexOf(w.id()) < 0) { //if w is not in Q
	                priorityInsert(Q, w.id());
	              } else { // update position if w is in Q
	                Q.splice(Q.indexOf(w.id()), 1);
	                priorityInsert(Q, w.id());
	              }
	              g[w.id()] = 0;
	              P[w.id()] = [];
	            }
	            if (d[w.id()] == d[v] + edgeWeight) {
	              g[w.id()] = g[w.id()] + g[v];
	              P[w.id()].push(v);
	            }
	          });
	        } else {
	          A[v].forEach(function (w) {
	            if (d[w.id()] == Number.POSITIVE_INFINITY) {
	              Q.unshift(w.id());
	              d[w.id()] = d[v] + 1;
	            }
	            if (d[w.id()] == d[v] + 1) {
	              g[w.id()] = g[w.id()] + g[v];
	              P[w.id()].push(v);
	            }
	          });
	        }
	      }

	      var e = {};
	      for (var i = 0; i < V.length; i++) {
	        e[V[i].id()] = 0;
	      }

	      while (S.length > 0) {
	        var w = S.pop();
	        P[w].forEach(function (v) {
	          e[v] = e[v] + (g[v] / g[w]) * (1 + e[w]);
	          if (w != V[s].id())
	            C[w] = C[w] + e[w];
	        });
	      }
	    }

	    var max = 0;
	    for (var key in C) {
	      if (max < C[key])
	        max = C[key];
	    }

	    var ret = {
	      betweenness: function (node) {
	        if (is.string(node)) {
	          var node = (cy.filter(node)[0]).id();
	        } else {
	          var node = node.id();
	        }

	        return C[node];
	      },

	      betweennessNormalized: function (node) {
	        if (is.string(node)) {
	          var node = (cy.filter(node)[0]).id();
	        } else {
	          var node = node.id();
	        }

	        return C[node] / max;
	      }
	    };

	    // alias
	    ret.betweennessNormalised = ret.betweennessNormalized;

	    return ret;
	  } // betweennessCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.bc = elesfn.betweennessCentrality;

	module.exports = elesfn;

	},{"../../is":77}],5:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');
	var Heap = _dereq_('../../heap');

	var defineSearch = function( params ){
	  params = {
	    bfs: params.bfs || !params.dfs,
	    dfs: params.dfs || !params.bfs
	  };

	  // from pseudocode on wikipedia
	  return function searchFn( roots, fn, directed ){
	    var options;
	    var std;
	    var thisArg;
	    if( is.plainObject(roots) && !is.elementOrCollection(roots) ){
	      options = roots;
	      roots = options.roots || options.root;
	      fn = options.visit;
	      directed = options.directed;
	      std = options.std;
	      thisArg = options.thisArg;
	    }

	    directed = arguments.length === 2 && !is.fn(fn) ? fn : directed;
	    fn = is.fn(fn) ? fn : function(){};

	    var cy = this._private.cy;
	    var v = roots = is.string(roots) ? this.filter(roots) : roots;
	    var Q = [];
	    var connectedNodes = [];
	    var connectedBy = {};
	    var id2depth = {};
	    var V = {};
	    var j = 0;
	    var found;
	    var nodes = this.nodes();
	    var edges = this.edges();

	    // enqueue v
	    for( var i = 0; i < v.length; i++ ){
	      if( v[i].isNode() ){
	        Q.unshift( v[i] );

	        if( params.bfs ){
	          V[ v[i].id() ] = true;

	          connectedNodes.push( v[i] );
	        }

	        id2depth[ v[i].id() ] = 0;
	      }
	    }

	    while( Q.length !== 0 ){
	      var v = params.bfs ? Q.shift() : Q.pop();

	      if( params.dfs ){
	        if( V[ v.id() ] ){ continue; }

	        V[ v.id() ] = true;

	        connectedNodes.push( v );
	      }

	      var depth = id2depth[ v.id() ];
	      var prevEdge = connectedBy[ v.id() ];
	      var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not( v )[0];
	      var ret;

	      if( std ){
	        ret = fn.call(thisArg, v, prevEdge, prevNode, j++, depth);
	      } else {
	        ret = fn.call(v, j++, depth, v, prevEdge, prevNode);
	      }

	      if( ret === true ){
	        found = v;
	        break;
	      }

	      if( ret === false ){
	        break;
	      }

	      var vwEdges = v.connectedEdges(directed ? function(){ return this.data('source') === v.id(); } : undefined).intersect( edges );
	      for( var i = 0; i < vwEdges.length; i++ ){
	        var e = vwEdges[i];
	        var w = e.connectedNodes(function(){ return this.id() !== v.id(); }).intersect( nodes );

	        if( w.length !== 0 && !V[ w.id() ] ){
	          w = w[0];

	          Q.push( w );

	          if( params.bfs ){
	            V[ w.id() ] = true;

	            connectedNodes.push( w );
	          }

	          connectedBy[ w.id() ] = e;

	          id2depth[ w.id() ] = id2depth[ v.id() ] + 1;
	        }
	      }

	    }

	    var connectedEles = [];

	    for( var i = 0; i < connectedNodes.length; i++ ){
	      var node = connectedNodes[i];
	      var edge = connectedBy[ node.id() ];

	      if( edge ){
	        connectedEles.push( edge );
	      }

	      connectedEles.push( node );
	    }

	    return {
	      path: cy.collection( connectedEles, { unique: true } ),
	      found: cy.collection( found )
	    };
	  };
	};

	// search, spanning trees, etc
	var elesfn = ({

	  breadthFirstSearch: defineSearch({ bfs: true }),
	  depthFirstSearch: defineSearch({ dfs: true }),

	  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
	  // implemented from pseudocode from wikipedia
	  kruskal: function( weightFn ){
	    var cy = this.cy();

	    weightFn = is.fn(weightFn) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

	    function findSet(ele){
	      for( var i = 0; i < forest.length; i++ ){
	        var eles = forest[i];

	        if( eles.anySame(ele) ){
	          return {
	            eles: eles,
	            index: i
	          };
	        }
	      }
	    }

	    var A = cy.collection(cy, []);
	    var forest = [];
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      forest.push( nodes[i].collection() );
	    }

	    var edges = this.edges();
	    var S = edges.toArray().sort(function(a, b){
	      var weightA = weightFn.call(a, a);
	      var weightB = weightFn.call(b, b);

	      return weightA - weightB;
	    });

	    for(var i = 0; i < S.length; i++){
	      var edge = S[i];
	      var u = edge.source()[0];
	      var v = edge.target()[0];
	      var setU = findSet(u);
	      var setV = findSet(v);

	      if( setU.index !== setV.index ){
	        A = A.add( edge );

	        // combine forests for u and v
	        forest[ setU.index ] = setU.eles.add( setV.eles );
	        forest.splice( setV.index, 1 );
	      }
	    }

	    return nodes.add( A );

	  },

	  dijkstra: function( root, weightFn, directed ){
	    var options;
	    if( is.plainObject(root) && !is.elementOrCollection(root) ){
	      options = root;
	      root = options.root;
	      weightFn = options.weight;
	      directed = options.directed;
	    }

	    var cy = this._private.cy;
	    weightFn = is.fn(weightFn) ? weightFn : function(){ return 1; }; // if not specified, assume each edge has equal weight (1)

	    var source = is.string(root) ? this.filter(root)[0] : root[0];
	    var dist = {};
	    var prev = {};
	    var knownDist = {};

	    var edges = this.edges().filter(function(){ return !this.isLoop(); });
	    var nodes = this.nodes();

	    var getDist = function(node){
	      return dist[ node.id() ];
	    };

	    var setDist = function(node, d){
	      dist[ node.id() ] = d;

	      Q.updateItem( node );
	    };

	    var Q = new Heap(function( a, b ){
	      return getDist(a) - getDist(b);
	    });

	    for( var i = 0; i < nodes.length; i++ ){
	      var node = nodes[i];

	      dist[ node.id() ] = node.same( source ) ? 0 : Infinity;
	      Q.push( node );
	    }

	    var distBetween = function(u, v){
	      var uvs = ( directed ? u.edgesTo(v) : u.edgesWith(v) ).intersect(edges);
	      var smallestDistance = Infinity;
	      var smallestEdge;

	      for( var i = 0; i < uvs.length; i++ ){
	        var edge = uvs[i];
	        var weight = weightFn.apply( edge, [edge] );

	        if( weight < smallestDistance || !smallestEdge ){
	          smallestDistance = weight;
	          smallestEdge = edge;
	        }
	      }

	      return {
	        edge: smallestEdge,
	        dist: smallestDistance
	      };
	    };

	    while( Q.size() > 0 ){
	      var u = Q.pop();
	      var smalletsDist = getDist(u);
	      var uid = u.id();

	      knownDist[uid] = smalletsDist;

	      if( smalletsDist === Math.Infinite ){
	        break;
	      }

	      var neighbors = u.neighborhood().intersect(nodes);
	      for( var i = 0; i < neighbors.length; i++ ){
	        var v = neighbors[i];
	        var vid = v.id();
	        var vDist = distBetween(u, v);

	        var alt = smalletsDist + vDist.dist;

	        if( alt < getDist(v) ){
	          setDist(v, alt);

	          prev[ vid ] = {
	            node: u,
	            edge: vDist.edge
	          };
	        }
	      } // for
	    } // while

	    return {
	      distanceTo: function(node){
	        var target = is.string(node) ? nodes.filter(node)[0] : node[0];

	        return knownDist[ target.id() ];
	      },

	      pathTo: function(node){
	        var target = is.string(node) ? nodes.filter(node)[0] : node[0];
	        var S = [];
	        var u = target;

	        if( target.length > 0 ){
	          S.unshift( target );

	          while( prev[ u.id() ] ){
	            var p = prev[ u.id() ];

	            S.unshift( p.edge );
	            S.unshift( p.node );

	            u = p.node;
	          }
	        }

	        return cy.collection( S );
	      }
	    };
	  }
	});

	// nice, short mathemathical alias
	elesfn.bfs = elesfn.breadthFirstSearch;
	elesfn.dfs = elesfn.depthFirstSearch;

	module.exports = elesfn;

	},{"../../heap":75,"../../is":77}],6:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  closenessCentralityNormalized: function (options) {
	    options = options || {};

	    var cy = this.cy();

	    var harmonic = options.harmonic;
	    if( harmonic === undefined ){
	      harmonic = true;
	    }

	    var closenesses = {};
	    var maxCloseness = 0;
	    var nodes = this.nodes();
	    var fw = this.floydWarshall({ weight: options.weight, directed: options.directed });

	    // Compute closeness for every node and find the maximum closeness
	    for(var i = 0; i < nodes.length; i++){
	      var currCloseness = 0;
	      for (var j = 0; j < nodes.length; j++) {
	        if (i != j) {
	          var d = fw.distance(nodes[i], nodes[j]);

	          if( harmonic ){
	            currCloseness += 1 / d;
	          } else {
	            currCloseness += d;
	          }
	        }
	      }

	      if( !harmonic ){
	        currCloseness = 1 / currCloseness;
	      }

	      if (maxCloseness < currCloseness){
	        maxCloseness = currCloseness;
	      }

	      closenesses[nodes[i].id()] = currCloseness;
	    }

	    return {
	      closeness: function (node) {
	        if (is.string(node)) {
	          // from is a selector string
	          var node = (cy.filter(node)[0]).id();
	        } else {
	          // from is a node
	          var node = node.id();
	        }

	        return closenesses[node] / maxCloseness;
	      }
	    };
	  },

	  // Implemented from pseudocode from wikipedia
	  closenessCentrality: function (options) {
	    options = options || {};

	    // root - mandatory!
	    if (options.root != null) {
	      if (is.string(options.root)) {
	        // use it as a selector, e.g. "#rootID
	        var root = this.filter(options.root)[0];
	      } else {
	        var root = options.root[0];
	      }
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weight = options.weight;
	    } else {
	      var weight = function(){return 1;};
	    }

	    // directed - optional
	    if (options.directed != null && is.bool(options.directed)) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var harmonic = options.harmonic;
	    if( harmonic === undefined ){
	      harmonic = true;
	    }

	    // we need distance from this node to every other node
	    var dijkstra = this.dijkstra({
	      root: root,
	      weight: weight,
	      directed: directed
	    });
	    var totalDistance = 0;

	    var nodes = this.nodes();
	    for (var i = 0; i < nodes.length; i++){
	      if (nodes[i].id() != root.id()){
	        var d = dijkstra.distanceTo(nodes[i]);

	        if( harmonic ){
	          totalDistance += 1 / d;
	        } else {
	          totalDistance += d;
	        }
	      }
	    }

	    return harmonic ? totalDistance : 1 / totalDistance;
	  } // closenessCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.cc = elesfn.closenessCentrality;
	elesfn.ccn = elesfn.closenessCentralityNormalised = elesfn.closenessCentralityNormalized;

	module.exports = elesfn;

	},{"../../is":77}],7:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');
	var util = _dereq_('../../util');

	var elesfn = ({

	  degreeCentralityNormalized: function (options) {
	    options = options || {};

	    var cy = this.cy();

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    if (!directed) {
	      var degrees = {};
	      var maxDegree = 0;

	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality(util.extend({}, options, {root: node}));
	        if (maxDegree < currDegree.degree)
	          maxDegree = currDegree.degree;

	        degrees[node.id()] = currDegree.degree;
	      }

	      return {
	        degree: function (node) {
	          if (is.string(node)) {
	            // from is a selector string
	            var node = (cy.filter(node)[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return degrees[node] / maxDegree;
	        }
	      };
	    } else {
	      var indegrees = {};
	      var outdegrees = {};
	      var maxIndegree = 0;
	      var maxOutdegree = 0;

	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i];
	        // add current node to the current options object and call degreeCentrality
	        var currDegree = this.degreeCentrality(util.extend({}, options, {root: node}));

	        if (maxIndegree < currDegree.indegree)
	          maxIndegree = currDegree.indegree;

	        if (maxOutdegree < currDegree.outdegree)
	          maxOutdegree = currDegree.outdegree;

	        indegrees[node.id()] = currDegree.indegree;
	        outdegrees[node.id()] = currDegree.outdegree;
	      }

	      return {
	        indegree: function (node) {
	          if (is.string(node)) {
	            // from is a selector string
	            var node = (cy.filter(node)[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return indegrees[node] / maxIndegree;
	        },
	        outdegree: function (node) {
	          if (is.string(node)) {
	            // from is a selector string
	            var node = (cy.filter(node)[0]).id();
	          } else {
	            // from is a node
	            var node = node.id();
	          }

	          return outdegrees[node] / maxOutdegree;
	        }

	      };
	    }

	  }, // degreeCentralityNormalized

	  // Implemented from the algorithm in Opsahl's paper
	  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
	  // check the heading 2 "Degree"
	  degreeCentrality: function (options) {
	    options = options || {};

	    var callingEles = this;

	    // root - mandatory!
	    if (options != null && options.root != null) {
	      var root = is.string(options.root) ? this.filter(options.root)[0] : options.root[0];
	    } else {
	      return undefined;
	    }

	    // weight - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function (e) {
	        return 1;
	      };
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    // alpha - optional
	    if (options.alpha != null && is.number(options.alpha)) {
	      var alpha = options.alpha;
	    } else {
	      alpha = 0;
	    }


	    if (!directed) {
	      var connEdges = root.connectedEdges().intersection( callingEles );
	      var k = connEdges.length;
	      var s = 0;

	      // Now, sum edge weights
	      for (var i = 0; i < connEdges.length; i++) {
	        var edge = connEdges[i];
	        s += weightFn.apply(edge, [edge]);
	      }

	      return {
	        degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
	      };
	    } else {
	      var incoming = root.connectedEdges('edge[target = "' + root.id() + '"]').intersection( callingEles );
	      var outgoing = root.connectedEdges('edge[source = "' + root.id() + '"]').intersection( callingEles );
	      var k_in = incoming.length;
	      var k_out = outgoing.length;
	      var s_in = 0;
	      var s_out = 0;

	      // Now, sum incoming edge weights
	      for (var i = 0; i < incoming.length; i++) {
	        var edge = incoming[i];
	        s_in += weightFn.apply(edge, [edge]);
	      }

	      // Now, sum outgoing edge weights
	      for (var i = 0; i < outgoing.length; i++) {
	        var edge = outgoing[i];
	        s_out += weightFn.apply(edge, [edge]);
	      }

	      return {
	        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
	        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
	      };
	    }
	  } // degreeCentrality

	}); // elesfn

	// nice, short mathemathical alias
	elesfn.dc = elesfn.degreeCentrality;
	elesfn.dcn = elesfn.degreeCentralityNormalised = elesfn.degreeCentralityNormalized;

	module.exports = elesfn;

	},{"../../is":77,"../../util":94}],8:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  // Implemented from pseudocode from wikipedia
	  floydWarshall: function(options) {
	    options = options || {};

	    var cy = this.cy();

	    // Weight function - optional
	    if (options.weight != null && is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    // directed - optional
	    if (options.directed != null) {
	      var directed = options.directed;
	    } else {
	      var directed = false;
	    }

	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    // mapping: node id -> position in nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Initialize distance matrix
	    var dist = [];
	    for (var i = 0; i < numNodes; i++) {
	      var newRow = new Array(numNodes);
	      for (var j = 0; j < numNodes; j++) {
	        if (i == j) {
	          newRow[j] = 0;
	        } else {
	          newRow[j] = Infinity;
	        }
	      }
	      dist.push(newRow);
	    }

	    // Initialize matrix used for path reconstruction
	    // Initialize distance matrix
	    var next = [];
	    var edgeNext = [];

	    var initMatrix = function(next){
	      for (var i = 0; i < numNodes; i++) {
	        var newRow = new Array(numNodes);
	        for (var j = 0; j < numNodes; j++) {
	          newRow[j] = undefined;
	        }
	        next.push(newRow);
	      }
	    };

	    initMatrix(next);
	    initMatrix(edgeNext);

	    // Process edges
	    for (var i = 0; i < edges.length ; i++) {
	      var sourceIndex = id2position[edges[i].source().id()];
	      var targetIndex = id2position[edges[i].target().id()];
	      var weight = weightFn.apply(edges[i], [edges[i]]);

	      // Check if already process another edge between same 2 nodes
	      if (dist[sourceIndex][targetIndex] > weight) {
	        dist[sourceIndex][targetIndex] = weight;
	        next[sourceIndex][targetIndex] = targetIndex;
	        edgeNext[sourceIndex][targetIndex] = edges[i];
	      }
	    }

	    // If undirected graph, process 'reversed' edges
	    if (!directed) {
	      for (var i = 0; i < edges.length ; i++) {
	        var sourceIndex = id2position[edges[i].target().id()];
	        var targetIndex = id2position[edges[i].source().id()];
	        var weight = weightFn.apply(edges[i], [edges[i]]);

	        // Check if already process another edge between same 2 nodes
	        if (dist[sourceIndex][targetIndex] > weight) {
	          dist[sourceIndex][targetIndex] = weight;
	          next[sourceIndex][targetIndex] = targetIndex;
	          edgeNext[sourceIndex][targetIndex] = edges[i];
	        }
	      }
	    }

	    // Main loop
	    for (var k = 0; k < numNodes; k++) {
	      for (var i = 0; i < numNodes; i++) {
	        for (var j = 0; j < numNodes; j++) {
	          if (dist[i][k] + dist[k][j] < dist[i][j]) {
	            dist[i][j] = dist[i][k] + dist[k][j];
	            next[i][j] = next[i][k];
	          }
	        }
	      }
	    }

	    // Build result object
	    var position2id = [];
	    for (var i = 0; i < numNodes; i++) {
	      position2id.push(nodes[i].id());
	    }

	    var res = {
	      distance: function(from, to) {
	        if (is.string(from)) {
	          // from is a selector string
	          var fromId = (cy.filter(from)[0]).id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        return dist[id2position[fromId]][id2position[toId]];
	      },

	      path: function(from, to) {
	        var reconstructPathAux = function(from, to, next, position2id, edgeNext) {
	          if (from === to) {
	            return cy.getElementById( position2id[from] );
	          }
	          if (next[from][to] === undefined) {
	            return undefined;
	          }

	          var path = [ cy.getElementById(position2id[from]) ];
	          var prev = from;
	          while (from !== to) {
	            prev = from;
	            from = next[from][to];

	            var edge = edgeNext[prev][from];
	            path.push( edge );

	            path.push( cy.getElementById(position2id[from]) );
	          }
	          return path;
	        };

	        if (is.string(from)) {
	          // from is a selector string
	          var fromId = (cy.filter(from)[0]).id();
	        } else {
	          // from is a node
	          var fromId = from.id();
	        }

	        if (is.string(to)) {
	          // to is a selector string
	          var toId = (cy.filter(to)[0]).id();
	        } else {
	          // to is a node
	          var toId = to.id();
	        }

	        var pathArr = reconstructPathAux(id2position[fromId],
	                      id2position[toId],
	                      next,
	                      position2id,
	                      edgeNext);

	        return cy.collection( pathArr );
	      }
	    };

	    return res;

	  } // floydWarshall

	}); // elesfn

	module.exports = elesfn;

	},{"../../is":77}],9:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');

	var elesfn = {};

	[
	  _dereq_('./bfs-dfs'),
	  _dereq_('./a-star'),
	  _dereq_('./floyd-warshall'),
	  _dereq_('./bellman-ford'),
	  _dereq_('./kerger-stein'),
	  _dereq_('./page-rank'),
	  _dereq_('./degree-centrality'),
	  _dereq_('./closeness-centrality'),
	  _dereq_('./betweenness-centrality')
	].forEach(function( props ){
	  util.extend( elesfn, props );
	});

	module.exports = elesfn;

	},{"../../util":94,"./a-star":2,"./bellman-ford":3,"./betweenness-centrality":4,"./bfs-dfs":5,"./closeness-centrality":6,"./degree-centrality":7,"./floyd-warshall":8,"./kerger-stein":10,"./page-rank":11}],10:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');

	var elesfn = ({

	  // Computes the minimum cut of an undirected graph
	  // Returns the correct answer with high probability
	  kargerStein: function(options) {
	    var eles = this;

	    options = options || {};

	    // Function which colapses 2 (meta) nodes into one
	    // Updates the remaining edge lists
	    // Receives as a paramater the edge which causes the collapse
	    var colapse = function(edgeIndex, nodeMap, remainingEdges) {
	      var edgeInfo = remainingEdges[edgeIndex];
	      var sourceIn = edgeInfo[1];
	      var targetIn = edgeInfo[2];
	      var partition1 = nodeMap[sourceIn];
	      var partition2 = nodeMap[targetIn];

	      // Delete all edges between partition1 and partition2
	      var newEdges = remainingEdges.filter(function(edge) {
	        if (nodeMap[edge[1]] === partition1 && nodeMap[edge[2]] === partition2) {
	          return false;
	        }
	        if (nodeMap[edge[1]] === partition2 && nodeMap[edge[2]] === partition1) {
	          return false;
	        }
	        return true;
	      });

	      // All edges pointing to partition2 should now point to partition1
	      for (var i = 0; i < newEdges.length; i++) {
	        var edge = newEdges[i];
	        if (edge[1] === partition2) { // Check source
	          newEdges[i] = edge.slice(0);
	          newEdges[i][1] = partition1;
	        } else if (edge[2] === partition2) { // Check target
	          newEdges[i] = edge.slice(0);
	          newEdges[i][2] = partition1;
	        }
	      }

	      // Move all nodes from partition2 to partition1
	      for (var i = 0; i < nodeMap.length; i++) {
	        if (nodeMap[i] === partition2) {
	          nodeMap[i] = partition1;
	        }
	      }

	      return newEdges;
	    };


	    // Contracts a graph until we reach a certain number of meta nodes
	    var contractUntil = function(metaNodeMap,
	                   remainingEdges,
	                   size,
	                   sizeLimit) {
	      // Stop condition
	      if (size <= sizeLimit) {
	        return remainingEdges;
	      }

	      // Choose an edge randomly
	      var edgeIndex = Math.floor((Math.random() * remainingEdges.length));

	      // Colapse graph based on edge
	      var newEdges = colapse(edgeIndex, metaNodeMap, remainingEdges);

	      return contractUntil(metaNodeMap,
	                 newEdges,
	                 size - 1,
	                 sizeLimit);
	    };

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;
	    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
	    var stopSize = Math.floor(numNodes / Math.sqrt(2));

	    if (numNodes < 2) {
	      util.error("At least 2 nodes are required for Karger-Stein algorithm");
	      return undefined;
	    }

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Now store edge destination as indexes
	    // Format for each edge (edge index, source node index, target node index)
	    var edgeIndexes = [];
	    for (var i = 0; i < numEdges; i++) {
	      var e = edges[i];
	      edgeIndexes.push([i, id2position[e.source().id()], id2position[e.target().id()]]);
	    }

	    // We will store the best cut found here
	    var minCutSize = Infinity;
	    var minCut;

	    // Initial meta node partition
	    var originalMetaNode = [];
	    for (var i = 0; i < numNodes; i++) {
	      originalMetaNode.push(i);
	    }

	    // Main loop
	    for (var iter = 0; iter <= numIter; iter++) {
	      // Create new meta node partition
	      var metaNodeMap = originalMetaNode.slice(0);

	      // Contract until stop point (stopSize nodes)
	      var edgesState = contractUntil(metaNodeMap, edgeIndexes, numNodes, stopSize);

	      // Create a copy of the colapsed nodes state
	      var metaNodeMap2 = metaNodeMap.slice(0);

	      // Run 2 iterations starting in the stop state
	      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
	      var res2 = contractUntil(metaNodeMap2, edgesState, stopSize, 2);

	      // Is any of the 2 results the best cut so far?
	      if (res1.length <= res2.length && res1.length < minCutSize) {
	        minCutSize = res1.length;
	        minCut = [res1, metaNodeMap];
	      } else if (res2.length <= res1.length && res2.length < minCutSize) {
	        minCutSize = res2.length;
	        minCut = [res2, metaNodeMap2];
	      }
	    } // end of main loop


	    // Construct result
	    var resEdges = (minCut[0]).map(function(e){ return edges[e[0]]; });
	    var partition1 = [];
	    var partition2 = [];

	    // traverse metaNodeMap for best cut
	    var witnessNodePartition = minCut[1][0];
	    for (var i = 0; i < minCut[1].length; i++) {
	      var partitionId = minCut[1][i];
	      if (partitionId === witnessNodePartition) {
	        partition1.push(nodes[i]);
	      } else {
	        partition2.push(nodes[i]);
	      }
	    }

	    var ret = {
	      cut: eles.spawn(cy, resEdges),
	      partition1: eles.spawn(partition1),
	      partition2: eles.spawn(partition2)
	    };

	    return ret;
	  }
	}); // elesfn


	module.exports = elesfn;

	},{"../../util":94}],11:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../is');

	var elesfn = ({

	  pageRank: function(options) {
	    options = options || {};

	    var normalizeVector = function(vector) {
	      var length = vector.length;

	      // First, get sum of all elements
	      var total = 0;
	      for (var i = 0; i < length; i++) {
	        total += vector[i];
	      }

	      // Now, divide each by the sum of all elements
	      for (var i = 0; i < length; i++) {
	        vector[i] = vector[i] / total;
	      }
	    };

	    // dampingFactor - optional
	    if (options != null &&
	      options.dampingFactor != null) {
	      var dampingFactor = options.dampingFactor;
	    } else {
	      var dampingFactor = 0.8; // Default damping factor
	    }

	    // desired precision - optional
	    if (options != null &&
	      options.precision != null) {
	      var epsilon = options.precision;
	    } else {
	      var epsilon = 0.000001; // Default precision
	    }

	    // Max number of iterations - optional
	    if (options != null &&
	      options.iterations != null) {
	      var numIter = options.iterations;
	    } else {
	      var numIter = 200; // Default number of iterations
	    }

	    // Weight function - optional
	    if (options != null &&
	      options.weight != null &&
	      is.fn(options.weight)) {
	      var weightFn = options.weight;
	    } else {
	      // If not specified, assume each edge has equal weight (1)
	      var weightFn = function(e) {return 1;};
	    }

	    var cy = this._private.cy;
	    var edges = this.edges().stdFilter(function(e){ return !e.isLoop(); });
	    var nodes = this.nodes();
	    var numNodes = nodes.length;
	    var numEdges = edges.length;

	    // Create numerical identifiers for each node
	    // mapping: node id -> position in nodes array
	    // for reverse mapping, simply use nodes array
	    var id2position = {};
	    for (var i = 0; i < numNodes; i++) {
	      id2position[nodes[i].id()] = i;
	    }

	    // Construct transposed adjacency matrix
	    // First lets have a zeroed matrix of the right size
	    // We'll also keep track of the sum of each column
	    var matrix = [];
	    var columnSum = [];
	    var additionalProb = (1 - dampingFactor) / numNodes;

	    // Create null matric
	    for (var i = 0; i < numNodes; i++) {
	      var newRow = [];
	      for (var j = 0; j < numNodes; j++) {
	        newRow.push(0.0);
	      }
	      matrix.push(newRow);
	      columnSum.push(0.0);
	    }

	    // Now, process edges
	    for (var i = 0; i < numEdges; i++) {
	      var edge = edges[i];
	      var s = id2position[edge.source().id()];
	      var t = id2position[edge.target().id()];
	      var w = weightFn.apply(edge, [edge]);

	      // Update matrix
	      matrix[t][s] += w;

	      // Update column sum
	      columnSum[s] += w;
	    }

	    // Add additional probability based on damping factor
	    // Also, take into account columns that have sum = 0
	    var p = 1.0 / numNodes + additionalProb; // Shorthand
	    // Traverse matrix, column by column
	    for (var j = 0; j < numNodes; j++) {
	      if (columnSum[j] === 0) {
	        // No 'links' out from node jth, assume equal probability for each possible node
	        for (var i = 0; i < numNodes; i++) {
	          matrix[i][j] = p;
	        }
	      } else {
	        // Node jth has outgoing link, compute normalized probabilities
	        for (var i = 0; i < numNodes; i++) {
	          matrix[i][j] = matrix[i][j] / columnSum[j] + additionalProb;
	        }
	      }
	    }

	    // Compute dominant eigenvector using power method
	    var eigenvector = [];
	    var nullVector = [];
	    var previous;

	    // Start with a vector of all 1's
	    // Also, initialize a null vector which will be used as shorthand
	    for (var i = 0; i < numNodes; i++) {
	      eigenvector.push(1.0);
	      nullVector.push(0.0);
	    }

	    for (var iter = 0; iter < numIter; iter++) {
	      // New array with all 0's
	      var temp = nullVector.slice(0);

	      // Multiply matrix with previous result
	      for (var i = 0; i < numNodes; i++) {
	        for (var j = 0; j < numNodes; j++) {
	          temp[i] += matrix[i][j] * eigenvector[j];
	        }
	      }

	      normalizeVector(temp);
	      previous = eigenvector;
	      eigenvector = temp;

	      var diff = 0;
	      // Compute difference (squared module) of both vectors
	      for (var i = 0; i < numNodes; i++) {
	        diff += Math.pow(previous[i] - eigenvector[i], 2);
	      }

	      // If difference is less than the desired threshold, stop iterating
	      if (diff < epsilon) {
	        break;
	      }
	    }

	    // Construct result
	    var res = {
	      rank : function(node) {
	        if (is.string(node)) {
	          // is a selector string
	          var nodeId = (cy.filter(node)[0]).id();
	        } else {
	          // is a node object
	          var nodeId = node.id();
	        }
	        return eigenvector[id2position[nodeId]];
	      }
	    };


	    return res;
	  } // pageRank

	}); // elesfn

	module.exports = elesfn;

	},{"../../is":77}],12:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');

	var elesfn = ({
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop()
	});

	module.exports = elesfn;

	},{"../define":41}],13:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var elesfn = ({
	  classes: function( classes ){
	    classes = classes.match(/\S+/g) || [];
	    var self = this;
	    var changed = [];
	    var classesMap = {};

	    // fill in classes map
	    for( var i = 0; i < classes.length; i++ ){
	      var cls = classes[i];

	      classesMap[ cls ] = true;
	    }

	    // check and update each ele
	    for( var j = 0; j < self.length; j++ ){
	      var ele = self[j];
	      var _p = ele._private;
	      var eleClasses = _p.classes;
	      var changedEle = false;

	      // check if ele has all of the passed classes
	      for( var i = 0; i < classes.length; i++ ){
	        var cls = classes[i];
	        var eleHasClass = eleClasses[ cls ];

	        if( !eleHasClass ){
	          changedEle = true;
	          break;
	        }
	      }

	      // check if ele has classes outside of those passed
	      if( !changedEle ){ for( var eleCls in eleClasses ){
	        var eleHasClass = eleClasses[ eleCls ];
	        var specdClass = classesMap[ eleCls ]; // i.e. this class is passed to the function

	        if( eleHasClass && !specdClass ){
	          changedEle = true;
	          break;
	        }
	      } }

	      if( changedEle ){
	        _p.classes = util.copy( classesMap );

	        changed.push( ele );
	      }
	    }

	    // trigger update style on those eles that had class changes
	    if( changed.length > 0 ){
	      this.spawn(changed)
	        .updateStyle()
	        .trigger('class')
	      ;
	    }

	    return self;
	  },

	  addClass: function( classes ){
	    return this.toggleClass( classes, true );
	  },

	  hasClass: function( className ){
	    var ele = this[0];
	    return ( ele != null && ele._private.classes[className] ) ? true : false;
	  },

	  toggleClass: function( classesStr, toggle ){
	    var classes = classesStr.match(/\S+/g) || [];
	    var self = this;
	    var changed = []; // eles who had classes changed

	    for( var i = 0, il = self.length; i < il; i++ ){
	      var ele = self[i];
	      var changedEle = false;

	      for( var j = 0; j < classes.length; j++ ){
	        var cls = classes[j];
	        var eleClasses = ele._private.classes;
	        var hasClass = eleClasses[cls];
	        var shouldAdd = toggle || (toggle === undefined && !hasClass);

	        if( shouldAdd ){
	          eleClasses[cls] = true;

	          if( !hasClass && !changedEle ){
	            changed.push(ele);
	            changedEle = true;
	          }
	        } else { // then remove
	          eleClasses[cls] = false;

	          if( hasClass && !changedEle ){
	            changed.push(ele);
	            changedEle = true;
	          }
	        }

	      } // for j classes
	    } // for i eles

	    // trigger update style on those eles that had class changes
	    if( changed.length > 0 ){
	      this.spawn(changed)
	        .updateStyle()
	        .trigger('class')
	      ;
	    }

	    return self;
	  },

	  removeClass: function( classes ){
	    return this.toggleClass( classes, false );
	  },

	  flashClass: function( classes, duration ){
	    var self = this;

	    if( duration == null ){
	      duration = 250;
	    } else if( duration === 0 ){
	      return self; // nothing to do really
	    }

	    self.addClass( classes );
	    setTimeout(function(){
	      self.removeClass( classes );
	    }, duration);

	    return self;
	  }
	});

	module.exports = elesfn;

	},{"../util":94}],14:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = ({
	  allAre: function( selector ){
	    return this.filter(selector).length === this.length;
	  },

	  is: function( selector ){
	    return this.filter(selector).length > 0;
	  },

	  some: function( fn, thisArg ){
	    for( var i = 0; i < this.length; i++ ){
	      var ret = !thisArg ? fn( this[i], i, this ) : fn.apply( thisArg, [ this[i], i, this ] );

	      if( ret ){
	        return true;
	      }
	    }

	    return false;
	  },

	  every: function( fn, thisArg ){
	    for( var i = 0; i < this.length; i++ ){
	      var ret = !thisArg ? fn( this[i], i, this ) : fn.apply( thisArg, [ this[i], i, this ] );

	      if( !ret ){
	        return false;
	      }
	    }

	    return true;
	  },

	  same: function( collection ){
	    collection = this.cy().collection( collection );

	    // cheap extra check
	    if( this.length !== collection.length ){
	      return false;
	    }

	    return this.intersect( collection ).length === this.length;
	  },

	  anySame: function( collection ){
	    collection = this.cy().collection( collection );

	    return this.intersect( collection ).length > 0;
	  },

	  allAreNeighbors: function( collection ){
	    collection = this.cy().collection( collection );

	    return this.neighborhood().intersect( collection ).length === collection.length;
	  }
	});

	elesfn.allAreNeighbours = elesfn.allAreNeighbors;

	module.exports = elesfn;

	},{}],15:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = ({
	  parent: function( selector ){
	    var parents = [];
	    var cy = this._private.cy;

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      var parent = cy.getElementById( ele._private.data.parent );

	      if( parent.size() > 0 ){
	        parents.push( parent );
	      }
	    }

	    return this.spawn( parents, { unique: true } ).filter( selector );
	  },

	  parents: function( selector ){
	    var parents = [];

	    var eles = this.parent();
	    while( eles.nonempty() ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];
	        parents.push( ele );
	      }

	      eles = eles.parent();
	    }

	    return this.spawn( parents, { unique: true } ).filter( selector );
	  },

	  commonAncestors: function( selector ){
	    var ancestors;

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      var parents = ele.parents();

	      ancestors = ancestors || parents;

	      ancestors = ancestors.intersect( parents ); // current list must be common with current ele parents set
	    }

	    return ancestors.filter( selector );
	  },

	  orphans: function( selector ){
	    return this.stdFilter(function( ele ){
	      return ele.isNode() && ele.parent().empty();
	    }).filter( selector );
	  },

	  nonorphans: function( selector ){
	    return this.stdFilter(function( ele ){
	      return ele.isNode() && ele.parent().nonempty();
	    }).filter( selector );
	  },

	  children: function( selector ){
	    var children = [];

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      children = children.concat( ele._private.children );
	    }

	    return this.spawn( children, { unique: true } ).filter( selector );
	  },

	  siblings: function( selector ){
	    return this.parent().children().not( this ).filter( selector );
	  },

	  isParent: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.children.length !== 0;
	    }
	  },

	  isChild: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.data.parent !== undefined && ele.parent().length !== 0;
	    }
	  },

	  descendants: function( selector ){
	    var elements = [];

	    function add( eles ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        elements.push( ele );

	        if( ele.children().nonempty() ){
	          add( ele.children() );
	        }
	      }
	    }

	    add( this.children() );

	    return this.spawn( elements, { unique: true } ).filter( selector );
	  }
	});

	// aliases
	elesfn.ancestors = elesfn.parents;

	module.exports = elesfn;

	},{}],16:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');
	var fn, elesfn;

	fn = elesfn = ({

	  data: define.data({
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),

	  removeData: define.removeData({
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),

	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  }),

	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  }),

	  rscratch: define.data({
	    field: 'rscratch',
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: true
	  }),

	  removeRscratch: define.removeData({
	    field: 'rscratch',
	    triggerEvent: false
	  }),

	  id: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.data.id;
	    }
	  }

	});

	// aliases
	fn.attr = fn.data;
	fn.removeAttr = fn.removeData;

	module.exports = elesfn;

	},{"../define":41}],17:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var elesfn = {};

	function defineDegreeFunction(callback){
	  return function( includeLoops ){
	    var self = this;

	    if( includeLoops === undefined ){
	      includeLoops = true;
	    }

	    if( self.length === 0 ){ return; }

	    if( self.isNode() && !self.removed() ){
	      var degree = 0;
	      var node = self[0];
	      var connectedEdges = node._private.edges;

	      for( var i = 0; i < connectedEdges.length; i++ ){
	        var edge = connectedEdges[i];

	        if( !includeLoops && edge.isLoop() ){
	          continue;
	        }

	        degree += callback( node, edge );
	      }

	      return degree;
	    } else {
	      return;
	    }
	  };
	}

	util.extend(elesfn, {
	  degree: defineDegreeFunction(function(node, edge){
	    if( edge.source().same( edge.target() ) ){
	      return 2;
	    } else {
	      return 1;
	    }
	  }),

	  indegree: defineDegreeFunction(function(node, edge){
	    if( edge.target().same(node) ){
	      return 1;
	    } else {
	      return 0;
	    }
	  }),

	  outdegree: defineDegreeFunction(function(node, edge){
	    if( edge.source().same(node) ){
	      return 1;
	    } else {
	      return 0;
	    }
	  })
	});

	function defineDegreeBoundsFunction(degreeFn, callback){
	  return function( includeLoops ){
	    var ret;
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      var ele = nodes[i];
	      var degree = ele[degreeFn]( includeLoops );
	      if( degree !== undefined && (ret === undefined || callback(degree, ret)) ){
	        ret = degree;
	      }
	    }

	    return ret;
	  };
	}

	util.extend(elesfn, {
	  minDegree: defineDegreeBoundsFunction('degree', function(degree, min){
	    return degree < min;
	  }),

	  maxDegree: defineDegreeBoundsFunction('degree', function(degree, max){
	    return degree > max;
	  }),

	  minIndegree: defineDegreeBoundsFunction('indegree', function(degree, min){
	    return degree < min;
	  }),

	  maxIndegree: defineDegreeBoundsFunction('indegree', function(degree, max){
	    return degree > max;
	  }),

	  minOutdegree: defineDegreeBoundsFunction('outdegree', function(degree, min){
	    return degree < min;
	  }),

	  maxOutdegree: defineDegreeBoundsFunction('outdegree', function(degree, max){
	    return degree > max;
	  })
	});

	util.extend(elesfn, {
	  totalDegree: function( includeLoops ){
	    var total = 0;
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){
	      total += nodes[i].degree( includeLoops );
	    }

	    return total;
	  }
	});

	module.exports = elesfn;

	},{"../util":94}],18:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');
	var is = _dereq_('../is');
	var util = _dereq_('../util');
	var fn, elesfn;

	fn = elesfn = ({

	  position: define.data({
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: true,
	    triggerFnName: 'rtrigger',
	    allowGetting: true,
	    validKeys: ['x', 'y'],
	    onSet: function( eles ){
	      var updatedEles = eles.updateCompoundBounds();
	      updatedEles.rtrigger('position');
	    },
	    canSet: function( ele ){
	      return !ele.locked() && !ele.isParent();
	    }
	  }),

	  // position but no notification to renderer
	  silentPosition: define.data({
	    field: 'position',
	    bindingEvent: 'position',
	    allowBinding: false,
	    allowSetting: true,
	    settingEvent: 'position',
	    settingTriggersEvent: false,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    validKeys: ['x', 'y'],
	    onSet: function( eles ){
	      eles.updateCompoundBounds();
	    },
	    canSet: function( ele ){
	      return !ele.locked() && !ele.isParent();
	    }
	  }),

	  positions: function( pos, silent ){
	    if( is.plainObject(pos) ){
	      this.position(pos);

	    } else if( is.fn(pos) ){
	      var fn = pos;

	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[i];

	        var pos = fn.apply(ele, [i, ele]);

	        if( pos && !ele.locked() && !ele.isParent() ){
	          var elePos = ele._private.position;
	          elePos.x = pos.x;
	          elePos.y = pos.y;
	        }
	      }

	      var updatedEles = this.updateCompoundBounds();
	      var toTrigger = updatedEles.length > 0 ? this.add( updatedEles ) : this;

	      if( silent ){
	        toTrigger.trigger('position');
	      } else {
	        toTrigger.rtrigger('position');
	      }
	    }

	    return this; // chaining
	  },

	  silentPositions: function( pos ){
	    return this.positions( pos, true );
	  },

	  // get/set the rendered (i.e. on screen) positon of the element
	  renderedPosition: function( dim, val ){
	    var ele = this[0];
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();
	    var rpos = is.plainObject( dim ) ? dim : undefined;
	    var setting = rpos !== undefined || ( val !== undefined && is.string(dim) );

	    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
	      if( setting ){
	        for( var i = 0; i < this.length; i++ ){
	          var ele = this[i];

	          if( val !== undefined ){ // set one dimension
	            ele._private.position[dim] = ( val - pan[dim] )/zoom;
	          } else if( rpos !== undefined ){ // set whole position
	            ele._private.position = {
	              x: ( rpos.x - pan.x ) /zoom,
	              y: ( rpos.y - pan.y ) /zoom
	            };
	          }
	        }

	        this.rtrigger('position');
	      } else { // getting
	        var pos = ele._private.position;
	        rpos = {
	          x: pos.x * zoom + pan.x,
	          y: pos.y * zoom + pan.y
	        };

	        if( dim === undefined ){ // then return the whole rendered position
	          return rpos;
	        } else { // then return the specified dimension
	          return rpos[ dim ];
	        }
	      }
	    } else if( !setting ){
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  // get/set the position relative to the parent
	  relativePosition: function( dim, val ){
	    var ele = this[0];
	    var cy = this.cy();
	    var ppos = is.plainObject( dim ) ? dim : undefined;
	    var setting = ppos !== undefined || ( val !== undefined && is.string(dim) );
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if( ele && ele.isNode() ){ // must have an element and must be a node to return position
	      if( setting ){
	        for( var i = 0; i < this.length; i++ ){
	          var ele = this[i];
	          var parent = hasCompoundNodes ? ele.parent() : null;
	          var hasParent = parent && parent.length > 0;
	          var relativeToParent = hasParent;

	          if( hasParent ){
	            parent = parent[0];
	          }

	          var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

	          if( val !== undefined ){ // set one dimension
	            ele._private.position[dim] = val + origin[dim];
	          } else if( ppos !== undefined ){ // set whole position
	            ele._private.position = {
	              x: ppos.x + origin.x,
	              y: ppos.y + origin.y
	            };
	          }
	        }

	        this.rtrigger('position');

	      } else { // getting
	        var pos = ele._private.position;
	        var parent = hasCompoundNodes ? ele.parent() : null;
	        var hasParent = parent && parent.length > 0;
	        var relativeToParent = hasParent;

	        if( hasParent ){
	          parent = parent[0];
	        }

	        var origin = relativeToParent ? parent._private.position : { x: 0, y: 0 };

	        ppos = {
	          x: pos.x - origin.x,
	          y: pos.y - origin.y
	        };

	        if( dim === undefined ){ // then return the whole rendered position
	          return ppos;
	        } else { // then return the specified dimension
	          return ppos[ dim ];
	        }
	      }
	    } else if( !setting ){
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },

	  renderedBoundingBox: function( options ){
	    var bb = this.boundingBox( options );
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();

	    var x1 = bb.x1 * zoom + pan.x;
	    var x2 = bb.x2 * zoom + pan.x;
	    var y1 = bb.y1 * zoom + pan.y;
	    var y2 = bb.y2 * zoom + pan.y;

	    return {
	      x1: x1,
	      x2: x2,
	      y1: y1,
	      y2: y2,
	      w: x2 - x1,
	      h: y2 - y1
	    };
	  },

	  updateCompoundBounds: function(){
	    var cy = this.cy();

	    if( !cy.styleEnabled() || !cy.hasCompoundNodes() ){ return cy.collection(); } // save cycles for non compound graphs or when style disabled

	    var updated = [];

	    function update( parent ){
	      var children = parent.children();
	      var style = parent._private.style;
	      var includeLabels = style['compound-sizing-wrt-labels'].value === 'include';
	      var bb = children.boundingBox({ includeLabels: includeLabels, includeEdges: true });
	      var padding = {
	        top: style['padding-top'].pfValue,
	        bottom: style['padding-bottom'].pfValue,
	        left: style['padding-left'].pfValue,
	        right: style['padding-right'].pfValue
	      };
	      var pos = parent._private.position;
	      var didUpdate = false;

	      if( style['width'].value === 'auto' ){
	        parent._private.autoWidth = bb.w;
	        pos.x = (bb.x1 + bb.x2 - padding.left + padding.right)/2;
	        didUpdate = true;
	      }

	      if( style['height'].value === 'auto' ){
	        parent._private.autoHeight = bb.h;
	        pos.y = (bb.y1 + bb.y2 - padding.top + padding.bottom)/2;
	        didUpdate = true;
	      }

	      if( didUpdate ){
	        updated.push( parent );
	      }
	    }

	    // go up, level by level
	    var eles = this.parent();
	    while( eles.nonempty() ){

	      // update each parent node in this level
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        update( ele );
	      }

	      // next level
	      eles = eles.parent();
	    }

	    // return changed
	    return this.spawn( updated );
	  },

	  // get the bounding box of the elements (in raw model position)
	  boundingBox: function( options ){
	    var eles = this;
	    var cy = eles._private.cy;
	    var cy_p = cy._private;
	    var styleEnabled = cy_p.styleEnabled;

	    options = options || util.staticEmptyObject();

	    var includeNodes = options.includeNodes === undefined ? true : options.includeNodes;
	    var includeEdges = options.includeEdges === undefined ? true : options.includeEdges;
	    var includeLabels = options.includeLabels === undefined ? true : options.includeLabels;

	    // recalculate projections etc
	    if( styleEnabled ){
	      cy_p.renderer.recalculateRenderedStyle( this );
	    }

	    var x1 = Infinity;
	    var x2 = -Infinity;
	    var y1 = Infinity;
	    var y2 = -Infinity;

	    // find bounds of elements
	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var _p = ele._private;
	      var style = _p.style;
	      var display = styleEnabled ? _p.style['display'].value : 'element';
	      var isNode = _p.group === 'nodes';
	      var ex1, ex2, ey1, ey2, x, y;
	      var includedEle = false;

	      if( display === 'none' ){ continue; } // then ele doesn't take up space

	      if( isNode && includeNodes ){
	        includedEle = true;

	        var pos = _p.position;
	        x = pos.x;
	        y = pos.y;
	        var w = ele.outerWidth();
	        var halfW = w/2;
	        var h = ele.outerHeight();
	        var halfH = h/2;

	        // handle node dimensions
	        /////////////////////////

	        ex1 = x - halfW;
	        ex2 = x + halfW;
	        ey1 = y - halfH;
	        ey2 = y + halfH;

	        x1 = ex1 < x1 ? ex1 : x1;
	        x2 = ex2 > x2 ? ex2 : x2;
	        y1 = ey1 < y1 ? ey1 : y1;
	        y2 = ey2 > y2 ? ey2 : y2;

	      } else if( ele.isEdge() && includeEdges ){
	        includedEle = true;

	        var n1 = _p.source;
	        var n1_p = n1._private;
	        var n1pos = n1_p.position;

	        var n2 = _p.target;
	        var n2_p = n2._private;
	        var n2pos = n2_p.position;


	        // handle edge dimensions (rough box estimate)
	        //////////////////////////////////////////////

	        var rstyle = _p.rstyle || {};
	        var w = 0;
	        var wHalf = 0;

	        if( styleEnabled ){
	          w = style['width'].pfValue;
	          wHalf = w/2;
	        }

	        ex1 = n1pos.x;
	        ex2 = n2pos.x;
	        ey1 = n1pos.y;
	        ey2 = n2pos.y;

	        if( ex1 > ex2 ){
	          var temp = ex1;
	          ex1 = ex2;
	          ex2 = temp;
	        }

	        if( ey1 > ey2 ){
	          var temp = ey1;
	          ey1 = ey2;
	          ey2 = temp;
	        }

	        // take into account edge width
	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;

	        x1 = ex1 < x1 ? ex1 : x1;
	        x2 = ex2 > x2 ? ex2 : x2;
	        y1 = ey1 < y1 ? ey1 : y1;
	        y2 = ey2 > y2 ? ey2 : y2;

	        // handle points along edge (sanity check)
	        //////////////////////////////////////////

	        if( styleEnabled ){
	          var pts = rstyle.bezierPts || rstyle.linePts || [];

	          for( var j = 0; j < pts.length; j++ ){
	            var pt = pts[j];

	            ex1 = pt.x - wHalf;
	            ex2 = pt.x + wHalf;
	            ey1 = pt.y - wHalf;
	            ey2 = pt.y + wHalf;

	            x1 = ex1 < x1 ? ex1 : x1;
	            x2 = ex2 > x2 ? ex2 : x2;
	            y1 = ey1 < y1 ? ey1 : y1;
	            y2 = ey2 > y2 ? ey2 : y2;
	          }
	        }

	        // precise haystacks (sanity check)
	        ///////////////////////////////////

	        if( styleEnabled && style['curve-style'].strValue === 'haystack' ){
	          var hpts = rstyle.haystackPts;

	          ex1 = hpts[0].x;
	          ey1 = hpts[0].y;
	          ex2 = hpts[1].x;
	          ey2 = hpts[1].y;

	          if( ex1 > ex2 ){
	            var temp = ex1;
	            ex1 = ex2;
	            ex2 = temp;
	          }

	          if( ey1 > ey2 ){
	            var temp = ey1;
	            ey1 = ey2;
	            ey2 = temp;
	          }

	          x1 = ex1 < x1 ? ex1 : x1;
	          x2 = ex2 > x2 ? ex2 : x2;
	          y1 = ey1 < y1 ? ey1 : y1;
	          y2 = ey2 > y2 ? ey2 : y2;
	        }

	      } // edges


	      // handle label dimensions
	      //////////////////////////

	      if( styleEnabled ){

	        var _p = ele._private;
	        var style = _p.style;
	        var rstyle = _p.rstyle;
	        var label = style['label'].strValue;
	        var fontSize = style['font-size'];
	        var halign = style['text-halign'];
	        var valign = style['text-valign'];
	        var labelWidth = rstyle.labelWidth;
	        var labelHeight = rstyle.labelHeight;
	        var labelX = rstyle.labelX;
	        var labelY = rstyle.labelY;
	        var isEdge = ele.isEdge();
	        var autorotate = style['edge-text-rotation'].strValue === 'autorotate';

	        if( includeLabels && label && fontSize && labelHeight != null && labelWidth != null && labelX != null && labelY != null && halign && valign ){
	          var lh = labelHeight;
	          var lw = labelWidth;
	          var lx1, lx2, ly1, ly2;

	          if( isEdge ){
	            lx1 = labelX - lw/2;
	            lx2 = labelX + lw/2;
	            ly1 = labelY - lh/2;
	            ly2 = labelY + lh/2;

	            if( autorotate ){
	              var theta = _p.rscratch.labelAngle;
	              var cos = Math.cos( theta );
	              var sin = Math.sin( theta );

	              var rotate = function( x, y ){
	                x = x - labelX;
	                y = y - labelY;

	                return {
	                  x: x*cos - y*sin + labelX,
	                  y: x*sin + y*cos + labelY
	                };
	              };

	              var px1y1 = rotate( lx1, ly1 );
	              var px1y2 = rotate( lx1, ly2 );
	              var px2y1 = rotate( lx2, ly1 );
	              var px2y2 = rotate( lx2, ly2 );

	              lx1 = Math.min( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
	              lx2 = Math.max( px1y1.x, px1y2.x, px2y1.x, px2y2.x );
	              ly1 = Math.min( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
	              ly2 = Math.max( px1y1.y, px1y2.y, px2y1.y, px2y2.y );
	            }
	          } else {
	            switch( halign.value ){
	              case 'left':
	                lx1 = labelX - lw;
	                lx2 = labelX;
	                break;

	              case 'center':
	                lx1 = labelX - lw/2;
	                lx2 = labelX + lw/2;
	                break;

	              case 'right':
	                lx1 = labelX;
	                lx2 = labelX + lw;
	                break;
	            }

	            switch( valign.value ){
	              case 'top':
	                ly1 = labelY - lh;
	                ly2 = labelY;
	                break;

	              case 'center':
	                ly1 = labelY - lh/2;
	                ly2 = labelY + lh/2;
	                break;

	              case 'bottom':
	                ly1 = labelY;
	                ly2 = labelY + lh;
	                break;
	            }
	          }

	          x1 = lx1 < x1 ? lx1 : x1;
	          x2 = lx2 > x2 ? lx2 : x2;
	          y1 = ly1 < y1 ? ly1 : y1;
	          y2 = ly2 > y2 ? ly2 : y2;
	        }
	      } // style enabled for labels
	    } // for

	    var noninf = function(x){
	      if( x === Infinity || x === -Infinity ){
	        return 0;
	      }

	      return x;
	    };

	    x1 = noninf(x1);
	    x2 = noninf(x2);
	    y1 = noninf(y1);
	    y2 = noninf(y2);

	    return {
	      x1: x1,
	      x2: x2,
	      y1: y1,
	      y2: y2,
	      w: x2 - x1,
	      h: y2 - y1
	    };
	  }
	});

	var defineDimFns = function( opts ){
	  opts.uppercaseName = util.capitalize( opts.name );
	  opts.autoName = 'auto' + opts.uppercaseName;
	  opts.labelName = 'label' + opts.uppercaseName;
	  opts.outerName = 'outer' + opts.uppercaseName;
	  opts.uppercaseOuterName = util.capitalize( opts.outerName );

	  fn[ opts.name ] = function dimImpl(){
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if( ele ){
	      if( styleEnabled ){
	        var d = _p.style[ opts.name ];

	        switch( d.strValue ){
	          case 'auto':
	            return _p[ opts.autoName ] || 0;
	          case 'label':
	            return _p.rstyle[ opts.labelName ] || 0;
	          default:
	            return d.pfValue;
	        }
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn[ 'outer' + opts.uppercaseName ] = function outerDimImpl(){
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if( ele ){
	      if( styleEnabled ){
	        var style = _p.style;
	        var dim = ele[ opts.name ]();
	        var border = style['border-width'].pfValue;
	        var padding = style[ opts.paddings[0] ].pfValue + style[ opts.paddings[1] ].pfValue;

	        return dim + border + padding;
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn[ 'rendered' + opts.uppercaseName ] = function renderedDimImpl(){
	    var ele = this[0];

	    if( ele ){
	      var d = ele[ opts.name ]();
	      return d * this.cy().zoom();
	    }
	  };

	  fn[ 'rendered' + opts.uppercaseOuterName ] = function renderedOuterDimImpl(){
	    var ele = this[0];

	    if( ele ){
	      var od = ele[ opts.outerName ]();
	      return od * this.cy().zoom();
	    }
	  };
	};

	defineDimFns({
	  name: 'width',
	  paddings: ['padding-left', 'padding-right']
	});

	defineDimFns({
	  name: 'height',
	  paddings: ['padding-top', 'padding-bottom']
	});

	// aliases
	fn.modelPosition = fn.point = fn.position;
	fn.modelPositions = fn.points = fn.positions;
	fn.renderedPoint = fn.renderedPosition;
	fn.relativePoint = fn.relativePosition;
	fn.boundingbox = fn.boundingBox;
	fn.renderedBoundingbox = fn.renderedBoundingBox;

	module.exports = elesfn;

	},{"../define":41,"../is":77,"../util":94}],19:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	// represents a node or an edge
	var Element = function(cy, params, restore){
	  if( !(this instanceof Element) ){
	    return new Element(cy, params, restore);
	  }

	  var self = this;
	  restore = (restore === undefined || restore ? true : false);

	  if( cy === undefined || params === undefined || !is.core(cy) ){
	    util.error('An element must have a core reference and parameters set');
	    return;
	  }

	  var group = params.group;

	  // try to automatically infer the group if unspecified
	  if( group == null ){
	    if( params.data.source != null && params.data.target != null ){
	      group = 'edges';
	    } else {
	      group = 'nodes';
	    }
	  }

	  // validate group
	  if( group !== 'nodes' && group !== 'edges' ){
	    util.error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
	    return;
	  }

	  // make the element array-like, just like a collection
	  this.length = 1;
	  this[0] = this;

	  // NOTE: when something is added here, add also to ele.json()
	  this._private = {
	    cy: cy,
	    single: true, // indicates this is an element
	    data: params.data || {}, // data object
	    position: params.position || {}, // (x, y) position pair
	    autoWidth: undefined, // width and height of nodes calculated by the renderer when set to special 'auto' value
	    autoHeight: undefined,
	    listeners: [], // array of bound listeners
	    group: group, // string; 'nodes' or 'edges'
	    style: {}, // properties as set by the style
	    rstyle: {}, // properties for style sent from the renderer to the core
	    styleCxts: [], // applied style contexts from the styler
	    removed: true, // whether it's inside the vis; true if removed (set true here since we call restore)
	    selected: params.selected ? true : false, // whether it's selected
	    selectable: params.selectable === undefined ? true : ( params.selectable ? true : false ), // whether it's selectable
	    locked: params.locked ? true : false, // whether the element is locked (cannot be moved)
	    grabbed: false, // whether the element is grabbed by the mouse; renderer sets this privately
	    grabbable: params.grabbable === undefined ? true : ( params.grabbable ? true : false ), // whether the element can be grabbed
	    active: false, // whether the element is active from user interaction
	    classes: {}, // map ( className => true )
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    rscratch: {}, // object in which the renderer can store information
	    scratch: params.scratch || {}, // scratch objects
	    edges: [], // array of connected edges
	    children: [] // array of children
	  };

	  // renderedPosition overrides if specified
	  if( params.renderedPosition ){
	    var rpos = params.renderedPosition;
	    var pan = cy.pan();
	    var zoom = cy.zoom();

	    this._private.position = {
	      x: (rpos.x - pan.x)/zoom,
	      y: (rpos.y - pan.y)/zoom
	    };
	  }

	  if( is.string(params.classes) ){
	    var classes = params.classes.split(/\s+/);
	    for( var i = 0, l = classes.length; i < l; i++ ){
	      var cls = classes[i];
	      if( !cls || cls === '' ){ continue; }

	      self._private.classes[cls] = true;
	    }
	  }

	  if( params.style || params.css ){
	    cy.style().applyBypass( this, params.style || params.css );
	  }

	  if( restore === undefined || restore ){
	    this.restore();
	  }

	};

	module.exports = Element;

	},{"../is":77,"../util":94}],20:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');

	var elesfn = ({
	  on: define.on(), // .on( events [, selector] [, data], handler)
	  one: define.on({ unbindSelfOnTrigger: true }),
	  once: define.on({ unbindAllBindersOnTrigger: true }),
	  off: define.off(), // .off( events [, selector] [, handler] )
	  trigger: define.trigger(), // .trigger( events [, extraParams] )

	  rtrigger: function(event, extraParams){ // for internal use only
	    if( this.length === 0 ){ return; } // empty collections don't need to notify anything

	    // notify renderer
	    this.cy().notify({
	      type: event,
	      collection: this
	    });

	    this.trigger(event, extraParams);
	    return this;
	  }
	});

	// aliases:
	define.eventAliasesOn( elesfn );

	module.exports = elesfn;

	},{"../define":41}],21:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var Selector = _dereq_('../selector');

	var elesfn = ({
	  nodes: function( selector ){
	    return this.filter(function(i, element){
	      return element.isNode();
	    }).filter(selector);
	  },

	  edges: function( selector ){
	    return this.filter(function(i, element){
	      return element.isEdge();
	    }).filter(selector);
	  },

	  filter: function( filter ){
	    if( is.fn(filter) ){
	      var elements = [];

	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[i];

	        if( filter.apply(ele, [i, ele]) ){
	          elements.push(ele);
	        }
	      }

	      return this.spawn(elements);

	    } else if( is.string(filter) || is.elementOrCollection(filter) ){
	      return Selector(filter).filter(this);

	    } else if( filter === undefined ){
	      return this;
	    }

	    return this.spawn(); // if not handled by above, give 'em an empty collection
	  },

	  not: function( toRemove ){
	    if( !toRemove ){
	      return this;
	    } else {

	      if( is.string( toRemove ) ){
	        toRemove = this.filter( toRemove );
	      }

	      var elements = [];

	      for( var i = 0; i < this.length; i++ ){
	        var element = this[i];

	        var remove = toRemove._private.ids[ element.id() ];
	        if( !remove ){
	          elements.push( element );
	        }
	      }

	      return this.spawn( elements );
	    }

	  },

	  absoluteComplement: function(){
	    var cy = this._private.cy;

	    return cy.elements().not( this );
	  },

	  intersect: function( other ){
	    // if a selector is specified, then filter by it instead
	    if( is.string(other) ){
	      var selector = other;
	      return this.filter( selector );
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;
	    var col1Smaller = this.length < other.length;
	    // var ids1 = col1Smaller ? col1._private.ids : col2._private.ids;
	    var ids2 = col1Smaller ? col2._private.ids : col1._private.ids;
	    var col = col1Smaller ? col1 : col2;

	    for( var i = 0; i < col.length; i++ ){
	      var id = col[i]._private.data.id;
	      var ele = ids2[ id ];

	      if( ele ){
	        elements.push( ele );
	      }
	    }

	    return this.spawn( elements );
	  },

	  xor: function( other ){
	    var cy = this._private.cy;

	    if( is.string(other) ){
	      other = cy.$( other );
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function( col, other ){

	      for( var i = 0; i < col.length; i++ ){
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other._private.ids[ id ];

	        if( !inOther ){
	          elements.push( ele );
	        }
	      }

	    };

	    add( col1, col2 );
	    add( col2, col1 );

	    return this.spawn( elements );
	  },

	  diff: function( other ){
	    var cy = this._private.cy;

	    if( is.string(other) ){
	      other = cy.$( other );
	    }

	    var left = [];
	    var right = [];
	    var both = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function( col, other, retEles ){

	      for( var i = 0; i < col.length; i++ ){
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other._private.ids[ id ];

	        if( inOther ){
	          both.push( ele );
	        } else {
	          retEles.push( ele );
	        }
	      }

	    };

	    add( col1, col2, left );
	    add( col2, col1, right );

	    return {
	      left: this.spawn( left, { unique: true } ),
	      right: this.spawn( right, { unique: true } ),
	      both: this.spawn( both, { unique: true } )
	    };
	  },

	  add: function( toAdd ){
	    var cy = this._private.cy;

	    if( !toAdd ){
	      return this;
	    }

	    if( is.string(toAdd) ){
	      var selector = toAdd;
	      toAdd = cy.elements(selector);
	    }

	    var elements = [];

	    for( var i = 0; i < this.length; i++ ){
	      elements.push( this[i] );
	    }

	    for( var i = 0; i < toAdd.length; i++ ){

	      var add = !this._private.ids[ toAdd[i].id() ];
	      if( add ){
	        elements.push( toAdd[i] );
	      }
	    }

	    return this.spawn(elements);
	  },

	  // in place merge on calling collection
	  merge: function( toAdd ){
	    var _p = this._private;
	    var cy = _p.cy;

	    if( !toAdd ){
	      return this;
	    }

	    if( is.string(toAdd) ){
	      var selector = toAdd;
	      toAdd = cy.elements(selector);
	    }

	    for( var i = 0; i < toAdd.length; i++ ){
	      var toAddEle = toAdd[i];
	      var id = toAddEle.id();
	      var add = !_p.ids[ id ];

	      if( add ){
	        var index = this.length++;

	        this[ index ] = toAddEle;
	        _p.ids[ id ] = toAddEle;
	        _p.indexes[ id ] = index;
	      }
	    }

	    return this; // chaining
	  },

	  // remove single ele in place in calling collection
	  unmergeOne: function( ele ){
	    ele = ele[0];

	    var _p = this._private;
	    var id = ele.id();
	    var i = _p.indexes[ id ];

	    if( i == null ){
	      return this; // no need to remove
	    }

	    // remove ele
	    this[i] = undefined;
	    _p.ids[ id ] = undefined;
	    _p.indexes[ id ] = undefined;

	    var unmergedLastEle = i === this.length - 1;

	    // replace empty spot with last ele in collection
	    if( this.length > 1 && !unmergedLastEle ){
	      var lastEleI = this.length - 1;
	      var lastEle = this[ lastEleI ];

	      this[ lastEleI ] = undefined;
	      this[i] = lastEle;
	      _p.indexes[ lastEle.id() ] = i;
	    }

	    // the collection is now 1 ele smaller
	    this.length--;

	    return this;
	  },

	  // remove eles in place on calling collection
	  unmerge: function( toRemove ){
	    var cy = this._private.cy;

	    if( !toRemove ){
	      return this;
	    }

	    if( is.string(toRemove) ){
	      var selector = toRemove;
	      toRemove = cy.elements(selector);
	    }

	    for( var i = 0; i < toRemove.length; i++ ){
	      this.unmergeOne( toRemove[i] );
	    }

	    return this; // chaining
	  },

	  map: function( mapFn, thisArg ){
	    var arr = [];
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var ret = thisArg ? mapFn.apply( thisArg, [ele, i, eles] ) : mapFn( ele, i, eles );

	      arr.push( ret );
	    }

	    return arr;
	  },

	  stdFilter: function( fn, thisArg ){
	    var filterEles = [];
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var include = thisArg ? fn.apply( thisArg, [ele, i, eles] ) : fn( ele, i, eles );

	      if( include ){
	        filterEles.push( ele );
	      }
	    }

	    return this.spawn( filterEles );
	  },

	  max: function( valFn, thisArg ){
	    var max = -Infinity;
	    var maxEle;
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

	      if( val > max ){
	        max = val;
	        maxEle = ele;
	      }
	    }

	    return {
	      value: max,
	      ele: maxEle
	    };
	  },

	  min: function( valFn, thisArg ){
	    var min = Infinity;
	    var minEle;
	    var eles = this;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply( thisArg, [ ele, i, eles ] ) : valFn( ele, i, eles );

	      if( val < min ){
	        min = val;
	        minEle = ele;
	      }
	    }

	    return {
	      value: min,
	      ele: minEle
	    };
	  }
	});

	// aliases
	var fn = elesfn;
	fn['u'] = fn['|'] = fn['+'] = fn.union = fn.or = fn.add;
	fn['\\'] = fn['!'] = fn['-'] = fn.difference = fn.relativeComplement = fn.subtract = fn.not;
	fn['n'] = fn['&'] = fn['.'] = fn.and = fn.intersection = fn.intersect;
	fn['^'] = fn['(+)'] = fn['(-)'] = fn.symmetricDifference = fn.symdiff = fn.xor;
	fn.fnFilter = fn.filterFn = fn.stdFilter;
	fn.complement = fn.abscomp = fn.absoluteComplement;

	module.exports = elesfn;

	},{"../is":77,"../selector":81}],22:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = ({
	  isNode: function(){
	    return this.group() === 'nodes';
	  },

	  isEdge: function(){
	    return this.group() === 'edges';
	  },

	  isLoop: function(){
	    return this.isEdge() && this.source().id() === this.target().id();
	  },

	  isSimple: function(){
	    return this.isEdge() && this.source().id() !== this.target().id();
	  },

	  group: function(){
	    var ele = this[0];

	    if( ele ){
	      return ele._private.group;
	    }
	  }
	});


	module.exports = elesfn;

	},{}],23:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var Element = _dereq_('./element');

	// factory for generating edge ids when no id is specified for a new element
	var idFactory = {
	  prefix: 'ele',
	  id: 0,
	  generate: function(cy, element, tryThisId){
	    var json = is.element( element ) ? element._private : element;
	    var id = tryThisId != null ? tryThisId : this.prefix + this.id;

	    if( cy.getElementById(id).empty() ){
	      this.id++; // we've used the current id, so move it up
	    } else { // otherwise keep trying successive unused ids
	      while( !cy.getElementById(id).empty() ){
	        id = this.prefix + ( ++this.id );
	      }
	    }

	    return id;
	  }
	};

	// represents a set of nodes, edges, or both together
	var Collection = function(cy, elements, options){
	  if( !(this instanceof Collection) ){
	    return new Collection(cy, elements, options);
	  }

	  if( cy === undefined || !is.core(cy) ){
	    util.error('A collection must have a reference to the core');
	    return;
	  }

	  var ids = {};
	  var indexes = {};
	  var createdElements = false;

	  if( !elements ){
	    elements = [];
	  } else if( elements.length > 0 && is.plainObject( elements[0] ) && !is.element( elements[0] ) ){
	    createdElements = true;

	    // make elements from json and restore all at once later
	    var eles = [];
	    var elesIds = {};

	    for( var i = 0, l = elements.length; i < l; i++ ){
	      var json = elements[i];

	      if( json.data == null ){
	        json.data = {};
	      }

	      var data = json.data;

	      // make sure newly created elements have valid ids
	      if( data.id == null ){
	        data.id = idFactory.generate( cy, json );
	      } else if( cy.getElementById( data.id ).length !== 0 || elesIds[ data.id ] ){
	        continue; // can't create element if prior id already exists
	      }

	      var ele = new Element( cy, json, false );
	      eles.push( ele );
	      elesIds[ data.id ] = true;
	    }

	    elements = eles;
	  }

	  this.length = 0;

	  for( var i = 0, l = elements.length; i < l; i++ ){
	    var element = elements[i];
	    if( !element ){  continue; }

	    var id = element._private.data.id;

	    if( !options || (options.unique && !ids[ id ] ) ){
	      ids[ id ] = element;
	      indexes[ id ] = this.length;

	      this[ this.length ] = element;
	      this.length++;
	    }
	  }

	  this._private = {
	    cy: cy,
	    ids: ids,
	    indexes: indexes
	  };

	  // restore the elements if we created them from json
	  if( createdElements ){
	    this.restore();
	  }
	};

	// Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////

	// keep the prototypes in sync (an element has the same functions as a collection)
	// and use elefn and elesfn as shorthands to the prototypes
	var elesfn = Element.prototype = Collection.prototype;

	elesfn.instanceString = function(){
	  return 'collection';
	};

	elesfn.spawn = function( cy, eles, opts ){
	  if( !is.core(cy) ){ // cy is optional
	    opts = eles;
	    eles = cy;
	    cy = this.cy();
	  }

	  return new Collection( cy, eles, opts );
	};

	elesfn.cy = function(){
	  return this._private.cy;
	};

	elesfn.element = function(){
	  return this[0];
	};

	elesfn.collection = function(){
	  if( is.collection(this) ){
	    return this;
	  } else { // an element
	    return new Collection( this._private.cy, [this] );
	  }
	};

	elesfn.unique = function(){
	  return new Collection( this._private.cy, this, { unique: true } );
	};

	elesfn.getElementById = function( id ){
	  var cy = this._private.cy;
	  var ele = this._private.ids[ id ];

	  return ele ? ele : new Collection(cy); // get ele or empty collection
	};

	elesfn.json = function( obj ){
	  var ele = this.element();
	  var cy = this.cy();

	  if( ele == null && obj ){ return this; } // can't set to no eles

	  if( ele == null ){ return undefined; } // can't get from no eles

	  var p = ele._private;

	  if( is.plainObject(obj) ){ // set

	    cy.startBatch();

	    if( obj.data ){
	      ele.data( obj.data );
	    }

	    if( obj.position ){
	      ele.position( obj.position );
	    }

	    // ignore group -- immutable

	    var checkSwitch = function( k, trueFnName, falseFnName ){
	      var obj_k = obj[k];

	      if( obj_k != null && obj_k !== p[k] ){
	        if( obj_k ){
	          ele[ trueFnName ]();
	        } else {
	          ele[ falseFnName ]();
	        }
	      }
	    };

	    checkSwitch( 'removed', 'remove', 'restore' );

	    checkSwitch( 'selected', 'select', 'unselect' );

	    checkSwitch( 'selectable', 'selectify', 'unselectify' );

	    checkSwitch( 'locked', 'lock', 'unlock' );

	    checkSwitch( 'grabbable', 'grabify', 'ungrabify' );

	    if( obj.classes != null ){
	      ele.classes( obj.classes );
	    }

	    cy.endBatch();

	    return this;

	  } else if( obj === undefined ){ // get

	    var json = {
	      data: util.copy( p.data ),
	      position: util.copy( p.position ),
	      group: p.group,
	      removed: p.removed,
	      selected: p.selected,
	      selectable: p.selectable,
	      locked: p.locked,
	      grabbable: p.grabbable,
	      classes: null
	    };

	    var classes = [];
	    for( var cls in p.classes ){
	      if( p.classes[cls] ){
	        classes.push(cls);
	      }
	    }
	    json.classes = classes.join(' ');

	    return json;
	  }
	};

	elesfn.jsons = function(){
	  var jsons = [];

	  for( var i = 0; i < this.length; i++ ){
	    var ele = this[i];
	    var json = ele.json();

	    jsons.push( json );
	  }

	  return jsons;
	};

	elesfn.clone = function(){
	  var cy = this.cy();
	  var elesArr = [];

	  for( var i = 0; i < this.length; i++ ){
	    var ele = this[i];
	    var json = ele.json();
	    var clone = new Element(cy, json, false); // NB no restore

	    elesArr.push( clone );
	  }

	  return new Collection( cy, elesArr );
	};
	elesfn.copy = elesfn.clone;

	elesfn.restore = function( notifyRenderer ){
	  var self = this;
	  var restored = [];
	  var cy = self.cy();

	  if( notifyRenderer === undefined ){
	    notifyRenderer = true;
	  }

	  // create arrays of nodes and edges, since we need to
	  // restore the nodes first
	  var elements = [];
	  var nodes = [], edges = [];
	  var numNodes = 0;
	  var numEdges = 0;
	  for( var i = 0, l = self.length; i < l; i++ ){
	    var ele = self[i];

	    // keep nodes first in the array and edges after
	    if( ele.isNode() ){ // put to front of array if node
	      nodes.push( ele );
	      numNodes++;
	    } else { // put to end of array if edge
	      edges.push( ele );
	      numEdges++;
	    }
	  }

	  elements = nodes.concat( edges );

	  // now, restore each element
	  for( var i = 0, l = elements.length; i < l; i++ ){
	    var ele = elements[i];

	    if( !ele.removed() ){
	      // don't need to do anything
	      continue;
	    }

	    var _private = ele._private;
	    var data = _private.data;

	    // set id and validate
	    if( data.id === undefined ){
	      data.id = idFactory.generate( cy, ele );

	    } else if( is.number(data.id) ){
	      data.id = '' + data.id; // now it's a string

	    } else if( is.emptyString(data.id) || !is.string(data.id) ){
	      util.error('Can not create element with invalid string ID `' + data.id + '`');

	      // can't create element if it has empty string as id or non-string id
	      continue;
	    } else if( cy.getElementById( data.id ).length !== 0 ){
	      util.error('Can not create second element with ID `' + data.id + '`');

	      // can't create element if one already has that id
	      continue;
	    }

	    var id = data.id; // id is finalised, now let's keep a ref

	    if( ele.isNode() ){ // extra checks for nodes
	      var node = ele;
	      var pos = _private.position;

	      // make sure the nodes have a defined position

	      if( pos.x == null ){
	        pos.x = 0;
	      }

	      if( pos.y == null ){
	        pos.y = 0;
	      }
	    }

	    if( ele.isEdge() ){ // extra checks for edges

	      var edge = ele;
	      var fields = ['source', 'target'];
	      var fieldsLength = fields.length;
	      var badSourceOrTarget = false;
	      for(var j = 0; j < fieldsLength; j++){

	        var field = fields[j];
	        var val = data[field];

	        if( is.number(val) ){
	          val = data[field] = '' + data[field]; // now string
	        }

	        if( val == null || val === '' ){
	          // can't create if source or target is not defined properly
	          util.error('Can not create edge `' + id + '` with unspecified ' + field);
	          badSourceOrTarget = true;
	        } else if( cy.getElementById(val).empty() ){
	          // can't create edge if one of its nodes doesn't exist
	          util.error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
	          badSourceOrTarget = true;
	        }
	      }

	      if( badSourceOrTarget ){ continue; } // can't create this

	      var src = cy.getElementById( data.source );
	      var tgt = cy.getElementById( data.target );

	      src._private.edges.push( edge );
	      tgt._private.edges.push( edge );

	      edge._private.source = src;
	      edge._private.target = tgt;

	    } // if is edge

	    // create mock ids map for element so it can be used like collections
	    _private.ids = {};
	    _private.ids[ id ] = ele;

	    _private.removed = false;
	    cy.addToPool( ele );

	    restored.push( ele );
	  } // for each element

	  // do compound node sanity checks
	  for( var i = 0; i < numNodes; i++ ){ // each node
	    var node = elements[i];
	    var data = node._private.data;

	    if( is.number(data.parent) ){ // then automake string
	      data.parent = '' + data.parent;
	    }

	    var parentId = data.parent;

	    var specifiedParent = parentId != null;

	    if( specifiedParent ){
	      var parent = cy.getElementById( parentId );

	      if( parent.empty() ){
	        // non-existant parent; just remove it
	        data.parent = undefined;
	      } else {
	        var selfAsParent = false;
	        var ancestor = parent;
	        while( !ancestor.empty() ){
	          if( node.same(ancestor) ){
	            // mark self as parent and remove from data
	            selfAsParent = true;
	            data.parent = undefined; // remove parent reference

	            // exit or we loop forever
	            break;
	          }

	          ancestor = ancestor.parent();
	        }

	        if( !selfAsParent ){
	          // connect with children
	          parent[0]._private.children.push( node );
	          node._private.parent = parent[0];

	          // let the core know we have a compound graph
	          cy._private.hasCompoundNodes = true;
	        }
	      } // else
	    } // if specified parent
	  } // for each node

	  restored = new Collection( cy, restored );
	  if( restored.length > 0 ){

	    var toUpdateStyle = restored.add( restored.connectedNodes() ).add( restored.parent() );
	    toUpdateStyle.updateStyle( notifyRenderer );

	    if( notifyRenderer ){
	      restored.rtrigger('add');
	    } else {
	      restored.trigger('add');
	    }
	  }

	  return self; // chainability
	};

	elesfn.removed = function(){
	  var ele = this[0];
	  return ele && ele._private.removed;
	};

	elesfn.inside = function(){
	  var ele = this[0];
	  return ele && !ele._private.removed;
	};

	elesfn.remove = function( notifyRenderer ){
	  var self = this;
	  var removed = [];
	  var elesToRemove = [];
	  var elesToRemoveIds = {};
	  var cy = self._private.cy;

	  if( notifyRenderer === undefined ){
	    notifyRenderer = true;
	  }

	  // add connected edges
	  function addConnectedEdges(node){
	    var edges = node._private.edges;
	    for( var i = 0; i < edges.length; i++ ){
	      add( edges[i] );
	    }
	  }


	  // add descendant nodes
	  function addChildren(node){
	    var children = node._private.children;

	    for( var i = 0; i < children.length; i++ ){
	      add( children[i] );
	    }
	  }

	  function add( ele ){
	    var alreadyAdded =  elesToRemoveIds[ ele.id() ];
	    if( alreadyAdded ){
	      return;
	    } else {
	      elesToRemoveIds[ ele.id() ] = true;
	    }

	    if( ele.isNode() ){
	      elesToRemove.push( ele ); // nodes are removed last

	      addConnectedEdges( ele );
	      addChildren( ele );
	    } else {
	      elesToRemove.unshift( ele ); // edges are removed first
	    }
	  }

	  // make the list of elements to remove
	  // (may be removing more than specified due to connected edges etc)

	  for( var i = 0, l = self.length; i < l; i++ ){
	    var ele = self[i];

	    add( ele );
	  }

	  function removeEdgeRef(node, edge){
	    var connectedEdges = node._private.edges;
	    for( var j = 0; j < connectedEdges.length; j++ ){
	      var connectedEdge = connectedEdges[j];

	      if( edge === connectedEdge ){
	        connectedEdges.splice( j, 1 );
	        break;
	      }
	    }
	  }

	  function removeChildRef(parent, ele){
	    ele = ele[0];
	    parent = parent[0];
	    var children = parent._private.children;

	    for( var j = 0; j < children.length; j++ ){
	      if( children[j][0] === ele[0] ){
	        children.splice(j, 1);
	        break;
	      }
	    }
	  }

	  for( var i = 0; i < elesToRemove.length; i++ ){
	    var ele = elesToRemove[i];

	    // mark as removed
	    ele._private.removed = true;

	    // remove from core pool
	    cy.removeFromPool( ele );

	    // add to list of removed elements
	    removed.push( ele );

	    if( ele.isEdge() ){ // remove references to this edge in its connected nodes
	      var src = ele.source()[0];
	      var tgt = ele.target()[0];

	      removeEdgeRef( src, ele );
	      removeEdgeRef( tgt, ele );

	    } else { // remove reference to parent
	      var parent = ele.parent();

	      if( parent.length !== 0 ){
	        removeChildRef(parent, ele);
	      }
	    }
	  }

	  // check to see if we have a compound graph or not
	  var elesStillInside = cy._private.elements;
	  cy._private.hasCompoundNodes = false;
	  for( var i = 0; i < elesStillInside.length; i++ ){
	    var ele = elesStillInside[i];

	    if( ele.isParent() ){
	      cy._private.hasCompoundNodes = true;
	      break;
	    }
	  }

	  var removedElements = new Collection( this.cy(), removed );
	  if( removedElements.size() > 0 ){
	    // must manually notify since trigger won't do this automatically once removed

	    if( notifyRenderer ){
	      this.cy().notify({
	        type: 'remove',
	        collection: removedElements
	      });
	    }

	    removedElements.trigger('remove');
	  }

	  // check for empty remaining parent nodes
	  var checkedParentId = {};
	  for( var i = 0; i < elesToRemove.length; i++ ){
	    var ele = elesToRemove[i];
	    var isNode = ele._private.group === 'nodes';
	    var parentId = ele._private.data.parent;

	    if( isNode && parentId !== undefined && !checkedParentId[ parentId ] ){
	      checkedParentId[ parentId ] = true;
	      var parent = cy.getElementById( parentId );

	      if( parent && parent.length !== 0 && !parent._private.removed && parent.children().length === 0 ){
	        parent.updateStyle();
	      }
	    }
	  }

	  return new Collection( cy, removed );
	};

	elesfn.move = function( struct ){
	  var cy = this._private.cy;

	  if( struct.source !== undefined || struct.target !== undefined ){
	    var srcId = struct.source;
	    var tgtId = struct.target;
	    var srcExists = cy.getElementById( srcId ).length > 0;
	    var tgtExists = cy.getElementById( tgtId ).length > 0;

	    if( srcExists || tgtExists ){
	      var jsons = this.jsons();

	      this.remove();

	      for( var i = 0; i < jsons.length; i++ ){
	        var json = jsons[i];

	        if( json.group === 'edges' ){
	          if( srcExists ){ json.data.source = srcId; }
	          if( tgtExists ){ json.data.target = tgtId; }
	        }
	      }

	      return cy.add( jsons );
	    }

	  } else if( struct.parent !== undefined ){ // move node to new parent
	    var parentId = struct.parent;
	    var parentExists = parentId === null || cy.getElementById( parentId ).length > 0;

	    if( parentExists ){
	      var jsons = this.jsons();
	      var descs = this.descendants();
	      var descsEtc = descs.merge( descs.add(this).connectedEdges() );

	      this.remove(); // NB: also removes descendants and their connected edges

	      for( var i = 0; i < this.length; i++ ){
	        var json = jsons[i];

	        if( json.group === 'nodes' ){
	          json.data.parent = parentId === null ? undefined : parentId;
	        }
	      }
	    }

	    return cy.add( jsons ).merge( descsEtc.restore() );
	  }

	  return this; // if nothing done
	};

	[
	  _dereq_('./algorithms'),
	  _dereq_('./animation'),
	  _dereq_('./class'),
	  _dereq_('./comparators'),
	  _dereq_('./compounds'),
	  _dereq_('./data'),
	  _dereq_('./degree'),
	  _dereq_('./dimensions'),
	  _dereq_('./events'),
	  _dereq_('./filter'),
	  _dereq_('./group'),
	  _dereq_('./index'),
	  _dereq_('./iteration'),
	  _dereq_('./layout'),
	  _dereq_('./style'),
	  _dereq_('./switch-functions'),
	  _dereq_('./traversing')
	].forEach(function( props ){
	  util.extend( elesfn, props );
	});

	module.exports = Collection;

	},{"../is":77,"../util":94,"./algorithms":9,"./animation":12,"./class":13,"./comparators":14,"./compounds":15,"./data":16,"./degree":17,"./dimensions":18,"./element":19,"./events":20,"./filter":21,"./group":22,"./index":23,"./iteration":24,"./layout":25,"./style":26,"./switch-functions":27,"./traversing":28}],24:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var zIndexSort = _dereq_('./zsort');

	var elesfn = ({
	  each: function(fn){
	    if( is.fn(fn) ){
	      for(var i = 0; i < this.length; i++){
	        var ele = this[i];
	        var ret = fn.apply( ele, [ i, ele ] );

	        if( ret === false ){ break; } // exit each early on return false
	      }
	    }
	    return this;
	  },

	  forEach: function(fn, thisArg){
	    if( is.fn(fn) ){

	      for(var i = 0; i < this.length; i++){
	        var ele = this[i];
	        var ret = thisArg ? fn.apply( thisArg, [ ele, i, this ] ) : fn( ele, i, this );

	        if( ret === false ){ break; } // exit each early on return false
	      }
	    }

	    return this;
	  },

	  toArray: function(){
	    var array = [];

	    for(var i = 0; i < this.length; i++){
	      array.push( this[i] );
	    }

	    return array;
	  },

	  slice: function(start, end){
	    var array = [];
	    var thisSize = this.length;

	    if( end == null ){
	      end = thisSize;
	    }

	    if( start == null ){
	      start = 0;
	    }

	    if( start < 0 ){
	      start = thisSize + start;
	    }

	    if( end < 0 ){
	      end = thisSize + end;
	    }

	    for(var i = start; i >= 0 && i < end && i < thisSize; i++){
	      array.push( this[i] );
	    }

	    return this.spawn(array);
	  },

	  size: function(){
	    return this.length;
	  },

	  eq: function(i){
	    return this[i] || this.spawn();
	  },

	  first: function(){
	    return this[0] || this.spawn();
	  },

	  last: function(){
	    return this[ this.length - 1 ] || this.spawn();
	  },

	  empty: function(){
	    return this.length === 0;
	  },

	  nonempty: function(){
	    return !this.empty();
	  },

	  sort: function( sortFn ){
	    if( !is.fn( sortFn ) ){
	      return this;
	    }

	    var sorted = this.toArray().sort( sortFn );

	    return this.spawn(sorted);
	  },

	  sortByZIndex: function(){
	    return this.sort( zIndexSort );
	  },

	  zDepth: function(){
	    var ele = this[0];
	    if( !ele ){ return undefined; }

	    // var cy = ele.cy();
	    var _p = ele._private;
	    var group = _p.group;

	    if( group === 'nodes' ){
	      var depth = _p.data.parent ? ele.parents().size() : 0;

	      if( !ele.isParent() ){
	        return Number.MAX_VALUE; // childless nodes always on top
	      }

	      return depth;
	    } else {
	      var src = _p.source;
	      var tgt = _p.target;
	      var srcDepth = src.zDepth();
	      var tgtDepth = tgt.zDepth();

	      return Math.max( srcDepth, tgtDepth, 0 ); // depth of deepest parent
	    }
	  }
	});

	module.exports = elesfn;

	},{"../is":77,"./zsort":29}],25:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');

	var elesfn = ({

	  // using standard layout options, apply position function (w/ or w/o animation)
	  layoutPositions: function( layout, options, fn ){
	    var nodes = this.nodes();
	    var cy = this.cy();

	    layout.trigger({ type: 'layoutstart', layout: layout });

	    layout.animations = [];

	    if( options.animate ){
	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[i];
	        var lastNode = i === nodes.length - 1;

	        var newPos = fn.call( node, i, node );
	        var pos = node.position();

	        if( !is.number(pos.x) || !is.number(pos.y) ){
	          node.silentPosition({ x: 0, y: 0 });
	        }

	        var ani = node.animation({
	          position: newPos,
	          duration: options.animationDuration,
	          easing: options.animationEasing,
	          step: !lastNode ? undefined : function(){
	            if( options.fit ){
	              cy.fit( options.eles, options.padding );
	            }
	          },
	          complete: !lastNode ? undefined : function(){
	            if( options.zoom != null ){
	              cy.zoom( options.zoom );
	            }

	            if( options.pan ){
	              cy.pan( options.pan );
	            }

	            if( options.fit ){
	              cy.fit( options.eles, options.padding );
	            }

	            layout.one('layoutstop', options.stop);
	            layout.trigger({ type: 'layoutstop', layout: layout });
	          }
	        });

	        layout.animations.push( ani );

	        ani.play();
	      }

	      layout.one('layoutready', options.ready);
	      layout.trigger({ type: 'layoutready', layout: layout });
	    } else {
	      nodes.positions( fn );

	      if( options.fit ){
	        cy.fit( options.eles, options.padding );
	      }

	      if( options.zoom != null ){
	        cy.zoom( options.zoom );
	      }

	      if( options.pan ){
	        cy.pan( options.pan );
	      }

	      layout.one('layoutready', options.ready);
	      layout.trigger({ type: 'layoutready', layout: layout });

	      layout.one('layoutstop', options.stop);
	      layout.trigger({ type: 'layoutstop', layout: layout });
	    }

	    return this; // chaining
	  },

	  layout: function( options ){
	    var cy = this.cy();

	    cy.layout( util.extend({}, options, {
	      eles: this
	    }) );

	    return this;
	  },

	  makeLayout: function( options ){
	    var cy = this.cy();

	    return cy.makeLayout( util.extend({}, options, {
	      eles: this
	    }) );
	  }

	});

	// aliases:
	elesfn.createLayout = elesfn.makeLayout;

	module.exports = elesfn;

	},{"../is":77,"../util":94}],26:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	var elesfn = ({

	  // fully updates (recalculates) the style for the elements
	  updateStyle: function( notifyRenderer ){
	    var cy = this._private.cy;

	    if( !cy.styleEnabled() ){ return this; }

	    if( cy._private.batchingStyle ){
	      var bEles = cy._private.batchStyleEles;

	      bEles.merge( this );

	      return this; // chaining and exit early when batching
	    }

	    var style = cy.style();
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    style.apply( this );

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

	    if( notifyRenderer ){
	      toNotify.rtrigger('style'); // let renderer know we changed style
	    } else {
	      toNotify.trigger('style'); // just fire the event
	    }
	    return this; // chaining
	  },

	  // just update the mappers in the elements' styles; cheaper than eles.updateStyle()
	  updateMappers: function( notifyRenderer ){
	    var cy = this._private.cy;
	    var style = cy.style();
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    if( !cy.styleEnabled() ){ return this; }

	    style.updateMappers( this );

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;

	    if( notifyRenderer ){
	      toNotify.rtrigger('style'); // let renderer know we changed style
	    } else {
	      toNotify.trigger('style'); // just fire the event
	    }
	    return this; // chaining
	  },

	  // get the specified css property as a rendered value (i.e. on-screen value)
	  // or get the whole rendered style if no property specified (NB doesn't allow setting)
	  renderedCss: function( property ){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return this; }

	    var ele = this[0];

	    if( ele ){
	      var renstyle = ele.cy().style().getRenderedStyle( ele );

	      if( property === undefined ){
	        return renstyle;
	      } else {
	        return renstyle[ property ];
	      }
	    }
	  },

	  // read the calculated css style of the element or override the style (via a bypass)
	  css: function( name, value ){
	    var cy = this.cy();

	    if( !cy.styleEnabled() ){ return this; }

	    var updateTransitions = false;
	    var style = cy.style();

	    if( is.plainObject(name) ){ // then extend the bypass
	      var props = name;
	      style.applyBypass( this, props, updateTransitions );

	      var updatedCompounds = this.updateCompoundBounds();
	      var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	      toNotify.rtrigger('style'); // let the renderer know we've updated style

	    } else if( is.string(name) ){

	      if( value === undefined ){ // then get the property from the style
	        var ele = this[0];

	        if( ele ){
	          return style.getStylePropertyValue( ele, name );
	        } else { // empty collection => can't get any value
	          return;
	        }

	      } else { // then set the bypass with the property value
	        style.applyBypass( this, name, value, updateTransitions );

	        var updatedCompounds = this.updateCompoundBounds();
	        var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	        toNotify.rtrigger('style'); // let the renderer know we've updated style
	      }

	    } else if( name === undefined ){
	      var ele = this[0];

	      if( ele ){
	        return style.getRawStyle( ele );
	      } else { // empty collection => can't get any value
	        return;
	      }
	    }

	    return this; // chaining
	  },

	  removeCss: function( names ){
	    var cy = this.cy();

	    if( !cy.styleEnabled() ){ return this; }

	    var updateTransitions = false;
	    var style = cy.style();
	    var eles = this;

	    if( names === undefined ){
	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        style.removeAllBypasses( ele, updateTransitions );
	      }
	    } else {
	      names = names.split(/\s+/);

	      for( var i = 0; i < eles.length; i++ ){
	        var ele = eles[i];

	        style.removeBypasses( ele, names, updateTransitions );
	      }
	    }

	    var updatedCompounds = this.updateCompoundBounds();
	    var toNotify = updatedCompounds.length > 0 ? this.add( updatedCompounds ) : this;
	    toNotify.rtrigger('style'); // let the renderer know we've updated style

	    return this; // chaining
	  },

	  show: function(){
	    this.css('display', 'element');
	    return this; // chaining
	  },

	  hide: function(){
	    this.css('display', 'none');
	    return this; // chaining
	  },

	  visible: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return true; }

	    var ele = this[0];
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if( ele ){
	      var style = ele._private.style;

	      if(
	        style['visibility'].value !== 'visible'
	        || style['display'].value !== 'element'
	      ){
	        return false;
	      }

	      if( ele._private.group === 'nodes' ){
	        if( !hasCompoundNodes ){ return true; }

	        var parents = ele._private.data.parent ? ele.parents() : null;

	        if( parents ){
	          for( var i = 0; i < parents.length; i++ ){
	            var parent = parents[i];
	            var pStyle = parent._private.style;
	            var pVis = pStyle['visibility'].value;
	            var pDis = pStyle['display'].value;

	            if( pVis !== 'visible' || pDis !== 'element' ){
	              return false;
	            }
	          }
	        }

	        return true;
	      } else {
	        var src = ele._private.source;
	        var tgt = ele._private.target;

	        return src.visible() && tgt.visible();
	      }

	    }
	  },

	  hidden: function(){
	    var ele = this[0];

	    if( ele ){
	      return !ele.visible();
	    }
	  },

	  effectiveOpacity: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return 1; }

	    var hasCompoundNodes = cy.hasCompoundNodes();
	    var ele = this[0];

	    if( ele ){
	      var _p = ele._private;
	      var parentOpacity = _p.style.opacity.value;

	      if( !hasCompoundNodes ){ return parentOpacity; }

	      var parents = !_p.data.parent ? null : ele.parents();

	      if( parents ){
	        for( var i = 0; i < parents.length; i++ ){
	          var parent = parents[i];
	          var opacity = parent._private.style.opacity.value;

	          parentOpacity = opacity * parentOpacity;
	        }
	      }

	      return parentOpacity;
	    }
	  },

	  transparent: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];
	    var hasCompoundNodes = ele.cy().hasCompoundNodes();

	    if( ele ){
	      if( !hasCompoundNodes ){
	        return ele._private.style.opacity.value === 0;
	      } else {
	        return ele.effectiveOpacity() === 0;
	      }
	    }
	  },

	  isFullAutoParent: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];

	    if( ele ){
	      var autoW = ele._private.style['width'].value === 'auto';
	      var autoH = ele._private.style['height'].value === 'auto';

	      return ele.isParent() && autoW && autoH;
	    }
	  },

	  backgrounding: function(){
	    var cy = this.cy();
	    if( !cy.styleEnabled() ){ return false; }

	    var ele = this[0];

	    return ele._private.backgrounding ? true : false;
	  }

	});


	elesfn.bypass = elesfn.style = elesfn.css;
	elesfn.renderedStyle = elesfn.renderedCss;
	elesfn.removeBypass = elesfn.removeStyle = elesfn.removeCss;

	module.exports = elesfn;

	},{"../is":77}],27:[function(_dereq_,module,exports){
	'use strict';

	var elesfn = {};

	function defineSwitchFunction(params){
	  return function(){
	    var args = arguments;
	    var changedEles = [];

	    // e.g. cy.nodes().select( data, handler )
	    if( args.length === 2 ){
	      var data = args[0];
	      var handler = args[1];
	      this.bind( params.event, data, handler );
	    }

	    // e.g. cy.nodes().select( handler )
	    else if( args.length === 1 ){
	      var handler = args[0];
	      this.bind( params.event, handler );
	    }

	    // e.g. cy.nodes().select()
	    else if( args.length === 0 ){
	      for( var i = 0; i < this.length; i++ ){
	        var ele = this[i];
	        var able = !params.ableField || ele._private[params.ableField];
	        var changed = ele._private[params.field] != params.value;

	        if( params.overrideAble ){
	          var overrideAble = params.overrideAble(ele);

	          if( overrideAble !== undefined ){
	            able = overrideAble;

	            if( !overrideAble ){ return this; } // to save cycles assume not able for all on override
	          }
	        }

	        if( able ){
	          ele._private[params.field] = params.value;

	          if( changed ){
	            changedEles.push( ele );
	          }
	        }
	      }

	      var changedColl = this.spawn( changedEles );
	      changedColl.updateStyle(); // change of state => possible change of style
	      changedColl.trigger( params.event );
	    }

	    return this;
	  };
	}

	function defineSwitchSet( params ){
	  elesfn[ params.field ] = function(){
	    var ele = this[0];

	    if( ele ){
	      if( params.overrideField ){
	        var val = params.overrideField(ele);

	        if( val !== undefined ){
	          return val;
	        }
	      }

	      return ele._private[ params.field ];
	    }
	  };

	  elesfn[ params.on ] = defineSwitchFunction({
	    event: params.on,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: true
	  });

	  elesfn[ params.off ] = defineSwitchFunction({
	    event: params.off,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: false
	  });
	}

	defineSwitchSet({
	  field: 'locked',
	  overrideField: function(ele){
	    return ele.cy().autolock() ? true : undefined;
	  },
	  on: 'lock',
	  off: 'unlock'
	});

	defineSwitchSet({
	  field: 'grabbable',
	  overrideField: function(ele){
	    return ele.cy().autoungrabify() ? false : undefined;
	  },
	  on: 'grabify',
	  off: 'ungrabify'
	});

	defineSwitchSet({
	  field: 'selected',
	  ableField: 'selectable',
	  overrideAble: function(ele){
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'select',
	  off: 'unselect'
	});

	defineSwitchSet({
	  field: 'selectable',
	  overrideField: function(ele){
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'selectify',
	  off: 'unselectify'
	});

	elesfn.deselect = elesfn.unselect;

	elesfn.grabbed = function(){
	  var ele = this[0];
	  if( ele ){
	    return ele._private.grabbed;
	  }
	};

	defineSwitchSet({
	  field: 'active',
	  on: 'activate',
	  off: 'unactivate'
	});

	elesfn.inactive = function(){
	  var ele = this[0];
	  if( ele ){
	    return !ele._private.active;
	  }
	};

	module.exports = elesfn;

	},{}],28:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var elesfn = {};

	util.extend(elesfn, {
	  // get the root nodes in the DAG
	  roots: function( selector ){
	    var eles = this;
	    var roots = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      if( !ele.isNode() ){
	        continue;
	      }

	      var hasEdgesPointingIn = ele.connectedEdges(function(){
	        return this.data('target') === ele.id() && this.data('source') !== ele.id();
	      }).length > 0;

	      if( !hasEdgesPointingIn ){
	        roots.push( ele );
	      }
	    }

	    return this.spawn( roots, { unique: true } ).filter( selector );
	  },

	  // get the leaf nodes in the DAG
	  leaves: function( selector ){
	    var eles = this;
	    var leaves = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      if( !ele.isNode() ){
	        continue;
	      }

	      var hasEdgesPointingOut = ele.connectedEdges(function(){
	        return this.data('source') === ele.id() && this.data('target') !== ele.id();
	      }).length > 0;

	      if( !hasEdgesPointingOut ){
	        leaves.push( ele );
	      }
	    }

	    return this.spawn( leaves, { unique: true } ).filter( selector );
	  },

	  // normally called children in graph theory
	  // these nodes =edges=> outgoing nodes
	  outgoers: function( selector ){
	    var eles = this;
	    var oEles = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var eleId = ele.id();

	      if( !ele.isNode() ){ continue; }

	      var edges = ele._private.edges;
	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[j];
	        var srcId = edge._private.data.source;
	        var tgtId = edge._private.data.target;

	        if( srcId === eleId ){
	          oEles.push( edge );
	          oEles.push( edge.target()[0] );
	        }
	      }
	    }

	    return this.spawn( oEles, { unique: true } ).filter( selector );
	  },

	  // aka DAG descendants
	  successors: function( selector ){
	    var eles = this;
	    var sEles = [];
	    var sElesIds = {};

	    for(;;){
	      var outgoers = eles.outgoers();

	      if( outgoers.length === 0 ){ break; } // done if no outgoers left

	      var newOutgoers = false;
	      for( var i = 0; i < outgoers.length; i++ ){
	        var outgoer = outgoers[i];
	        var outgoerId = outgoer.id();

	        if( !sElesIds[ outgoerId ] ){
	          sElesIds[ outgoerId ] = true;
	          sEles.push( outgoer );
	          newOutgoers = true;
	        }
	      }

	      if( !newOutgoers ){ break; } // done if touched all outgoers already

	      eles = outgoers;
	    }

	    return this.spawn( sEles, { unique: true } ).filter( selector );
	  },

	  // normally called parents in graph theory
	  // these nodes <=edges= incoming nodes
	  incomers: function( selector ){
	    var eles = this;
	    var oEles = [];

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];
	      var eleId = ele.id();

	      if( !ele.isNode() ){ continue; }

	      var edges = ele._private.edges;
	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[j];
	        var srcId = edge._private.data.source;
	        var tgtId = edge._private.data.target;

	        if( tgtId === eleId ){
	          oEles.push( edge );
	          oEles.push( edge.source()[0] );
	        }
	      }
	    }

	    return this.spawn( oEles, { unique: true } ).filter( selector );
	  },

	  // aka DAG ancestors
	  predecessors: function( selector ){
	    var eles = this;
	    var pEles = [];
	    var pElesIds = {};

	    for(;;){
	      var incomers = eles.incomers();

	      if( incomers.length === 0 ){ break; } // done if no incomers left

	      var newIncomers = false;
	      for( var i = 0; i < incomers.length; i++ ){
	        var incomer = incomers[i];
	        var incomerId = incomer.id();

	        if( !pElesIds[ incomerId ] ){
	          pElesIds[ incomerId ] = true;
	          pEles.push( incomer );
	          newIncomers = true;
	        }
	      }

	      if( !newIncomers ){ break; } // done if touched all incomers already

	      eles = incomers;
	    }

	    return this.spawn( pEles, { unique: true } ).filter( selector );
	  }
	});


	// Neighbourhood functions
	//////////////////////////

	util.extend(elesfn, {
	  neighborhood: function(selector){
	    var elements = [];
	    var nodes = this.nodes();

	    for( var i = 0; i < nodes.length; i++ ){ // for all nodes
	      var node = nodes[i];
	      var connectedEdges = node.connectedEdges();

	      // for each connected edge, add the edge and the other node
	      for( var j = 0; j < connectedEdges.length; j++ ){
	        var edge = connectedEdges[j];
	        var src = edge._private.source;
	        var tgt = edge._private.target;
	        var otherNode = node === src ? tgt : src;

	        // need check in case of loop
	        if( otherNode.length > 0 ){
	          elements.push( otherNode[0] ); // add node 1 hop away
	        }

	        // add connected edge
	        elements.push( edge[0] );
	      }

	    }

	    return ( this.spawn( elements, { unique: true } ) ).filter( selector );
	  },

	  closedNeighborhood: function(selector){
	    return this.neighborhood().add( this ).filter( selector );
	  },

	  openNeighborhood: function(selector){
	    return this.neighborhood( selector );
	  }
	});

	// aliases
	elesfn.neighbourhood = elesfn.neighborhood;
	elesfn.closedNeighbourhood = elesfn.closedNeighborhood;
	elesfn.openNeighbourhood = elesfn.openNeighborhood;

	// Edge functions
	/////////////////

	util.extend(elesfn, {
	  source: function( selector ){
	    var ele = this[0];
	    var src;

	    if( ele ){
	      src = ele._private.source;
	    }

	    return src && selector ? src.filter( selector ) : src;
	  },

	  target: function( selector ){
	    var ele = this[0];
	    var tgt;

	    if( ele ){
	      tgt = ele._private.target;
	    }

	    return tgt && selector ? tgt.filter( selector ) : tgt;
	  },

	  sources: defineSourceFunction({
	    attr: 'source'
	  }),

	  targets: defineSourceFunction({
	    attr: 'target'
	  })
	});

	function defineSourceFunction( params ){
	  return function( selector ){
	    var sources = [];

	    for( var i = 0; i < this.length; i++ ){
	      var ele = this[i];
	      var src = ele._private[ params.attr ];

	      if( src ){
	        sources.push( src );
	      }
	    }

	    return this.spawn( sources, { unique: true } ).filter( selector );
	  };
	}

	util.extend(elesfn, {
	  edgesWith: defineEdgesWithFunction(),

	  edgesTo: defineEdgesWithFunction({
	    thisIs: 'source'
	  })
	});

	function defineEdgesWithFunction( params ){

	  return function edgesWithImpl( otherNodes ){
	    var elements = [];
	    var cy = this._private.cy;
	    var p = params || {};

	    // get elements if a selector is specified
	    if( is.string(otherNodes) ){
	      otherNodes = cy.$( otherNodes );
	    }

	    var thisIds = this._private.ids;
	    var otherIds = otherNodes._private.ids;

	    for( var h = 0; h < otherNodes.length; h++ ){
	      var edges = otherNodes[h]._private.edges;

	      for( var i = 0; i < edges.length; i++ ){
	        var edge = edges[i];
	        var edgeData = edge._private.data;
	        var thisToOther = thisIds[ edgeData.source ] && otherIds[ edgeData.target ];
	        var otherToThis = otherIds[ edgeData.source ] && thisIds[ edgeData.target ];
	        var edgeConnectsThisAndOther = thisToOther || otherToThis;

	        if( !edgeConnectsThisAndOther ){ continue; }

	        if( p.thisIs ){
	          if( p.thisIs === 'source' && !thisToOther ){ continue; }

	          if( p.thisIs === 'target' && !otherToThis ){ continue; }
	        }

	        elements.push( edge );
	      }
	    }

	    return this.spawn( elements, { unique: true } );
	  };
	}

	util.extend(elesfn, {
	  connectedEdges: function( selector ){
	    var retEles = [];

	    var eles = this;
	    for( var i = 0; i < eles.length; i++ ){
	      var node = eles[i];
	      if( !node.isNode() ){ continue; }

	      var edges = node._private.edges;

	      for( var j = 0; j < edges.length; j++ ){
	        var edge = edges[j];
	        retEles.push( edge );
	      }
	    }

	    return this.spawn( retEles, { unique: true } ).filter( selector );
	  },

	  connectedNodes: function( selector ){
	    var retEles = [];

	    var eles = this;
	    for( var i = 0; i < eles.length; i++ ){
	      var edge = eles[i];
	      if( !edge.isEdge() ){ continue; }

	      retEles.push( edge.source()[0] );
	      retEles.push( edge.target()[0] );
	    }

	    return this.spawn( retEles, { unique: true } ).filter( selector );
	  },

	  parallelEdges: defineParallelEdgesFunction(),

	  codirectedEdges: defineParallelEdgesFunction({
	    codirected: true
	  })
	});

	function defineParallelEdgesFunction(params){
	  var defaults = {
	    codirected: false
	  };
	  params = util.extend({}, defaults, params);

	  return function( selector ){
	    var elements = [];
	    var edges = this.edges();
	    var p = params;

	    // look at all the edges in the collection
	    for( var i = 0; i < edges.length; i++ ){
	      var edge1 = edges[i];
	      var src1 = edge1.source()[0];
	      var srcid1 = src1.id();
	      var tgt1 = edge1.target()[0];
	      var tgtid1 = tgt1.id();
	      var srcEdges1 = src1._private.edges;

	      // look at edges connected to the src node of this edge
	      for( var j = 0; j < srcEdges1.length; j++ ){
	        var edge2 = srcEdges1[j];
	        var edge2data = edge2._private.data;
	        var tgtid2 = edge2data.target;
	        var srcid2 = edge2data.source;

	        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
	        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

	        if( (p.codirected && codirected) || (!p.codirected && (codirected || oppdirected)) ){
	          elements.push( edge2 );
	        }
	      }
	    }

	    return this.spawn( elements, { unique: true } ).filter( selector );
	  };

	}

	// Misc functions
	/////////////////

	util.extend(elesfn, {
	  components: function(){
	    var self = this;
	    var cy = self.cy();
	    var visited = self.spawn();
	    var unvisited = self.nodes();
	    var components = [];

	    var visitInComponent = function( node, component ){
	      visited.merge( node );
	      unvisited.unmerge( node );
	      component.merge( node );
	    };

	    if( unvisited.empty() ){ return self.spawn(); }

	    do {
	      var component = cy.collection();
	      components.push( component );

	      var root = unvisited[0];
	      visitInComponent( root, component );

	      self.bfs({
	        directed: false,
	        roots: root,
	        visit: function( i, depth, v, e, u ){
	          visitInComponent( v, component );
	        }
	      });

	    } while( unvisited.length > 0 );

	    return components.map(function( component ){
	      var connectedEdges = component.connectedEdges().stdFilter(function( edge ){
	        return component.anySame( edge.source() ) && component.anySame( edge.target() );
	      });

	      return component.union( connectedEdges );
	    });
	  }
	});

	module.exports = elesfn;

	},{"../is":77,"../util":94}],29:[function(_dereq_,module,exports){
	'use strict';

	var zIndexSort = function( a, b ){
	  var cy = a.cy();
	  var a_p = a._private;
	  var b_p = b._private;
	  var zDiff = a_p.style['z-index'].value - b_p.style['z-index'].value;
	  var depthA = 0;
	  var depthB = 0;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var aIsNode = a_p.group === 'nodes';
	  var aIsEdge = a_p.group === 'edges';
	  var bIsNode = b_p.group === 'nodes';
	  var bIsEdge = b_p.group === 'edges';

	  // no need to calculate element depth if there is no compound node
	  if( hasCompoundNodes ){
	    depthA = a.zDepth();
	    depthB = b.zDepth();
	  }

	  var depthDiff = depthA - depthB;
	  var sameDepth = depthDiff === 0;

	  if( sameDepth ){

	    if( aIsNode && bIsEdge ){
	      return 1; // 'a' is a node, it should be drawn later

	    } else if( aIsEdge && bIsNode ){
	      return -1; // 'a' is an edge, it should be drawn first

	    } else { // both nodes or both edges
	      if( zDiff === 0 ){ // same z-index => compare indices in the core (order added to graph w/ last on top)
	        return a_p.index - b_p.index;
	      } else {
	        return zDiff;
	      }
	    }

	  // elements on different level
	  } else {
	    return depthDiff; // deeper element should be drawn later
	  }

	};

	module.exports = zIndexSort;

	},{}],30:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');
	var Collection = _dereq_('../collection');
	var Element = _dereq_('../collection/element');
	var window = _dereq_('../window');
	var document = window ? window.document : null;
	var NullRenderer = _dereq_('../extensions/renderer/null');

	var corefn = {
	  add: function(opts){

	    var elements;
	    var cy = this;

	    // add the elements
	    if( is.elementOrCollection(opts) ){
	      var eles = opts;

	      if( eles._private.cy === cy ){ // same instance => just restore
	        elements = eles.restore();

	      } else { // otherwise, copy from json
	        var jsons = [];

	        for( var i = 0; i < eles.length; i++ ){
	          var ele = eles[i];
	          jsons.push( ele.json() );
	        }

	        elements = new Collection( cy, jsons );
	      }
	    }

	    // specify an array of options
	    else if( is.array(opts) ){
	      var jsons = opts;

	      elements = new Collection(cy, jsons);
	    }

	    // specify via opts.nodes and opts.edges
	    else if( is.plainObject(opts) && (is.array(opts.nodes) || is.array(opts.edges)) ){
	      var elesByGroup = opts;
	      var jsons = [];

	      var grs = ['nodes', 'edges'];
	      for( var i = 0, il = grs.length; i < il; i++ ){
	        var group = grs[i];
	        var elesArray = elesByGroup[group];

	        if( is.array(elesArray) ){

	          for( var j = 0, jl = elesArray.length; j < jl; j++ ){
	            var json = util.extend( { group: group }, elesArray[j] );

	            jsons.push( json );
	          }
	        }
	      }

	      elements = new Collection(cy, jsons);
	    }

	    // specify options for one element
	    else {
	      var json = opts;
	      elements = (new Element( cy, json )).collection();
	    }

	    return elements;
	  },

	  remove: function(collection){
	    if( is.elementOrCollection(collection) ){
	      collection = collection;
	    } else if( is.string(collection) ){
	      var selector = collection;
	      collection = this.$( selector );
	    }

	    return collection.remove();
	  },

	  load: function(elements, onload, ondone){
	    var cy = this;

	    cy.notifications(false);

	    // remove old elements
	    var oldEles = cy.elements();
	    if( oldEles.length > 0 ){
	      oldEles.remove();
	    }

	    if( elements != null ){
	      if( is.plainObject(elements) || is.array(elements) ){
	        cy.add( elements );
	      }
	    }

	    cy.one('layoutready', function(e){
	      cy.notifications(true);
	      cy.trigger(e); // we missed this event by turning notifications off, so pass it on

	      cy.notify({
	        type: 'load',
	        collection: cy.elements()
	      });

	      cy.one('load', onload);
	      cy.trigger('load');
	    }).one('layoutstop', function(){
	      cy.one('done', ondone);
	      cy.trigger('done');
	    });

	    var layoutOpts = util.extend({}, cy._private.options.layout);
	    layoutOpts.eles = cy.$();

	    cy.layout( layoutOpts );

	    return this;
	  }
	};

	module.exports = corefn;

	},{"../collection":23,"../collection/element":19,"../extensions/renderer/null":73,"../is":77,"../util":94,"../window":100}],31:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');
	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var corefn = ({

	  // pull in animation functions
	  animate: define.animate(),
	  animation: define.animation(),
	  animated: define.animated(),
	  clearQueue: define.clearQueue(),
	  delay: define.delay(),
	  delayAnimation: define.delayAnimation(),
	  stop: define.stop(),

	  addToAnimationPool: function( eles ){
	    var cy = this;

	    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

	    cy._private.aniEles.merge( eles );
	  },

	  stopAnimationLoop: function(){
	    this._private.animationsRunning = false;
	  },

	  startAnimationLoop: function(){
	    var cy = this;

	    cy._private.animationsRunning = true;

	    if( !cy.styleEnabled() ){ return; } // save cycles when no style used

	    // NB the animation loop will exec in headless environments if style enabled
	    // and explicit cy.destroy() is necessary to stop the loop

	    function globalAnimationStep(){
	      if( !cy._private.animationsRunning ){ return; }

	      util.requestAnimationFrame(function(now){
	        handleElements(now);
	        globalAnimationStep();
	      });
	    }

	    globalAnimationStep(); // first call

	    function handleElements( now ){
	      var eles = cy._private.aniEles;
	      var doneEles = [];

	      function handleElement( ele, isCore ){
	        var _p = ele._private;
	        var current = _p.animation.current;
	        var queue = _p.animation.queue;
	        var ranAnis = false;

	        // if nothing currently animating, get something from the queue
	        if( current.length === 0 ){
	          var next = queue.shift();

	          if( next ){
	            current.push( next );
	          }
	        }

	        var callbacks = function( callbacks ){
	          for( var j = callbacks.length - 1; j >= 0; j-- ){
	            var cb = callbacks[j];

	            cb();
	          }

	          callbacks.splice( 0, callbacks.length );
	        };

	        // step and remove if done
	        for( var i = current.length - 1; i >= 0; i-- ){
	          var ani = current[i];
	          var ani_p = ani._private;

	          if( ani_p.stopped ){
	            current.splice( i, 1 );

	            ani_p.hooked = false;
	            ani_p.playing = false;
	            ani_p.started = false;

	            callbacks( ani_p.frames );

	            continue;
	          }

	          if( !ani_p.playing && !ani_p.applying ){ continue; }

	          // an apply() while playing shouldn't do anything
	          if( ani_p.playing && ani_p.applying ){
	            ani_p.applying = false;
	          }

	          if( !ani_p.started ){
	            startAnimation( ele, ani, now );
	          }

	          step( ele, ani, now, isCore );

	          if( ani_p.applying ){
	            ani_p.applying = false;
	          }

	          callbacks( ani_p.frames );

	          if( ani.completed() ){
	            current.splice(i, 1);

	            ani_p.hooked = false;
	            ani_p.playing = false;
	            ani_p.started = false;

	            callbacks( ani_p.completes );
	          }

	          ranAnis = true;
	        }

	        if( !isCore && current.length === 0 && queue.length === 0 ){
	          doneEles.push( ele );
	        }

	        return ranAnis;
	      } // handleElement

	      // handle all eles
	      var ranEleAni = false;
	      for( var e = 0; e < eles.length; e++ ){
	        var ele = eles[e];
	        var handledThisEle = handleElement( ele );

	        ranEleAni = ranEleAni || handledThisEle;
	      } // each element

	      var ranCoreAni = handleElement( cy, true );

	      // notify renderer
	      if( ranEleAni || ranCoreAni ){
	        var toNotify;

	        if( eles.length > 0 ){
	          var updatedEles = eles.updateCompoundBounds();
	          toNotify = updatedEles.length > 0 ? eles.add( updatedEles ) : eles;
	        }

	        cy.notify({
	          type: 'draw',
	          collection: toNotify
	        });
	      }

	      // remove elements from list of currently animating if its queues are empty
	      eles.unmerge( doneEles );

	    } // handleElements

	    function startAnimation( self, ani, now ){
	      var isCore = is.core( self );
	      var isEles = !isCore;
	      var ele = self;
	      var style = cy._private.style;
	      var ani_p = ani._private;

	      if( isEles ){
	        var pos = ele._private.position;

	        ani_p.startPosition = ani_p.startPosition || {
	          x: pos.x,
	          y: pos.y
	        };

	        ani_p.startStyle = ani_p.startStyle || style.getValueStyle( ele );
	      }

	      if( isCore ){
	        var pan = cy._private.pan;

	        ani_p.startPan = ani_p.startPan || {
	          x: pan.x,
	          y: pan.y
	        };

	        ani_p.startZoom = ani_p.startZoom != null ? ani_p.startZoom : cy._private.zoom;
	      }

	      ani_p.started = true;
	      ani_p.startTime = now - ani_p.progress * ani_p.duration;
	    }

	    function step( self, ani, now, isCore ){
	      var style = cy._private.style;
	      var isEles = !isCore;
	      var _p = self._private;
	      var ani_p = ani._private;
	      var pEasing = ani_p.easing;
	      var startTime = ani_p.startTime;

	      if( !ani_p.easingImpl ){

	        if( pEasing == null ){ // use default
	          ani_p.easingImpl = easings['linear'];

	        } else { // then define w/ name
	          var easingVals;

	          if( is.string( pEasing ) ){
	            var easingProp = style.parse('transition-timing-function', pEasing);

	            easingVals = easingProp.value;

	          } else { // then assume preparsed array
	            easingVals = pEasing;
	          }

	          var name, args;

	          if( is.string( easingVals ) ){
	            name = easingVals;
	            args = [];
	          } else {
	            name = easingVals[1];
	            args = easingVals.slice(2).map(function(n){ return +n; });
	          }

	          if( args.length > 0 ){ // create with args
	            if( name === 'spring' ){
	              args.push( ani_p.duration ); // need duration to generate spring
	            }

	            ani_p.easingImpl = easings[ name ].apply( null, args );
	          } else { // static impl by name
	            ani_p.easingImpl = easings[ name ];
	          }
	        }

	      }

	      var easing = ani_p.easingImpl;
	      var percent;

	      if( ani_p.duration === 0 ){
	        percent = 1;
	      } else {
	        percent = (now - startTime) / ani_p.duration;
	      }

	      if( ani_p.applying ){
	        percent = ani_p.progress;
	      }

	      if( percent < 0 ){
	        percent = 0;
	      } else if( percent > 1 ){
	        percent = 1;
	      }

	      if( ani_p.delay == null ){ // then update

	        var startPos = ani_p.startPosition;
	        var endPos = ani_p.position;
	        var pos = _p.position;
	        if( endPos && isEles ){
	          if( valid( startPos.x, endPos.x ) ){
	            pos.x = ease( startPos.x, endPos.x, percent, easing );
	          }

	          if( valid( startPos.y, endPos.y ) ){
	            pos.y = ease( startPos.y, endPos.y, percent, easing );
	          }
	        }

	        var startPan = ani_p.startPan;
	        var endPan = ani_p.pan;
	        var pan = _p.pan;
	        var animatingPan = endPan != null && isCore;
	        if( animatingPan ){
	          if( valid( startPan.x, endPan.x ) ){
	            pan.x = ease( startPan.x, endPan.x, percent, easing );
	          }

	          if( valid( startPan.y, endPan.y ) ){
	            pan.y = ease( startPan.y, endPan.y, percent, easing );
	          }

	          self.trigger('pan');
	        }

	        var startZoom = ani_p.startZoom;
	        var endZoom = ani_p.zoom;
	        var animatingZoom = endZoom != null && isCore;
	        if( animatingZoom ){
	          if( valid( startZoom, endZoom ) ){
	            _p.zoom = ease( startZoom, endZoom, percent, easing );
	          }

	          self.trigger('zoom');
	        }

	        if( animatingPan || animatingZoom ){
	          self.trigger('viewport');
	        }

	        var props = ani_p.style;
	        if( props && isEles ){

	          for( var i = 0; i < props.length; i++ ){
	            var prop = props[i];
	            var name = prop.name;
	            var end = prop;

	            var start = ani_p.startStyle[ name ];
	            var easedVal = ease( start, end, percent, easing );

	            style.overrideBypass( self, name, easedVal );
	          } // for props

	        } // if

	      }

	      if( is.fn(ani_p.step) ){
	        ani_p.step.apply( self, [ now ] );
	      }

	      ani_p.progress = percent;

	      return percent;
	    }

	    function valid(start, end){
	      if( start == null || end == null ){
	        return false;
	      }

	      if( is.number(start) && is.number(end) ){
	        return true;
	      } else if( (start) && (end) ){
	        return true;
	      }

	      return false;
	    }

	    // assumes p0 = 0, p3 = 1
	    function evalCubicBezier( p1, p2, t ){
	      var one_t = 1 - t;
	      var tsq = t*t;

	      return ( 3 * one_t * one_t * t * p1 ) + ( 3 * one_t * tsq * p2 ) + tsq * t;
	    }

	    function cubicBezier( p1, p2 ){
	      return function( start, end, percent ){
	        return start + (end - start) * evalCubicBezier( p1, p2, percent );
	      };
	    }

	    /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
	    var generateSpringRK4 = (function () {
	        function springAccelerationForState (state) {
	            return (-state.tension * state.x) - (state.friction * state.v);
	        }

	        function springEvaluateStateWithDerivative (initialState, dt, derivative) {
	            var state = {
	                x: initialState.x + derivative.dx * dt,
	                v: initialState.v + derivative.dv * dt,
	                tension: initialState.tension,
	                friction: initialState.friction
	            };

	            return { dx: state.v, dv: springAccelerationForState(state) };
	        }

	        function springIntegrateState (state, dt) {
	            var a = {
	                    dx: state.v,
	                    dv: springAccelerationForState(state)
	                },
	                b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
	                c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
	                d = springEvaluateStateWithDerivative(state, dt, c),
	                dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
	                dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

	            state.x = state.x + dxdt * dt;
	            state.v = state.v + dvdt * dt;

	            return state;
	        }

	        return function springRK4Factory (tension, friction, duration) {

	            var initState = {
	                    x: -1,
	                    v: 0,
	                    tension: null,
	                    friction: null
	                },
	                path = [0],
	                time_lapsed = 0,
	                tolerance = 1 / 10000,
	                DT = 16 / 1000,
	                have_duration, dt, last_state;

	            tension = parseFloat(tension) || 500;
	            friction = parseFloat(friction) || 20;
	            duration = duration || null;

	            initState.tension = tension;
	            initState.friction = friction;

	            have_duration = duration !== null;

	            /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
	            if (have_duration) {
	                /* Run the simulation without a duration. */
	                time_lapsed = springRK4Factory(tension, friction);
	                /* Compute the adjusted time delta. */
	                dt = time_lapsed / duration * DT;
	            } else {
	                dt = DT;
	            }

	            while (true) {
	                /* Next/step function .*/
	                last_state = springIntegrateState(last_state || initState, dt);
	                /* Store the position. */
	                path.push(1 + last_state.x);
	                time_lapsed += 16;
	                /* If the change threshold is reached, break. */
	                if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
	                    break;
	                }
	            }

	            /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
	               computed path and returns a snapshot of the position according to a given percentComplete. */
	            return !have_duration ? time_lapsed : function(percentComplete) { return path[ (percentComplete * (path.length - 1)) | 0 ]; };
	        };
	    }());

	    var easings = {
	      'linear': function( start, end, percent ){
	        return start + (end - start) * percent;
	      },

	      // default easings
	      'ease': cubicBezier( 0.25, 0.1, 0.25, 1 ),
	      'ease-in': cubicBezier( 0.42, 0, 1, 1 ),
	      'ease-out': cubicBezier( 0, 0, 0.58, 1 ),
	      'ease-in-out': cubicBezier( 0.42, 0, 0.58, 1 ),

	      // sine
	      'ease-in-sine': cubicBezier( 0.47, 0, 0.745, 0.715 ),
	      'ease-out-sine': cubicBezier( 0.39, 0.575, 0.565, 1 ),
	      'ease-in-out-sine': cubicBezier( 0.445, 0.05, 0.55, 0.95 ),

	      // quad
	      'ease-in-quad': cubicBezier( 0.55, 0.085, 0.68, 0.53 ),
	      'ease-out-quad': cubicBezier( 0.25, 0.46, 0.45, 0.94 ),
	      'ease-in-out-quad': cubicBezier( 0.455, 0.03, 0.515, 0.955 ),

	      // cubic
	      'ease-in-cubic': cubicBezier( 0.55, 0.055, 0.675, 0.19 ),
	      'ease-out-cubic': cubicBezier( 0.215, 0.61, 0.355, 1 ),
	      'ease-in-out-cubic': cubicBezier( 0.645, 0.045, 0.355, 1 ),

	      // quart
	      'ease-in-quart': cubicBezier( 0.895, 0.03, 0.685, 0.22 ),
	      'ease-out-quart': cubicBezier( 0.165, 0.84, 0.44, 1 ),
	      'ease-in-out-quart': cubicBezier( 0.77, 0, 0.175, 1 ),

	      // quint
	      'ease-in-quint': cubicBezier( 0.755, 0.05, 0.855, 0.06 ),
	      'ease-out-quint': cubicBezier( 0.23, 1, 0.32, 1 ),
	      'ease-in-out-quint': cubicBezier( 0.86, 0, 0.07, 1 ),

	      // expo
	      'ease-in-expo': cubicBezier( 0.95, 0.05, 0.795, 0.035 ),
	      'ease-out-expo': cubicBezier( 0.19, 1, 0.22, 1 ),
	      'ease-in-out-expo': cubicBezier( 1, 0, 0, 1 ),

	      // circ
	      'ease-in-circ': cubicBezier( 0.6, 0.04, 0.98, 0.335 ),
	      'ease-out-circ': cubicBezier( 0.075, 0.82, 0.165, 1 ),
	      'ease-in-out-circ': cubicBezier( 0.785, 0.135, 0.15, 0.86 ),


	      // user param easings...

	      'spring': function( tension, friction, duration ){
	        if( duration === 0 ){ // can't get a spring w/ duration 0
	          return easings.linear; // duration 0 => jump to end so impl doesn't matter
	        }

	        var spring = generateSpringRK4( tension, friction, duration );

	        return function( start, end, percent ){
	          return start + (end - start) * spring( percent );
	        };
	      },

	      'cubic-bezier': function( x1, y1, x2, y2 ){
	        return cubicBezier( x1, y1, x2, y2 );
	      }
	    };

	    function ease( startProp, endProp, percent, easingFn ){
	      if( percent < 0 ){
	        percent = 0;
	      } else if( percent > 1 ){
	        percent = 1;
	      }

	      var start, end;

	      if( startProp.pfValue != null || startProp.value != null ){
	        start = startProp.pfValue != null ? startProp.pfValue : startProp.value;
	      } else {
	        start = startProp;
	      }

	      if( endProp.pfValue != null || endProp.value != null ){
	        end = endProp.pfValue != null ? endProp.pfValue : endProp.value;
	      } else {
	        end = endProp;
	      }

	      if( is.number(start) && is.number(end) ){
	        return easingFn( start, end, percent );

	      } else if( is.array(start) && is.array(end) ){
	        var easedArr = [];

	        for( var i = 0; i < end.length; i++ ){
	          var si = start[i];
	          var ei = end[i];

	          if( si != null && ei != null ){
	            var val = easingFn(si, ei, percent);

	            if( startProp.roundValue ){ val = Math.round( val ); }

	            easedArr.push( val );
	          } else {
	            easedArr.push( ei );
	          }
	        }

	        return easedArr;
	      }

	      return undefined;
	    }

	  }

	});

	module.exports = corefn;

	},{"../define":41,"../is":77,"../util":94}],32:[function(_dereq_,module,exports){
	'use strict';

	var define = _dereq_('../define');

	var corefn = ({
	  on: define.on(), // .on( events [, selector] [, data], handler)
	  one: define.on({ unbindSelfOnTrigger: true }),
	  once: define.on({ unbindAllBindersOnTrigger: true }),
	  off: define.off(), // .off( events [, selector] [, handler] )
	  trigger: define.trigger() // .trigger( events [, extraParams] )
	});

	define.eventAliasesOn( corefn );

	module.exports = corefn;

	},{"../define":41}],33:[function(_dereq_,module,exports){
	'use strict';

	var corefn = ({

	  png: function( options ){
	    var renderer = this._private.renderer;
	    options = options || {};

	    return renderer.png( options );
	  },

	  jpg: function( options ){
	    var renderer = this._private.renderer;
	    options = options || {};

	    options.bg = options.bg || '#fff';

	    return renderer.jpg( options );
	  }

	});

	corefn.jpeg = corefn.jpg;

	module.exports = corefn;

	},{}],34:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('../window');
	var util = _dereq_('../util');
	var Collection = _dereq_('../collection');
	var is = _dereq_('../is');
	var Promise = _dereq_('../promise');
	var define = _dereq_('../define');

	var Core = function( opts ){
	  if( !(this instanceof Core) ){
	    return new Core(opts);
	  }
	  var cy = this;

	  opts = util.extend({}, opts);

	  var container = opts.container;

	  // allow for passing a wrapped jquery object
	  // e.g. cytoscape({ container: $('#cy') })
	  if( container && !is.htmlElement( container ) && is.htmlElement( container[0] ) ){
	    container = container[0];
	  }

	  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery
	  reg = reg || {};

	  if( reg && reg.cy ){
	    reg.cy.destroy();

	    reg = {}; // old instance => replace reg completely
	  }

	  var readies = reg.readies = reg.readies || [];

	  if( container ){ container._cyreg = reg; } // make sure container assoc'd reg points to this cy
	  reg.cy = cy;

	  var head = window !== undefined && container !== undefined && !opts.headless;
	  var options = opts;
	  options.layout = util.extend( { name: head ? 'grid' : 'null' }, options.layout );
	  options.renderer = util.extend( { name: head ? 'canvas' : 'null' }, options.renderer );

	  var defVal = function( def, val, altVal ){
	    if( val !== undefined ){
	      return val;
	    } else if( altVal !== undefined ){
	      return altVal;
	    } else {
	      return def;
	    }
	  };

	  var _p = this._private = {
	    container: container, // html dom ele container
	    ready: false, // whether ready has been triggered
	    initrender: false, // has initrender has been triggered
	    options: options, // cached options
	    elements: [], // array of elements
	    id2index: {}, // element id => index in elements array
	    listeners: [], // list of listeners
	    onRenders: [], // rendering listeners
	    aniEles: Collection(this), // elements being animated
	    scratch: {}, // scratch object for core
	    layout: null,
	    renderer: null,
	    notificationsEnabled: true, // whether notifications are sent to the renderer
	    minZoom: 1e-50,
	    maxZoom: 1e50,
	    zoomingEnabled: defVal(true, options.zoomingEnabled),
	    userZoomingEnabled: defVal(true, options.userZoomingEnabled),
	    panningEnabled: defVal(true, options.panningEnabled),
	    userPanningEnabled: defVal(true, options.userPanningEnabled),
	    boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
	    autolock: defVal(false, options.autolock, options.autolockNodes),
	    autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
	    autounselectify: defVal(false, options.autounselectify),
	    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
	    zoom: is.number(options.zoom) ? options.zoom : 1,
	    pan: {
	      x: is.plainObject(options.pan) && is.number(options.pan.x) ? options.pan.x : 0,
	      y: is.plainObject(options.pan) && is.number(options.pan.y) ? options.pan.y : 0
	    },
	    animation: { // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    hasCompoundNodes: false,
	    deferredExecQueue: []
	  };

	  // set selection type
	  var selType = options.selectionType;
	  if( selType === undefined || (selType !== 'additive' && selType !== 'single') ){
	    // then set default

	    _p.selectionType = 'single';
	  } else {
	    _p.selectionType = selType;
	  }

	  // init zoom bounds
	  if( is.number(options.minZoom) && is.number(options.maxZoom) && options.minZoom < options.maxZoom ){
	    _p.minZoom = options.minZoom;
	    _p.maxZoom = options.maxZoom;
	  } else if( is.number(options.minZoom) && options.maxZoom === undefined ){
	    _p.minZoom = options.minZoom;
	  } else if( is.number(options.maxZoom) && options.minZoom === undefined ){
	    _p.maxZoom = options.maxZoom;
	  }

	  var loadExtData = function( extData, next ){
	    var anyIsPromise = extData.some( is.promise );

	    if( anyIsPromise ){
	      return Promise.all( extData ).then( next ); // load all data asynchronously, then exec rest of init
	    } else {
	      next( extData ); // exec synchronously for convenience
	    }
	  };

	  // create the renderer
	  cy.initRenderer( util.extend({
	    hideEdgesOnViewport: options.hideEdgesOnViewport,
	    hideLabelsOnViewport: options.hideLabelsOnViewport,
	    textureOnViewport: options.textureOnViewport,
	    wheelSensitivity: is.number(options.wheelSensitivity) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,
	    motionBlur: options.motionBlur === undefined ? true : options.motionBlur, // on by default
	    motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,
	    pixelRatio: is.number(options.pixelRatio) && options.pixelRatio > 0 ? options.pixelRatio : undefined,
	    desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,
	    touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold
	  }, options.renderer) );

	  loadExtData([ options.style, options.elements ], function( thens ){
	    var initStyle = thens[0];
	    var initEles = thens[1];

	    // init style
	    if( _p.styleEnabled ){
	      cy.setStyle( initStyle );
	    }

	    // trigger the passed function for the `initrender` event
	    if( options.initrender ){
	      cy.on('initrender', options.initrender);
	      cy.on('initrender', function(){
	        _p.initrender = true;
	      });
	    }

	    // initial load
	    cy.load(initEles, function(){ // onready
	      cy.startAnimationLoop();
	      _p.ready = true;

	      // if a ready callback is specified as an option, the bind it
	      if( is.fn( options.ready ) ){
	        cy.on('ready', options.ready);
	      }

	      // bind all the ready handlers registered before creating this instance
	      for( var i = 0; i < readies.length; i++ ){
	        var fn = readies[i];
	        cy.on('ready', fn);
	      }
	      if( reg ){ reg.readies = []; } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc

	      cy.trigger('ready');
	    }, options.done);

	  });
	};

	var corefn = Core.prototype; // short alias

	util.extend(corefn, {
	  instanceString: function(){
	    return 'core';
	  },

	  isReady: function(){
	    return this._private.ready;
	  },

	  ready: function( fn ){
	    if( this.isReady() ){
	      this.trigger('ready', [], fn); // just calls fn as though triggered via ready event
	    } else {
	      this.on('ready', fn);
	    }

	    return this;
	  },

	  initrender: function(){
	    return this._private.initrender;
	  },

	  destroy: function(){
	    var cy = this;

	    cy.stopAnimationLoop();

	    cy.notify({ type: 'destroy' }); // destroy the renderer

	    var domEle = cy.container();
	    if( domEle ){
	      domEle._cyreg = null;

	      while( domEle.childNodes.length > 0 ){
	        domEle.removeChild( domEle.childNodes[0] );
	      }
	    }

	    return cy;
	  },

	  getElementById: function( id ){
	    var index = this._private.id2index[ id ];
	    if( index !== undefined ){
	      return this._private.elements[ index ];
	    }

	    // worst case, return an empty collection
	    return Collection( this );
	  },

	  selectionType: function(){
	    return this._private.selectionType;
	  },

	  hasCompoundNodes: function(){
	    return this._private.hasCompoundNodes;
	  },

	  styleEnabled: function(){
	    return this._private.styleEnabled;
	  },

	  addToPool: function( eles ){
	    var elements = this._private.elements;
	    var id2index = this._private.id2index;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];

	      var id = ele._private.data.id;
	      var index = id2index[ id ];
	      var alreadyInPool = index !== undefined;

	      if( !alreadyInPool ){
	        index = elements.length;
	        elements.push( ele );
	        id2index[ id ] = index;
	        ele._private.index = index;
	      }
	    }

	    return this; // chaining
	  },

	  removeFromPool: function( eles ){
	    var elements = this._private.elements;
	    var id2index = this._private.id2index;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];

	      var id = ele._private.data.id;
	      var index = id2index[ id ];
	      var inPool = index !== undefined;

	      if( inPool ){
	        this._private.id2index[ id ] = undefined;
	        elements.splice(index, 1);

	        // adjust the index of all elements past this index
	        for( var j = index; j < elements.length; j++ ){
	          var jid = elements[j]._private.data.id;
	          id2index[ jid ]--;
	          elements[j]._private.index--;
	        }
	      }
	    }
	  },

	  container: function(){
	    return this._private.container;
	  },

	  options: function(){
	    return util.copy( this._private.options );
	  },

	  json: function( obj ){
	    var cy = this;
	    var _p = cy._private;

	    if( is.plainObject(obj) ){ // set

	      cy.startBatch();

	      if( obj.elements ){
	        var idInJson = {};

	        var updateEles = function( jsons, gr ){
	          for( var i = 0; i < jsons.length; i++ ){
	            var json = jsons[i];
	            var id = json.data.id;
	            var ele = cy.getElementById( id );

	            idInJson[ id ] = true;

	            if( ele.length !== 0 ){ // existing element should be updated
	              ele.json( json );
	            } else { // otherwise should be added
	              if( gr ){
	                cy.add( util.extend({ group: gr }, json) );
	              } else {
	                cy.add( json );
	              }
	            }
	          }
	        };

	        if( is.array(obj.elements) ){ // elements: []
	          updateEles( obj.elements );

	        } else { // elements: { nodes: [], edges: [] }
	          var grs = ['nodes', 'edges'];
	          for( var i = 0; i < grs.length; i++ ){
	            var gr = grs[i];
	            var elements = obj.elements[ gr ];

	            if( is.array(elements) ){
	              updateEles( elements, gr );
	            }
	          }
	        }

	        // elements not specified in json should be removed
	        cy.elements().stdFilter(function( ele ){
	          return !idInJson[ ele.id() ];
	        }).remove();
	      }

	      if( obj.style ){
	        cy.style( obj.style );
	      }

	      if( obj.zoom != null && obj.zoom !== _p.zoom ){
	        cy.zoom( obj.zoom );
	      }

	      if( obj.pan ){
	        if( obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y ){
	          cy.pan( obj.pan );
	        }
	      }

	      var fields = [
	        'minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled',
	        'panningEnabled', 'userPanningEnabled',
	        'boxSelectionEnabled',
	        'autolock', 'autoungrabify', 'autounselectify'
	      ];

	      for( var i = 0; i < fields.length; i++ ){
	        var f = fields[i];

	        if( obj[f] != null ){
	          cy[f]( obj[f] );
	        }
	      }

	      cy.endBatch();

	      return this; // chaining
	    } else if( obj === undefined ){ // get
	      var json = {};

	      json.elements = {};
	      cy.elements().each(function(i, ele){
	        var group = ele.group();

	        if( !json.elements[group] ){
	          json.elements[group] = [];
	        }

	        json.elements[group].push( ele.json() );
	      });

	      if( this._private.styleEnabled ){
	        json.style = cy.style().json();
	      }

	      json.zoomingEnabled = cy._private.zoomingEnabled;
	      json.userZoomingEnabled = cy._private.userZoomingEnabled;
	      json.zoom = cy._private.zoom;
	      json.minZoom = cy._private.minZoom;
	      json.maxZoom = cy._private.maxZoom;
	      json.panningEnabled = cy._private.panningEnabled;
	      json.userPanningEnabled = cy._private.userPanningEnabled;
	      json.pan = util.copy( cy._private.pan );
	      json.boxSelectionEnabled = cy._private.boxSelectionEnabled;
	      json.renderer = util.copy( cy._private.options.renderer );
	      json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;
	      json.hideLabelsOnViewport = cy._private.options.hideLabelsOnViewport;
	      json.textureOnViewport = cy._private.options.textureOnViewport;
	      json.wheelSensitivity = cy._private.options.wheelSensitivity;
	      json.motionBlur = cy._private.options.motionBlur;

	      return json;
	    }
	  },

	  scratch: define.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true
	  }),

	  removeScratch: define.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true
	  })

	});

	[
	  _dereq_('./add-remove'),
	  _dereq_('./animation'),
	  _dereq_('./events'),
	  _dereq_('./export'),
	  _dereq_('./layout'),
	  _dereq_('./notification'),
	  _dereq_('./renderer'),
	  _dereq_('./search'),
	  _dereq_('./style'),
	  _dereq_('./viewport')
	].forEach(function( props ){
	  util.extend( corefn, props );
	});

	module.exports = Core;

	},{"../collection":23,"../define":41,"../is":77,"../promise":80,"../util":94,"../window":100,"./add-remove":30,"./animation":31,"./events":32,"./export":33,"./layout":35,"./notification":36,"./renderer":37,"./search":38,"./style":39,"./viewport":40}],35:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var corefn = ({

	  layout: function( params ){
	    var layout = this._private.prevLayout = ( params == null ? this._private.prevLayout : this.makeLayout( params ) );

	    layout.run();

	    return this; // chaining
	  },

	  makeLayout: function( options ){
	    var cy = this;

	    if( options == null ){
	      util.error('Layout options must be specified to make a layout');
	      return;
	    }

	    if( options.name == null ){
	      util.error('A `name` must be specified to make a layout');
	      return;
	    }

	    var name = options.name;
	    var Layout = cy.extension('layout', name);

	    if( Layout == null ){
	      util.error('Can not apply layout: No such layout `' + name + '` found; did you include its JS file?');
	      return;
	    }

	    var eles;
	    if( is.string( options.eles ) ){
	      eles = cy.$( options.eles );
	    } else {
	      eles = options.eles != null ? options.eles : cy.$();
	    }

	    var layout = new Layout( util.extend({}, options, {
	      cy: cy,
	      eles: eles
	    }) );

	    return layout;
	  }

	});

	corefn.createLayout = corefn.makeLayout;

	module.exports = corefn;

	},{"../is":77,"../util":94}],36:[function(_dereq_,module,exports){
	'use strict';

	var corefn = ({
	  notify: function( params ){
	    var _p = this._private;

	    if( _p.batchingNotify ){
	      var bEles = _p.batchNotifyEles;
	      var bTypes = _p.batchNotifyTypes;

	      if( params.collection ){
	        bEles.merge( params.collection );
	      }

	      if( !bTypes.ids[ params.type ] ){
	        bTypes.push( params.type );
	        bTypes.ids[ params.type ] = true;
	      }

	      return; // notifications are disabled during batching
	    }

	    if( !_p.notificationsEnabled ){ return; } // exit on disabled

	    var renderer = this.renderer();

	    renderer.notify(params);
	  },

	  notifications: function( bool ){
	    var p = this._private;

	    if( bool === undefined ){
	      return p.notificationsEnabled;
	    } else {
	      p.notificationsEnabled = bool ? true : false;
	    }
	  },

	  noNotifications: function( callback ){
	    this.notifications(false);
	    callback();
	    this.notifications(true);
	  },

	  startBatch: function(){
	    var _p = this._private;

	    if( _p.batchCount == null ){
	      _p.batchCount = 0;
	    }

	    if( _p.batchCount === 0 ){
	      _p.batchingStyle = _p.batchingNotify = true;
	      _p.batchStyleEles = this.collection();
	      _p.batchNotifyEles = this.collection();
	      _p.batchNotifyTypes = [];

	      _p.batchNotifyTypes.ids = {};
	    }

	    _p.batchCount++;

	    return this;
	  },

	  endBatch: function(){
	    var _p = this._private;

	    _p.batchCount--;

	    if( _p.batchCount === 0 ){
	      // update style for dirty eles
	      _p.batchingStyle = false;
	      _p.batchStyleEles.updateStyle();

	      // notify the renderer of queued eles and event types
	      _p.batchingNotify = false;
	      this.notify({
	        type: _p.batchNotifyTypes,
	        collection: _p.batchNotifyEles
	      });
	    }

	    return this;
	  },

	  batch: function( callback ){
	    this.startBatch();
	    callback();
	    this.endBatch();

	    return this;
	  },

	  // for backwards compatibility
	  batchData: function( map ){
	    var cy = this;

	    return this.batch(function(){
	      for( var id in map ){
	        var data = map[id];
	        var ele = cy.getElementById( id );

	        ele.data( data );
	      }
	    });
	  }
	});

	module.exports = corefn;

	},{}],37:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var corefn = ({

	  renderTo: function( context, zoom, pan, pxRatio ){
	    var r = this._private.renderer;

	    r.renderTo( context, zoom, pan, pxRatio );
	    return this;
	  },

	  renderer: function(){
	    return this._private.renderer;
	  },

	  forceRender: function(){
	    this.notify({
	      type: 'draw'
	    });

	    return this;
	  },

	  resize: function(){
	    this.notify({
	      type: 'resize'
	    });

	    this.trigger('resize');

	    return this;
	  },

	  initRenderer: function( options ){
	    var cy = this;

	    var RendererProto = cy.extension('renderer', options.name);
	    if( RendererProto == null ){
	      util.error('Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name);
	      return;
	    }

	    var rOpts = util.extend({}, options, {
	      cy: cy
	    });
	    var renderer = cy._private.renderer = new RendererProto( rOpts );

	    renderer.init( rOpts );

	  },

	  triggerOnRender: function(){
	    var cbs = this._private.onRenders;

	    for( var i = 0; i < cbs.length; i++ ){
	      var cb = cbs[i];

	      cb();
	    }

	    return this;
	  },

	  onRender: function( cb ){
	    this._private.onRenders.push( cb );

	    return this;
	  },

	  offRender: function( fn ){
	    var cbs = this._private.onRenders;

	    if( fn == null ){ // unbind all
	      this._private.onRenders = [];
	      return this;
	    }

	    for( var i = 0; i < cbs.length; i++ ){ // unbind specified
	      var cb = cbs[i];

	      if( fn === cb ){
	        cbs.splice( i, 1 );
	        break;
	      }
	    }

	    return this;
	  }

	});

	corefn.invalidateDimensions = corefn.resize;

	module.exports = corefn;

	},{"../util":94}],38:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var Collection = _dereq_('../collection');

	var corefn = ({

	  // get a collection
	  // - empty collection on no args
	  // - collection of elements in the graph on selector arg
	  // - guarantee a returned collection when elements or collection specified
	  collection: function( eles, opts ){

	    if( is.string( eles ) ){
	      return this.$( eles );

	    } else if( is.elementOrCollection( eles ) ){
	      return eles.collection();

	    } else if( is.array( eles ) ){
	      return Collection( this, eles, opts );
	    }

	    return Collection( this );
	  },

	  nodes: function( selector ){
	    var nodes = this.$(function(){
	      return this.isNode();
	    });

	    if( selector ){
	      return nodes.filter( selector );
	    }

	    return nodes;
	  },

	  edges: function( selector ){
	    var edges = this.$(function(){
	      return this.isEdge();
	    });

	    if( selector ){
	      return edges.filter( selector );
	    }

	    return edges;
	  },

	  // search the graph like jQuery
	  $: function( selector ){
	    var eles = new Collection( this, this._private.elements );

	    if( selector ){
	      return eles.filter( selector );
	    }

	    return eles;
	  }

	});

	// aliases
	corefn.elements = corefn.filter = corefn.$;

	module.exports = corefn;

	},{"../collection":23,"../is":77}],39:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var Style = _dereq_('../style');

	var corefn = ({

	  style: function( newStyle ){
	    if( newStyle ){
	      var s = this.setStyle( newStyle );

	      s.update();
	    }

	    return this._private.style;
	  },

	  setStyle: function( style ){
	    var _p = this._private;

	    if( is.stylesheet(style) ){
	      _p.style = style.generateStyle(this);

	    } else if( is.array(style) ) {
	      _p.style = Style.fromJson(this, style);

	    } else if( is.string(style) ){
	      _p.style = Style.fromString(this, style);

	    } else {
	      _p.style = Style( this );
	    }

	    return _p.style;
	  }
	});

	module.exports = corefn;

	},{"../is":77,"../style":86}],40:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	var corefn = ({

	  autolock: function(bool){
	    if( bool !== undefined ){
	      this._private.autolock = bool ? true : false;
	    } else {
	      return this._private.autolock;
	    }

	    return this; // chaining
	  },

	  autoungrabify: function(bool){
	    if( bool !== undefined ){
	      this._private.autoungrabify = bool ? true : false;
	    } else {
	      return this._private.autoungrabify;
	    }

	    return this; // chaining
	  },

	  autounselectify: function(bool){
	    if( bool !== undefined ){
	      this._private.autounselectify = bool ? true : false;
	    } else {
	      return this._private.autounselectify;
	    }

	    return this; // chaining
	  },

	  panningEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.panningEnabled = bool ? true : false;
	    } else {
	      return this._private.panningEnabled;
	    }

	    return this; // chaining
	  },

	  userPanningEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.userPanningEnabled = bool ? true : false;
	    } else {
	      return this._private.userPanningEnabled;
	    }

	    return this; // chaining
	  },

	  zoomingEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.zoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.zoomingEnabled;
	    }

	    return this; // chaining
	  },

	  userZoomingEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.userZoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.userZoomingEnabled;
	    }

	    return this; // chaining
	  },

	  boxSelectionEnabled: function( bool ){
	    if( bool !== undefined ){
	      this._private.boxSelectionEnabled = bool ? true : false;
	    } else {
	      return this._private.boxSelectionEnabled;
	    }

	    return this; // chaining
	  },

	  pan: function(){
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    switch( args.length ){
	    case 0: // .pan()
	      return pan;

	    case 1:

	      if( is.string( args[0] ) ){ // .pan('x')
	        dim = args[0];
	        return pan[ dim ];

	      } else if( is.plainObject( args[0] ) ) { // .pan({ x: 0, y: 100 })
	        if( !this._private.panningEnabled ){
	          return this;
	        }

	        dims = args[0];
	        x = dims.x;
	        y = dims.y;

	        if( is.number(x) ){
	          pan.x = x;
	        }

	        if( is.number(y) ){
	          pan.y = y;
	        }

	        this.trigger('pan viewport');
	      }
	      break;

	    case 2: // .pan('x', 100)
	      if( !this._private.panningEnabled ){
	        return this;
	      }

	      dim = args[0];
	      val = args[1];

	      if( (dim === 'x' || dim === 'y') && is.number(val) ){
	        pan[dim] = val;
	      }

	      this.trigger('pan viewport');
	      break;

	    default:
	      break; // invalid
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  panBy: function(params){
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    if( !this._private.panningEnabled ){
	      return this;
	    }

	    switch( args.length ){
	    case 1:

	      if( is.plainObject( args[0] ) ) { // .panBy({ x: 0, y: 100 })
	        dims = args[0];
	        x = dims.x;
	        y = dims.y;

	        if( is.number(x) ){
	          pan.x += x;
	        }

	        if( is.number(y) ){
	          pan.y += y;
	        }

	        this.trigger('pan viewport');
	      }
	      break;

	    case 2: // .panBy('x', 100)
	      dim = args[0];
	      val = args[1];

	      if( (dim === 'x' || dim === 'y') && is.number(val) ){
	        pan[dim] += val;
	      }

	      this.trigger('pan viewport');
	      break;

	    default:
	      break; // invalid
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  fit: function( elements, padding ){
	    var viewportState = this.getFitViewport( elements, padding );

	    if( viewportState ){
	      var _p = this._private;
	      _p.zoom = viewportState.zoom;
	      _p.pan = viewportState.pan;

	      this.trigger('pan zoom viewport');

	      this.notify({ // notify the renderer that the viewport changed
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  getFitViewport: function( elements, padding ){
	    if( is.number(elements) && padding === undefined ){ // elements is optional
	      padding = elements;
	      elements = undefined;
	    }

	    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
	      return;
	    }

	    var bb;

	    if( is.string(elements) ){
	      var sel = elements;
	      elements = this.$( sel );

	    } else if( is.boundingBox(elements) ){ // assume bb
	      var bbe = elements;
	      bb = {
	        x1: bbe.x1,
	        y1: bbe.y1,
	        x2: bbe.x2,
	        y2: bbe.y2
	      };

	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;

	    } else if( !is.elementOrCollection(elements) ){
	      elements = this.elements();
	    }

	    bb = bb || elements.boundingBox();

	    var w = this.width();
	    var h = this.height();
	    var zoom;
	    padding = is.number(padding) ? padding : 0;

	    if( !isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) &&  bb.w > 0 && bb.h > 0 ){
	      zoom = Math.min( (w - 2*padding)/bb.w, (h - 2*padding)/bb.h );

	      // crop zoom
	      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

	      var pan = { // now pan to middle
	        x: (w - zoom*( bb.x1 + bb.x2 ))/2,
	        y: (h - zoom*( bb.y1 + bb.y2 ))/2
	      };

	      return {
	        zoom: zoom,
	        pan: pan
	      };
	    }

	    return;
	  },

	  minZoom: function( zoom ){
	    if( zoom === undefined ){
	      return this._private.minZoom;
	    } else if( is.number(zoom) ){
	      this._private.minZoom = zoom;
	    }

	    return this;
	  },

	  maxZoom: function( zoom ){
	    if( zoom === undefined ){
	      return this._private.maxZoom;
	    } else if( is.number(zoom) ){
	      this._private.maxZoom = zoom;
	    }

	    return this;
	  },

	  zoom: function( params ){
	    var pos; // in rendered px
	    var zoom;

	    if( params === undefined ){ // then get the zoom
	      return this._private.zoom;

	    } else if( is.number(params) ){ // then set the zoom
	      zoom = params;

	    } else if( is.plainObject(params) ){ // then zoom about a point
	      zoom = params.level;

	      if( params.position ){
	        var p = params.position;
	        var pan = this._private.pan;
	        var z = this._private.zoom;

	        pos = { // convert to rendered px
	          x: p.x * z + pan.x,
	          y: p.y * z + pan.y
	        };
	      } else if( params.renderedPosition ){
	        pos = params.renderedPosition;
	      }

	      if( pos && !this._private.panningEnabled ){
	        return this; // panning disabled
	      }
	    }

	    if( !this._private.zoomingEnabled ){
	      return this; // zooming disabled
	    }

	    if( !is.number(zoom) || ( pos && (!is.number(pos.x) || !is.number(pos.y)) ) ){
	      return this; // can't zoom with invalid params
	    }

	    // crop zoom
	    zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	    zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

	    if( pos ){ // set zoom about position
	      var pan1 = this._private.pan;
	      var zoom1 = this._private.zoom;
	      var zoom2 = zoom;

	      var pan2 = {
	        x: -zoom2/zoom1 * (pos.x - pan1.x) + pos.x,
	        y: -zoom2/zoom1 * (pos.y - pan1.y) + pos.y
	      };

	      this._private.zoom = zoom;
	      this._private.pan = pan2;

	      var posChanged = pan1.x !== pan2.x || pan1.y !== pan2.y;
	      this.trigger(' zoom ' + (posChanged ? ' pan ' : '') + ' viewport ' );

	    } else { // just set the zoom
	      this._private.zoom = zoom;
	      this.trigger('zoom viewport');
	    }

	    this.notify({ // notify the renderer that the viewport changed
	      type: 'viewport'
	    });

	    return this; // chaining
	  },

	  viewport: function( opts ){
	    var _p = this._private;
	    var zoomDefd = true;
	    var panDefd = true;
	    var events = []; // to trigger
	    var zoomFailed = false;
	    var panFailed = false;

	    if( !opts ){ return this; }
	    if( !is.number(opts.zoom) ){ zoomDefd = false; }
	    if( !is.plainObject(opts.pan) ){ panDefd = false; }
	    if( !zoomDefd && !panDefd ){ return this; }

	    if( zoomDefd ){
	      var z = opts.zoom;

	      if( z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled ){
	        zoomFailed = true;

	      } else {
	        _p.zoom = z;

	        events.push('zoom');
	      }
	    }

	    if( panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled ){
	      var p = opts.pan;

	      if( is.number(p.x) ){
	        _p.pan.x = p.x;
	        panFailed = false;
	      }

	      if( is.number(p.y) ){
	        _p.pan.y = p.y;
	        panFailed = false;
	      }

	      if( !panFailed ){
	        events.push('pan');
	      }
	    }

	    if( events.length > 0 ){
	      events.push('viewport');
	      this.trigger( events.join(' ') );

	      this.notify({
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  center: function( elements ){
	    var pan = this.getCenterPan( elements );

	    if( pan ){
	      this._private.pan = pan;

	      this.trigger('pan viewport');

	      this.notify({ // notify the renderer that the viewport changed
	        type: 'viewport'
	      });
	    }

	    return this; // chaining
	  },

	  getCenterPan: function( elements, zoom ){
	    if( !this._private.panningEnabled ){
	      return;
	    }

	    if( is.string(elements) ){
	      var selector = elements;
	      elements = this.elements( selector );
	    } else if( !is.elementOrCollection(elements) ){
	      elements = this.elements();
	    }

	    var bb = elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    zoom = zoom === undefined ? this._private.zoom : zoom;

	    var pan = { // middle
	      x: (w - zoom*( bb.x1 + bb.x2 ))/2,
	      y: (h - zoom*( bb.y1 + bb.y2 ))/2
	    };

	    return pan;
	  },

	  reset: function(){
	    if( !this._private.panningEnabled || !this._private.zoomingEnabled ){
	      return this;
	    }

	    this.viewport({
	      pan: { x: 0, y: 0 },
	      zoom: 1
	    });

	    return this; // chaining
	  },

	  width: function(){
	    var container = this._private.container;

	    if( container ){
	      return container.clientWidth;
	    }

	    return 1; // fallback if no container (not 0 b/c can be used for dividing etc)
	  },

	  height: function(){
	    var container = this._private.container;

	    if( container ){
	      return container.clientHeight;
	    }

	    return 1; // fallback if no container (not 0 b/c can be used for dividing etc)
	  },

	  extent: function(){
	    var pan = this._private.pan;
	    var zoom = this._private.zoom;
	    var rb = this.renderedExtent();

	    var b = {
	      x1: ( rb.x1 - pan.x )/zoom,
	      x2: ( rb.x2 - pan.x )/zoom,
	      y1: ( rb.y1 - pan.y )/zoom,
	      y2: ( rb.y2 - pan.y )/zoom
	    };

	    b.w = b.x2 - b.x1;
	    b.h = b.y2 - b.y1;

	    return b;
	  },

	  renderedExtent: function(){
	    var width = this.width();
	    var height = this.height();

	    return {
	      x1: 0,
	      y1: 0,
	      x2: width,
	      y2: height,
	      w: width,
	      h: height
	    };
	  }
	});

	// aliases
	corefn.centre = corefn.center;

	// backwards compatibility
	corefn.autolockNodes = corefn.autolock;
	corefn.autoungrabifyNodes = corefn.autoungrabify;

	module.exports = corefn;

	},{"../is":77}],41:[function(_dereq_,module,exports){
	'use strict';

	// use this module to cherry pick functions into your prototype
	// (useful for functions shared between the core and collections, for example)

	// e.g.
	// var foo = define.foo({ /* params... */ })

	var util = _dereq_('./util');
	var is = _dereq_('./is');
	var Selector = _dereq_('./selector');
	var Promise = _dereq_('./promise');
	var Event = _dereq_('./event');
	var Animation = _dereq_('./animation');

	var define = {

	  // access data field
	  data: function( params ){
	    var defaults = {
	      field: 'data',
	      bindingEvent: 'data',
	      allowBinding: false,
	      allowSetting: false,
	      allowGetting: false,
	      settingEvent: 'data',
	      settingTriggersEvent: false,
	      triggerFnName: 'trigger',
	      immutableKeys: {}, // key => true if immutable
	      updateStyle: false,
	      onSet: function( self ){},
	      canSet: function( self ){ return true; }
	    };
	    params = util.extend({}, defaults, params);

	    return function dataImpl( name, value ){
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var single = selfIsArrayLike ? self[0] : self;

	      // .data('foo', ...)
	      if( is.string(name) ){ // set or get property

	        // .data('foo')
	        if( p.allowGetting && value === undefined ){ // get

	          var ret;
	          if( single ){
	            ret = single._private[ p.field ][ name ];
	          }
	          return ret;

	        // .data('foo', 'bar')
	        } else if( p.allowSetting && value !== undefined ) { // set
	          var valid = !p.immutableKeys[name];
	          if( valid ){
	            for( var i = 0, l = all.length; i < l; i++ ){
	              if( p.canSet( all[i] ) ){
	                all[i]._private[ p.field ][ name ] = value;
	              }
	            }

	            // update mappers if asked
	            if( p.updateStyle ){ self.updateStyle(); }

	            // call onSet callback
	            p.onSet( self );

	            if( p.settingTriggersEvent ){
	              self[ p.triggerFnName ]( p.settingEvent );
	            }
	          }
	        }

	      // .data({ 'foo': 'bar' })
	      } else if( p.allowSetting && is.plainObject(name) ){ // extend
	        var obj = name;
	        var k, v;

	        for( k in obj ){
	          v = obj[ k ];

	          var valid = !p.immutableKeys[k];
	          if( valid ){
	            for( var i = 0, l = all.length; i < l; i++ ){
	              if( p.canSet( all[i] ) ){
	                all[i]._private[ p.field ][ k ] = v;
	              }
	            }
	          }
	        }

	        // update mappers if asked
	        if( p.updateStyle ){ self.updateStyle(); }

	        // call onSet callback
	        p.onSet( self );

	        if( p.settingTriggersEvent ){
	          self[ p.triggerFnName ]( p.settingEvent );
	        }

	      // .data(function(){ ... })
	      } else if( p.allowBinding && is.fn(name) ){ // bind to event
	        var fn = name;
	        self.bind( p.bindingEvent, fn );

	      // .data()
	      } else if( p.allowGetting && name === undefined ){ // get whole object
	        var ret;
	        if( single ){
	          ret = single._private[ p.field ];
	        }
	        return ret;
	      }

	      return self; // maintain chainability
	    }; // function
	  }, // data

	  // remove data field
	  removeData: function( params ){
	    var defaults = {
	      field: 'data',
	      event: 'data',
	      triggerFnName: 'trigger',
	      triggerEvent: false,
	      immutableKeys: {} // key => true if immutable
	    };
	    params = util.extend({}, defaults, params);

	    return function removeDataImpl( names ){
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      // .removeData('foo bar')
	      if( is.string(names) ){ // then get the list of keys, and delete them
	        var keys = names.split(/\s+/);
	        var l = keys.length;

	        for( var i = 0; i < l; i++ ){ // delete each non-empty key
	          var key = keys[i];
	          if( is.emptyString(key) ){ continue; }

	          var valid = !p.immutableKeys[ key ]; // not valid if immutable
	          if( valid ){
	            for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
	              all[ i_a ]._private[ p.field ][ key ] = undefined;
	            }
	          }
	        }

	        if( p.triggerEvent ){
	          self[ p.triggerFnName ]( p.event );
	        }

	      // .removeData()
	      } else if( names === undefined ){ // then delete all keys

	        for( var i_a = 0, l_a = all.length; i_a < l_a; i_a++ ){
	          var _privateFields = all[ i_a ]._private[ p.field ];

	          for( var key in _privateFields ){
	            var validKeyToDelete = !p.immutableKeys[ key ];

	            if( validKeyToDelete ){
	              _privateFields[ key ] = undefined;
	            }
	          }
	        }

	        if( p.triggerEvent ){
	          self[ p.triggerFnName ]( p.event );
	        }
	      }

	      return self; // maintain chaining
	    }; // function
	  }, // removeData

	  // event function reusable stuff
	  event: {
	    regex: /(\w+)(\.\w+)?/, // regex for matching event strings (e.g. "click.namespace")
	    optionalTypeRegex: /(\w+)?(\.\w+)?/,
	    falseCallback: function(){ return false; }
	  },

	  // event binding
	  on: function( params ){
	    var defaults = {
	      unbindSelfOnTrigger: false,
	      unbindAllBindersOnTrigger: false
	    };
	    params = util.extend({}, defaults, params);

	    return function onImpl(events, selector, data, callback){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var eventsIsString = is.string(events);
	      var p = params;

	      if( is.plainObject(selector) ){ // selector is actually data
	        callback = data;
	        data = selector;
	        selector = undefined;
	      } else if( is.fn(selector) || selector === false ){ // selector is actually callback
	        callback = selector;
	        data = undefined;
	        selector = undefined;
	      }

	      if( is.fn(data) || data === false ){ // data is actually callback
	        callback = data;
	        data = undefined;
	      }

	      // if there isn't a callback, we can't really do anything
	      // (can't speak for mapped events arg version)
	      if( !(is.fn(callback) || callback === false) && eventsIsString ){
	        return self; // maintain chaining
	      }

	      if( eventsIsString ){ // then convert to map
	        var map = {};
	        map[ events ] = callback;
	        events = map;
	      }

	      for( var evts in events ){
	        callback = events[evts];
	        if( callback === false ){
	          callback = define.event.falseCallback;
	        }

	        if( !is.fn(callback) ){ continue; }

	        evts = evts.split(/\s+/);
	        for( var i = 0; i < evts.length; i++ ){
	          var evt = evts[i];
	          if( is.emptyString(evt) ){ continue; }

	          var match = evt.match( define.event.regex ); // type[.namespace]

	          if( match ){
	            var type = match[1];
	            var namespace = match[2] ? match[2] : undefined;

	            var listener = {
	              callback: callback, // callback to run
	              data: data, // extra data in eventObj.data
	              delegated: selector ? true : false, // whether the evt is delegated
	              selector: selector, // the selector to match for delegated events
	              selObj: new Selector(selector), // cached selector object to save rebuilding
	              type: type, // the event type (e.g. 'click')
	              namespace: namespace, // the event namespace (e.g. ".foo")
	              unbindSelfOnTrigger: p.unbindSelfOnTrigger,
	              unbindAllBindersOnTrigger: p.unbindAllBindersOnTrigger,
	              binders: all // who bound together
	            };

	            for( var j = 0; j < all.length; j++ ){
	              var _p = all[j]._private;

	              _p.listeners = _p.listeners || [];
	              _p.listeners.push( listener );
	            }
	          }
	        } // for events array
	      } // for events map

	      return self; // maintain chaining
	    }; // function
	  }, // on

	  eventAliasesOn: function( proto ){
	    var p = proto;

	    p.addListener = p.listen = p.bind = p.on;
	    p.removeListener = p.unlisten = p.unbind = p.off;
	    p.emit = p.trigger;

	    // this is just a wrapper alias of .on()
	    p.pon = p.promiseOn = function( events, selector ){
	      var self = this;
	      var args = Array.prototype.slice.call( arguments, 0 );

	      return new Promise(function( resolve, reject ){
	        var callback = function( e ){
	          self.off.apply( self, offArgs );

	          resolve( e );
	        };

	        var onArgs = args.concat([ callback ]);
	        var offArgs = onArgs.concat([]);

	        self.on.apply( self, onArgs );
	      });
	    };
	  },

	  off: function offImpl( params ){
	    var defaults = {
	    };
	    params = util.extend({}, defaults, params);

	    return function(events, selector, callback){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var eventsIsString = is.string(events);

	      if( arguments.length === 0 ){ // then unbind all

	        for( var i = 0; i < all.length; i++ ){
	          all[i]._private.listeners = [];
	        }

	        return self; // maintain chaining
	      }

	      if( is.fn(selector) || selector === false ){ // selector is actually callback
	        callback = selector;
	        selector = undefined;
	      }

	      if( eventsIsString ){ // then convert to map
	        var map = {};
	        map[ events ] = callback;
	        events = map;
	      }

	      for( var evts in events ){
	        callback = events[evts];

	        if( callback === false ){
	          callback = define.event.falseCallback;
	        }

	        evts = evts.split(/\s+/);
	        for( var h = 0; h < evts.length; h++ ){
	          var evt = evts[h];
	          if( is.emptyString(evt) ){ continue; }

	          var match = evt.match( define.event.optionalTypeRegex ); // [type][.namespace]
	          if( match ){
	            var type = match[1] ? match[1] : undefined;
	            var namespace = match[2] ? match[2] : undefined;

	            for( var i = 0; i < all.length; i++ ){ //
	              var listeners = all[i]._private.listeners = all[i]._private.listeners || [];

	              for( var j = 0; j < listeners.length; j++ ){
	                var listener = listeners[j];
	                var nsMatches = !namespace || namespace === listener.namespace;
	                var typeMatches = !type || listener.type === type;
	                var cbMatches = !callback || callback === listener.callback;
	                var listenerMatches = nsMatches && typeMatches && cbMatches;

	                // delete listener if it matches
	                if( listenerMatches ){
	                  listeners.splice(j, 1);
	                  j--;
	                }
	              } // for listeners
	            } // for all
	          } // if match
	        } // for events array

	      } // for events map

	      return self; // maintain chaining
	    }; // function
	  }, // off

	  trigger: function( params ){
	    var defaults = {};
	    params = util.extend({}, defaults, params);

	    return function triggerImpl(events, extraParams, fnToTrigger){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var eventsIsString = is.string(events);
	      var eventsIsObject = is.plainObject(events);
	      var eventsIsEvent = is.event(events);
	      var cy = this._private.cy || ( is.core(this) ? this : null );
	      var hasCompounds = cy ? cy.hasCompoundNodes() : false;

	      if( eventsIsString ){ // then make a plain event object for each event name
	        var evts = events.split(/\s+/);
	        events = [];

	        for( var i = 0; i < evts.length; i++ ){
	          var evt = evts[i];
	          if( is.emptyString(evt) ){ continue; }

	          var match = evt.match( define.event.regex ); // type[.namespace]
	          var type = match[1];
	          var namespace = match[2] ? match[2] : undefined;

	          events.push( {
	            type: type,
	            namespace: namespace
	          } );
	        }
	      } else if( eventsIsObject ){ // put in length 1 array
	        var eventArgObj = events;

	        events = [ eventArgObj ];
	      }

	      if( extraParams ){
	        if( !is.array(extraParams) ){ // make sure extra params are in an array if specified
	          extraParams = [ extraParams ];
	        }
	      } else { // otherwise, we've got nothing
	        extraParams = [];
	      }

	      for( var i = 0; i < events.length; i++ ){ // trigger each event in order
	        var evtObj = events[i];

	        for( var j = 0; j < all.length; j++ ){ // for each
	          var triggerer = all[j];
	          var listeners = triggerer._private.listeners = triggerer._private.listeners || [];
	          var triggererIsElement = is.element(triggerer);
	          var bubbleUp = triggererIsElement || params.layout;

	          // create the event for this element from the event object
	          var evt;

	          if( eventsIsEvent ){ // then just get the object
	            evt = evtObj;

	            evt.cyTarget = evt.cyTarget || triggerer;
	            evt.cy = evt.cy || cy;

	          } else { // then we have to make one
	            evt = new Event( evtObj, {
	              cyTarget: triggerer,
	              cy: cy,
	              namespace: evtObj.namespace
	            } );
	          }

	          // if a layout was specified, then put it in the typed event
	          if( evtObj.layout ){
	            evt.layout = evtObj.layout;
	          }

	          // if triggered by layout, put in event
	          if( params.layout ){
	            evt.layout = triggerer;
	          }

	          // create a rendered position based on the passed position
	          if( evt.cyPosition ){
	            var pos = evt.cyPosition;
	            var zoom = cy.zoom();
	            var pan = cy.pan();

	            evt.cyRenderedPosition = {
	              x: pos.x * zoom + pan.x,
	              y: pos.y * zoom + pan.y
	            };
	          }

	          if( fnToTrigger ){ // then override the listeners list with just the one we specified
	            listeners = [{
	              namespace: evt.namespace,
	              type: evt.type,
	              callback: fnToTrigger
	            }];
	          }

	          for( var k = 0; k < listeners.length; k++ ){ // check each listener
	            var lis = listeners[k];
	            var nsMatches = !lis.namespace || lis.namespace === evt.namespace;
	            var typeMatches = lis.type === evt.type;
	            var targetMatches = lis.delegated ? ( triggerer !== evt.cyTarget && is.element(evt.cyTarget) && lis.selObj.matches(evt.cyTarget) ) : (true); // we're not going to validate the hierarchy; that's too expensive
	            var listenerMatches = nsMatches && typeMatches && targetMatches;

	            if( listenerMatches ){ // then trigger it
	              var args = [ evt ];
	              args = args.concat( extraParams ); // add extra params to args list

	              if( lis.data ){ // add on data plugged into binding
	                evt.data = lis.data;
	              } else { // or clear it in case the event obj is reused
	                evt.data = undefined;
	              }

	              if( lis.unbindSelfOnTrigger || lis.unbindAllBindersOnTrigger ){ // then remove listener
	                listeners.splice(k, 1);
	                k--;
	              }

	              if( lis.unbindAllBindersOnTrigger ){ // then delete the listener for all binders
	                var binders = lis.binders;
	                for( var l = 0; l < binders.length; l++ ){
	                  var binder = binders[l];
	                  if( !binder || binder === triggerer ){ continue; } // already handled triggerer or we can't handle it

	                  var binderListeners = binder._private.listeners;
	                  for( var m = 0; m < binderListeners.length; m++ ){
	                    var binderListener = binderListeners[m];

	                    if( binderListener === lis ){ // delete listener from list
	                      binderListeners.splice(m, 1);
	                      m--;
	                    }
	                  }
	                }
	              }

	              // run the callback
	              var context = lis.delegated ? evt.cyTarget : triggerer;
	              var ret = lis.callback.apply( context, args );

	              if( ret === false || evt.isPropagationStopped() ){
	                // then don't bubble
	                bubbleUp = false;

	                if( ret === false ){
	                  // returning false is a shorthand for stopping propagation and preventing the def. action
	                  evt.stopPropagation();
	                  evt.preventDefault();
	                }
	              }
	            } // if listener matches
	          } // for each listener

	          // bubble up event for elements
	          if( bubbleUp ){
	            var parent = hasCompounds ? triggerer._private.parent : null;
	            var hasParent = parent != null && parent.length !== 0;

	            if( hasParent ){ // then bubble up to parent
	              parent = parent[0];
	              parent.trigger(evt);
	            } else { // otherwise, bubble up to the core
	              cy.trigger(evt);
	            }
	          }

	        } // for each of all
	      } // for each event

	      return self; // maintain chaining
	    }; // function
	  }, // trigger

	  animated: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function animatedImpl(){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return false; }

	      var ele = all[0];

	      if( ele ){
	        return ele._private.animation.current.length > 0;
	      }
	    };
	  }, // animated

	  clearQueue: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function clearQueueImpl(){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[i];
	        ele._private.animation.queue = [];
	      }

	      return this;
	    };
	  }, // clearQueue

	  delay: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function delayImpl( time, complete ){
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      return this.animate({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  }, // delay

	  delayAnimation: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function delayAnimationImpl( time, complete ){
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      return this.animation({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  }, // delay

	  animation: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function animationImpl( properties, params ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;
	      var isCore = !selfIsArrayLike;
	      var isEles = !isCore;

	      if( !cy.styleEnabled() ){ return this; }

	      var style = cy.style();

	      properties = util.extend( {}, properties, params );

	      if( properties.duration === undefined ){
	        properties.duration = 400;
	      }

	      switch( properties.duration ){
	      case 'slow':
	        properties.duration = 600;
	        break;
	      case 'fast':
	        properties.duration = 200;
	        break;
	      }

	      var propertiesEmpty = true;
	      if( properties ){ for( var i in properties ){ // jshint ignore:line
	        propertiesEmpty = false;
	        break;
	      } }

	      if( propertiesEmpty ){
	        return new Animation( all[0], properties ); // nothing to animate
	      }

	      if( isEles ){
	        properties.style = style.getPropsList( properties.style || properties.css );

	        properties.css = undefined;
	      }

	      if( properties.renderedPosition && isEles ){
	        var rpos = properties.renderedPosition;
	        var pan = cy.pan();
	        var zoom = cy.zoom();

	        properties.position = {
	          x: ( rpos.x - pan.x ) /zoom,
	          y: ( rpos.y - pan.y ) /zoom
	        };
	      }

	      // override pan w/ panBy if set
	      if( properties.panBy && isCore ){
	        var panBy = properties.panBy;
	        var cyPan = cy.pan();

	        properties.pan = {
	          x: cyPan.x + panBy.x,
	          y: cyPan.y + panBy.y
	        };
	      }

	      // override pan w/ center if set
	      var center = properties.center || properties.centre;
	      if( center && isCore ){
	        var centerPan = cy.getCenterPan( center.eles, properties.zoom );

	        if( centerPan ){
	          properties.pan = centerPan;
	        }
	      }

	      // override pan & zoom w/ fit if set
	      if( properties.fit && isCore ){
	        var fit = properties.fit;
	        var fitVp = cy.getFitViewport( fit.eles || fit.boundingBox, fit.padding );

	        if( fitVp ){
	          properties.pan = fitVp.pan;
	          properties.zoom = fitVp.zoom;
	        }
	      }

	      return new Animation( all[0], properties );
	    };
	  }, // animate

	  animate: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function animateImpl( properties, params ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      if( params ){
	        properties = util.extend( {}, properties, params );
	      }

	      // manually hook and run the animation
	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[i];
	        var queue = ele.animated() && (properties.queue === undefined || properties.queue);

	        var ani = ele.animation( properties, (queue ? { queue: true } : undefined) );

	        ani.play();
	      }

	      return this; // chaining
	    };
	  }, // animate

	  stop: function( fnParams ){
	    var defaults = {};
	    fnParams = util.extend({}, defaults, fnParams);

	    return function stopImpl( clearQueue, jumpToEnd ){
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      var cy = this._private.cy || this;

	      if( !cy.styleEnabled() ){ return this; }

	      for( var i = 0; i < all.length; i++ ){
	        var ele = all[i];
	        var _p = ele._private;
	        var anis = _p.animation.current;

	        for( var j = 0; j < anis.length; j++ ){
	          var ani = anis[j];
	          var ani_p = ani._private;

	          if( jumpToEnd ){
	            // next iteration of the animation loop, the animation
	            // will go straight to the end and be removed
	            ani_p.duration = 0;
	          }
	        }

	        // clear the queue of future animations
	        if( clearQueue ){
	          _p.animation.queue = [];
	        }

	        if( !jumpToEnd ){
	          _p.animation.current = [];
	        }
	      }

	      // we have to notify (the animation loop doesn't do it for us on `stop`)
	      cy.notify({
	        collection: this,
	        type: 'draw'
	      });

	      return this;
	    };
	  } // stop

	}; // define

	module.exports = define;

	},{"./animation":1,"./event":42,"./is":77,"./promise":80,"./selector":81,"./util":94}],42:[function(_dereq_,module,exports){
	'use strict';

	/*!
	Event object based on jQuery events, MIT license

	https://jquery.org/license/
	https://tldrlegal.com/license/mit-license
	https://github.com/jquery/jquery/blob/master/src/event.js
	*/

	var Event = function( src, props ) {
	  // Allow instantiation without the 'new' keyword
	  if ( !(this instanceof Event) ) {
	    return new Event( src, props );
	  }

	  // Event object
	  if ( src && src.type ) {
	    this.originalEvent = src;
	    this.type = src.type;

	    // Events bubbling up the document may have been marked as prevented
	    // by a handler lower down the tree; reflect the correct value.
	    this.isDefaultPrevented = ( src.defaultPrevented ) ? returnTrue : returnFalse;

	  // Event type
	  } else {
	    this.type = src;
	  }

	  // Put explicitly provided properties onto the event object
	  if ( props ) {
	    // util.extend( this, props );

	    // more efficient to manually copy fields we use
	    this.type = props.type !== undefined ? props.type : this.type;
	    this.cy = props.cy;
	    this.cyTarget = props.cyTarget;
	    this.cyPosition = props.cyPosition;
	    this.cyRenderedPosition = props.cyRenderedPosition;
	    this.namespace = props.namespace;
	    this.layout = props.layout;
	    this.data = props.data;
	    this.message = props.message;
	  }

	  // Create a timestamp if incoming event doesn't have one
	  this.timeStamp = src && src.timeStamp || Date.now();
	};

	function returnFalse() {
	  return false;
	}

	function returnTrue() {
	  return true;
	}

	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	Event.prototype = {
	  instanceString: function(){
	    return 'event';
	  },

	  preventDefault: function() {
	    this.isDefaultPrevented = returnTrue;

	    var e = this.originalEvent;
	    if ( !e ) {
	      return;
	    }

	    // if preventDefault exists run it on the original event
	    if ( e.preventDefault ) {
	      e.preventDefault();
	    }
	  },

	  stopPropagation: function() {
	    this.isPropagationStopped = returnTrue;

	    var e = this.originalEvent;
	    if ( !e ) {
	      return;
	    }

	    // if stopPropagation exists run it on the original event
	    if ( e.stopPropagation ) {
	      e.stopPropagation();
	    }
	  },

	  stopImmediatePropagation: function() {
	    this.isImmediatePropagationStopped = returnTrue;
	    this.stopPropagation();
	  },

	  isDefaultPrevented: returnFalse,
	  isPropagationStopped: returnFalse,
	  isImmediatePropagationStopped: returnFalse
	};

	module.exports = Event;

	},{}],43:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('./util');
	var define = _dereq_('./define');
	var Collection = _dereq_('./collection');
	var Core = _dereq_('./core');
	var incExts = _dereq_('./extensions');
	var is = _dereq_('./is');

	// registered extensions to cytoscape, indexed by name
	var extensions = {};

	// registered modules for extensions, indexed by name
	var modules = {};

	function setExtension( type, name, registrant ){

	  var ext = registrant;

	  if( type === 'core' ){
	    Core.prototype[ name ] = registrant;

	  } else if( type === 'collection' ){
	    Collection.prototype[ name ] = registrant;

	  } else if( type === 'layout' ){
	    // fill in missing layout functions in the prototype

	    var Layout = function( options ){
	      this.options = options;

	      registrant.call( this, options );

	      // make sure layout has _private for use w/ std apis like .on()
	      if( !is.plainObject(this._private) ){
	        this._private = {};
	      }

	      this._private.cy = options.cy;
	      this._private.listeners = [];
	    };

	    var layoutProto = Layout.prototype = Object.create( registrant.prototype );

	    var optLayoutFns = [];

	    for( var i = 0; i < optLayoutFns.length; i++ ){
	      var fnName = optLayoutFns[i];

	      layoutProto[fnName] = layoutProto[fnName] || function(){ return this; };
	    }

	    // either .start() or .run() is defined, so autogen the other
	    if( layoutProto.start && !layoutProto.run ){
	      layoutProto.run = function(){ this.start(); return this; };
	    } else if( !layoutProto.start && layoutProto.run ){
	      layoutProto.start = function(){ this.run(); return this; };
	    }

	    if( !layoutProto.stop ){
	      layoutProto.stop = function(){
	        var opts = this.options;

	        if( opts && opts.animate ){
	          var anis = this.animations;
	          for( var i = 0; i < anis.length; i++ ){
	            anis[i].stop();
	          }
	        }

	        this.trigger('layoutstop');

	        return this;
	      };
	    }

	    if( !layoutProto.destroy ){
	      layoutProto.destroy = function(){
	        return this;
	      };
	    }

	    layoutProto.on = define.on({ layout: true });
	    layoutProto.one = define.on({ layout: true, unbindSelfOnTrigger: true });
	    layoutProto.once = define.on({ layout: true, unbindAllBindersOnTrigger: true });
	    layoutProto.off = define.off({ layout: true });
	    layoutProto.trigger = define.trigger({ layout: true });

	    define.eventAliasesOn( layoutProto );

	    ext = Layout; // replace with our wrapped layout

	  } else if( type === 'renderer' && name !== 'null' && name !== 'base' ){
	    // user registered renderers inherit from base

	    var bProto = getExtension( 'renderer', 'base' ).prototype;
	    var rProto = registrant.prototype;

	    for( var pName in bProto ){
	      var pVal = bProto[ pName ];
	      var existsInR = rProto[ pName ] != null;

	      if( existsInR ){
	        util.error('Can not register renderer `' + name + '` since it overrides `' + pName + '` in its prototype');
	        return;
	      }

	      rProto[ pName ] = pVal; // take impl from base
	    }

	    bProto.clientFunctions.forEach(function( name ){
	      rProto[ name ] = rProto[ name ] || function(){
	        util.error('Renderer does not implement `renderer.' + name + '()` on its prototype');
	      };
	    });

	  }

	  return util.setMap({
	    map: extensions,
	    keys: [ type, name ],
	    value: ext
	  });
	}

	function getExtension(type, name){
	  return util.getMap({
	    map: extensions,
	    keys: [ type, name ]
	  });
	}

	function setModule(type, name, moduleType, moduleName, registrant){
	  return util.setMap({
	    map: modules,
	    keys: [ type, name, moduleType, moduleName ],
	    value: registrant
	  });
	}

	function getModule(type, name, moduleType, moduleName){
	  return util.getMap({
	    map: modules,
	    keys: [ type, name, moduleType, moduleName ]
	  });
	}

	var extension = function(){
	  // e.g. extension('renderer', 'svg')
	  if( arguments.length === 2 ){
	    return getExtension.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', { ... })
	  else if( arguments.length === 3 ){
	    return setExtension.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
	  else if( arguments.length === 4 ){
	    return getModule.apply(null, arguments);
	  }

	  // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
	  else if( arguments.length === 5 ){
	    return setModule.apply(null, arguments);
	  }

	  else {
	    util.error('Invalid extension access syntax');
	  }

	};

	// allows a core instance to access extensions internally
	Core.prototype.extension = extension;

	// included extensions
	incExts.forEach(function( group ){
	  group.extensions.forEach(function( ext ){
	    setExtension( group.type, ext.name, ext.impl );
	  });
	});

	module.exports = extension;

	},{"./collection":23,"./core":34,"./define":41,"./extensions":44,"./is":77,"./util":94}],44:[function(_dereq_,module,exports){
	'use strict';

	module.exports = [
	  {
	    type: 'layout',
	    extensions: _dereq_('./layout')
	  },

	  {
	    type: 'renderer',
	    extensions: _dereq_('./renderer')
	  }
	];

	},{"./layout":50,"./renderer":72}],45:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');
	var is = _dereq_('../../is');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
	  padding: 30, // padding on fit
	  circle: false, // put depths in concentric circles if true, put depths top down if false
	  spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  roots: undefined, // the roots of the trees
	  maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function BreadthFirstLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	BreadthFirstLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');
	  var graph = eles;

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var roots;
	  if( is.elementOrCollection(options.roots) ){
	    roots = options.roots;
	  } else if( is.array(options.roots) ){
	    var rootsArray = [];

	    for( var i = 0; i < options.roots.length; i++ ){
	      var id = options.roots[i];
	      var ele = cy.getElementById( id );
	      rootsArray.push( ele );
	    }

	    roots = cy.collection( rootsArray );
	  } else if( is.string(options.roots) ){
	    roots = cy.$( options.roots );

	  } else {
	    if( options.directed ){
	      roots = nodes.roots();
	    } else {
	      var components = [];
	      var unhandledNodes = nodes;

	      while( unhandledNodes.length > 0 ){
	        var currComp = cy.collection();

	        eles.bfs({
	          roots: unhandledNodes[0],
	          visit: function(i, depth, node, edge, pNode){
	            currComp = currComp.add( node );
	          },
	          directed: false
	        });

	        unhandledNodes = unhandledNodes.not( currComp );
	        components.push( currComp );
	      }

	      roots = cy.collection();
	      for( var i = 0; i < components.length; i++ ){
	        var comp = components[i];
	        var maxDegree = comp.maxDegree( false );
	        var compRoots = comp.filter(function(){
	          return this.degree(false) === maxDegree;
	        });

	        roots = roots.add( compRoots );
	      }

	    }
	  }


	  var depths = [];
	  var foundByBfs = {};
	  var id2depth = {};
	  var prevNode = {};
	  var prevEdge = {};
	  var successors = {};

	  // find the depths of the nodes
	  graph.bfs({
	    roots: roots,
	    directed: options.directed,
	    visit: function(i, depth, node, edge, pNode){
	      var ele = this[0];
	      var id = ele.id();

	      if( !depths[depth] ){
	        depths[depth] = [];
	      }

	      depths[depth].push( ele );
	      foundByBfs[ id ] = true;
	      id2depth[ id ] = depth;
	      prevNode[ id ] = pNode;
	      prevEdge[ id ] = edge;

	      if( pNode ){
	        var prevId = pNode.id();
	        var succ = successors[ prevId ] = successors[ prevId ] || [];

	        succ.push( node );
	      }
	    }
	  });

	  // check for nodes not found by bfs
	  var orphanNodes = [];
	  for( var i = 0; i < nodes.length; i++ ){
	    var ele = nodes[i];

	    if( foundByBfs[ ele.id() ] ){
	      continue;
	    } else {
	      orphanNodes.push( ele );
	    }
	  }

	  // assign orphan nodes a depth from their neighborhood
	  var maxChecks = orphanNodes.length * 3;
	  var checks = 0;
	  while( orphanNodes.length !== 0 && checks < maxChecks ){
	    var node = orphanNodes.shift();
	    var neighbors = node.neighborhood().nodes();
	    var assignedDepth = false;

	    for( var i = 0; i < neighbors.length; i++ ){
	      var depth = id2depth[ neighbors[i].id() ];

	      if( depth !== undefined ){
	        depths[depth].push( node );
	        assignedDepth = true;
	        break;
	      }
	    }

	    if( !assignedDepth ){
	      orphanNodes.push( node );
	    }

	    checks++;
	  }

	  // assign orphan nodes that are still left to the depth of their subgraph
	  while( orphanNodes.length !== 0 ){
	    var node = orphanNodes.shift();
	    //var subgraph = graph.bfs( node ).path;
	    var assignedDepth = false;

	    // for( var i = 0; i < subgraph.length; i++ ){
	    //   var depth = id2depth[ subgraph[i].id() ];

	    //   if( depth !== undefined ){
	    //     depths[depth].push( node );
	    //     assignedDepth = true;
	    //     break;
	    //   }
	    // }

	    if( !assignedDepth ){ // worst case if the graph really isn't tree friendly, then just dump it in 0
	      if( depths.length === 0 ){
	        depths.push([]);
	      }

	      depths[0].push( node );
	    }
	  }

	  // assign the nodes a depth and index
	  var assignDepthsToEles = function(){
	    for( var i = 0; i < depths.length; i++ ){
	      var eles = depths[i];

	      for( var j = 0; j < eles.length; j++ ){
	        var ele = eles[j];

	        ele._private.scratch.breadthfirst = {
	          depth: i,
	          index: j
	        };
	      }
	    }
	  };
	  assignDepthsToEles();


	  var intersectsDepth = function( node ){ // returns true if has edges pointing in from a higher depth
	    var edges = node.connectedEdges(function(){
	      return this.data('target') === node.id();
	    });
	    var thisInfo = node._private.scratch.breadthfirst;
	    var highestDepthOfOther = 0;
	    var highestOther;
	    for( var i = 0; i < edges.length; i++ ){
	      var edge = edges[i];
	      var otherNode = edge.source()[0];
	      var otherInfo = otherNode._private.scratch.breadthfirst;

	      if( thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth ){
	        highestDepthOfOther = otherInfo.depth;
	        highestOther = otherNode;
	      }
	    }

	    return highestOther;
	  };

	   // make maximal if so set by adjusting depths
	  for( var adj = 0; adj < options.maximalAdjustments; adj++ ){

	    var nDepths = depths.length;
	    var elesToMove = [];
	    for( var i = 0; i < nDepths; i++ ){
	      var depth = depths[i];

	      var nDepth = depth.length;
	      for( var j = 0; j < nDepth; j++ ){
	        var ele = depth[j];
	        var info = ele._private.scratch.breadthfirst;
	        var intEle = intersectsDepth(ele);

	        if( intEle ){
	          info.intEle = intEle;
	          elesToMove.push( ele );
	        }
	      }
	    }

	    for( var i = 0; i < elesToMove.length; i++ ){
	      var ele = elesToMove[i];
	      var info = ele._private.scratch.breadthfirst;
	      var intEle = info.intEle;
	      var intInfo = intEle._private.scratch.breadthfirst;

	      depths[ info.depth ].splice( info.index, 1 ); // remove from old depth & index

	      // add to end of new depth
	      var newDepth = intInfo.depth + 1;
	      while( newDepth > depths.length - 1 ){
	        depths.push([]);
	      }
	      depths[ newDepth ].push( ele );

	      info.depth = newDepth;
	      info.index = depths[newDepth].length - 1;
	    }

	    assignDepthsToEles();
	  }

	  // find min distance we need to leave between nodes
	  var minDistance = 0;
	  if( options.avoidOverlap ){
	    for( var i = 0; i < nodes.length; i++ ){
	      var n = nodes[i];
	      var nbb = n.boundingBox();
	      var w = nbb.w;
	      var h = nbb.h;

	      minDistance = Math.max(minDistance, w, h);
	    }
	    minDistance *= options.spacingFactor; // just to have some nice spacing
	  }

	  // get the weighted percent for an element based on its connectivity to other levels
	  var cachedWeightedPercent = {};
	  var getWeightedPercent = function( ele ){
	    if( cachedWeightedPercent[ ele.id() ] ){
	      return cachedWeightedPercent[ ele.id() ];
	    }

	    var eleDepth = ele._private.scratch.breadthfirst.depth;
	    var neighbors = ele.neighborhood().nodes().not(':parent');
	    var percent = 0;
	    var samples = 0;

	    for( var i = 0; i < neighbors.length; i++ ){
	      var neighbor = neighbors[i];
	      var bf = neighbor._private.scratch.breadthfirst;
	      var index = bf.index;
	      var depth = bf.depth;
	      var nDepth = depths[depth].length;

	      if( eleDepth > depth || eleDepth === 0 ){ // only get influenced by elements above
	        percent += index / nDepth;
	        samples++;
	      }
	    }

	    samples = Math.max(1, samples);
	    percent = percent / samples;

	    if( samples === 0 ){ // so lone nodes have a "don't care" state in sorting
	      percent = undefined;
	    }

	    cachedWeightedPercent[ ele.id() ] = percent;
	    return percent;
	  };


	  // rearrange the indices in each depth level based on connectivity

	  var sortFn = function(a, b){
	    var apct = getWeightedPercent( a );
	    var bpct = getWeightedPercent( b );

	    return apct - bpct;
	  };

	  for( var times = 0; times < 3; times++ ){ // do it a few times b/c the depths are dynamic and we want a more stable result

	    for( var i = 0; i < depths.length; i++ ){
	      depths[i] = depths[i].sort( sortFn );
	    }
	    assignDepthsToEles(); // and update

	  }

	  var biggestDepthSize = 0;
	  for( var i = 0; i < depths.length; i++ ){
	    biggestDepthSize = Math.max( depths[i].length, biggestDepthSize );
	  }

	  var center = {
	    x: bb.x1 + bb.w/2,
	    y: bb.x1 + bb.h/2
	  };

	  var getPosition = function( ele, isBottomDepth ){
	    var info = ele._private.scratch.breadthfirst;
	    var depth = info.depth;
	    var index = info.index;
	    var depthSize = depths[depth].length;

	    var distanceX = Math.max( bb.w / (depthSize + 1), minDistance );
	    var distanceY = Math.max( bb.h / (depths.length + 1), minDistance );
	    var radiusStepSize = Math.min( bb.w / 2 / depths.length, bb.h / 2 / depths.length );
	    radiusStepSize = Math.max( radiusStepSize, minDistance );

	    if( !options.circle ){

	      var epos = {
	        x: center.x + (index + 1 - (depthSize + 1)/2) * distanceX,
	        y: (depth + 1) * distanceY
	      };

	      if( isBottomDepth ){
	        return epos;
	      }

	      // var succs = successors[ ele.id() ];
	      // if( succs ){
	      //   epos.x = 0;
	      //
	      //   for( var i = 0 ; i < succs.length; i++ ){
	      //     var spos = pos[ succs[i].id() ];
	      //
	      //     epos.x += spos.x;
	      //   }
	      //
	      //   epos.x /= succs.length;
	      // } else {
	      //   //debugger;
	      // }

	      return epos;

	    } else {
	      if( options.circle ){
	        var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize/2 : 0);
	        var theta = 2 * Math.PI / depths[depth].length * index;

	        if( depth === 0 && depths[0].length === 1 ){
	          radius = 1;
	        }

	        return {
	          x: center.x + radius * Math.cos(theta),
	          y: center.y + radius * Math.sin(theta)
	        };

	      } else {
	        return {
	          x: center.x + (index + 1 - (depthSize + 1)/2) * distanceX,
	          y: (depth + 1) * distanceY
	        };
	      }
	    }

	  };

	  // get positions in reverse depth order
	  var pos = {};
	  for( var i = depths.length - 1; i >=0; i-- ){
	    var depth = depths[i];

	    for( var j = 0; j < depth.length; j++ ){
	      var node = depth[j];

	      pos[ node.id() ] = getPosition( node, i === depths.length - 1 );
	    }
	  }

	  nodes.layoutPositions(this, options, function(){
	    return pos[ this.id() ];
	  });

	  return this; // chaining
	};

	module.exports = BreadthFirstLayout;

	},{"../../is":77,"../../math":79,"../../util":94}],46:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');
	var is = _dereq_('../../is');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space
	  radius: undefined, // the radius of the circle
	  startAngle: 3/2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function CircleLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	CircleLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var nodes = eles.nodes().not(':parent');

	  if( options.sort ){
	    nodes = nodes.sort( options.sort );
	  }

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var center = {
	    x: bb.x1 + bb.w/2,
	    y: bb.y1 + bb.h/2
	  };

	  var sweep = options.sweep === undefined ? 2*Math.PI - 2*Math.PI/nodes.length : options.sweep;

	  var dTheta = sweep / ( Math.max(1, nodes.length - 1) );
	  var r;

	  var minDistance = 0;
	  for( var i = 0; i < nodes.length; i++ ){
	    var n = nodes[i];
	    var nbb = n.boundingBox();
	    var w = nbb.w;
	    var h = nbb.h;

	    minDistance = Math.max(minDistance, w, h);
	  }

	  if( is.number(options.radius) ){
	    r = options.radius;
	  } else if( nodes.length <= 1 ){
	    r = 0;
	  } else {
	    r = Math.min( bb.h, bb.w )/2 - minDistance;
	  }

	  // calculate the radius
	  if( nodes.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
	    minDistance *= 1.75; // just to have some nice spacing

	    var dcos = Math.cos(dTheta) - Math.cos(0);
	    var dsin = Math.sin(dTheta) - Math.sin(0);
	    var rMin = Math.sqrt( minDistance * minDistance / ( dcos*dcos + dsin*dsin ) ); // s.t. no nodes overlapping
	    r = Math.max( rMin, r );
	  }

	  var getPos = function( i, ele ){
	    var theta = options.startAngle + i * dTheta * ( clockwise ? 1 : -1 );

	    var rx = r * Math.cos( theta );
	    var ry = r * Math.sin( theta );
	    var pos = {
	      x: center.x + rx,
	      y: center.y + ry
	    };

	    return pos;
	  };

	  nodes.layoutPositions( this, options, getPos );

	  return this; // chaining
	};

	module.exports = CircleLayout;

	},{"../../is":77,"../../math":79,"../../util":94}],47:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // the padding on fit
	  startAngle: 3/2 * Math.PI, // where nodes start in radians
	  sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
	  minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  height: undefined, // height of layout area (overrides container height)
	  width: undefined, // width of layout area (overrides container width)
	  concentric: function(node){ // returns numeric value for each node, placing higher nodes in levels towards the centre
	    return node.degree();
	  },
	  levelWidth: function(nodes){ // the variation of concentric values in each level
	    return nodes.maxDegree() / 4;
	  },
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function ConcentricLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	ConcentricLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

	  var cy = params.cy;

	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var center = {
	    x: bb.x1 + bb.w/2,
	    y: bb.y1 + bb.h/2
	  };

	  var nodeValues = []; // { node, value }
	  var theta = options.startAngle;
	  var maxNodeSize = 0;

	  for( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[i];
	    var value;

	    // calculate the node value
	    value = options.concentric.apply(node, [ node ]);
	    nodeValues.push({
	      value: value,
	      node: node
	    });

	    // for style mapping
	    node._private.scratch.concentric = value;
	  }

	  // in case we used the `concentric` in style
	  nodes.updateStyle();

	  // calculate max size now based on potentially updated mappers
	  for( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[i];
	    var nbb = node.boundingBox();

	    maxNodeSize = Math.max( maxNodeSize, nbb.w, nbb.h );
	  }

	  // sort node values in descreasing order
	  nodeValues.sort(function(a, b){
	    return b.value - a.value;
	  });

	  var levelWidth = options.levelWidth( nodes );

	  // put the values into levels
	  var levels = [ [] ];
	  var currentLevel = levels[0];
	  for( var i = 0; i < nodeValues.length; i++ ){
	    var val = nodeValues[i];

	    if( currentLevel.length > 0 ){
	      var diff = Math.abs( currentLevel[0].value - val.value );

	      if( diff >= levelWidth ){
	        currentLevel = [];
	        levels.push( currentLevel );
	      }
	    }

	    currentLevel.push( val );
	  }

	  // create positions from levels

	  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

	  if( !options.avoidOverlap ){ // then strictly constrain to bb
	    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
	    var maxR = ( Math.min(bb.w, bb.h) / 2 - minDist );
	    var rStep = maxR / ( levels.length + firstLvlHasMulti ? 1 : 0 );

	    minDist = Math.min( minDist, rStep );
	  }

	  // find the metrics for each level
	  var r = 0;
	  for( var i = 0; i < levels.length; i++ ){
	    var level = levels[i];
	    var sweep = options.sweep === undefined ? 2*Math.PI - 2*Math.PI/level.length : options.sweep;
	    var dTheta = level.dTheta = sweep / ( Math.max(1, level.length - 1) );

	    // calculate the radius
	    if( level.length > 1 && options.avoidOverlap ){ // but only if more than one node (can't overlap)
	      var dcos = Math.cos(dTheta) - Math.cos(0);
	      var dsin = Math.sin(dTheta) - Math.sin(0);
	      var rMin = Math.sqrt( minDist * minDist / ( dcos*dcos + dsin*dsin ) ); // s.t. no nodes overlapping

	      r = Math.max( rMin, r );
	    }

	    level.r = r;

	    r += minDist;
	  }

	  if( options.equidistant ){
	    var rDeltaMax = 0;
	    var r = 0;

	    for( var i = 0; i < levels.length; i++ ){
	      var level = levels[i];
	      var rDelta = level.r - r;

	      rDeltaMax = Math.max( rDeltaMax, rDelta );
	    }

	    r = 0;
	    for( var i = 0; i < levels.length; i++ ){
	      var level = levels[i];

	      if( i === 0 ){
	        r = level.r;
	      }

	      level.r = r;

	      r += rDeltaMax;
	    }
	  }

	  // calculate the node positions
	  var pos = {}; // id => position
	  for( var i = 0; i < levels.length; i++ ){
	    var level = levels[i];
	    var dTheta = level.dTheta;
	    var r = level.r;

	    for( var j = 0; j < level.length; j++ ){
	      var val = level[j];
	      var theta = options.startAngle + (clockwise ? 1 : -1) * dTheta * j;

	      var p = {
	        x: center.x + r * Math.cos(theta),
	        y: center.y + r * Math.sin(theta)
	      };

	      pos[ val.node.id() ] = p;
	    }
	  }

	  // position the nodes
	  nodes.layoutPositions(this, options, function(){
	    var id = this.id();

	    return pos[id];
	  });

	  return this; // chaining
	};

	module.exports = ConcentricLayout;

	},{"../../math":79,"../../util":94}],48:[function(_dereq_,module,exports){
	'use strict';

	/*
	The CoSE layout was written by Gerardo Huck.
	https://www.linkedin.com/in/gerardohuck/

	Based on the following article:
	http://dl.acm.org/citation.cfm?id=1498047

	Modifications tracked on Github.
	*/

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');
	var Thread = _dereq_('../../thread');
	var is = _dereq_('../../is');

	var DEBUG;

	/**
	 * @brief :  default layout options
	 */
	var defaults = {
	  // Called on `layoutready`
	  ready               : function() {},

	  // Called on `layoutstop`
	  stop                : function() {},

	  // Whether to animate while running the layout
	  animate             : true,

	  // The layout animates only after this many milliseconds
	  // (prevents flashing on fast runs)
	  animationThreshold  : 250,

	  // Number of iterations between consecutive screen positions update
	  // (0 -> only updated on the end)
	  refresh             : 20,

	  // Whether to fit the network view after when done
	  fit                 : true,

	  // Padding on fit
	  padding             : 30,

	  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  boundingBox         : undefined,

	  // Extra spacing between components in non-compound graphs
	  componentSpacing    : 100,

	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion       : function( node ){ return 400000; },

	  // Node repulsion (overlapping) multiplier
	  nodeOverlap         : 10,

	  // Ideal edge (non nested) length
	  idealEdgeLength     : function( edge ){ return 10; },

	  // Divisor to compute edge forces
	  edgeElasticity      : function( edge ){ return 100; },

	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor       : 5,

	  // Gravity force (constant)
	  gravity             : 80,

	  // Maximum number of iterations to perform
	  numIter             : 1000,

	  // Initial temperature (maximum node displacement)
	  initialTemp         : 200,

	  // Cooling factor (how the temperature is reduced between consecutive iterations
	  coolingFactor       : 0.95,

	  // Lower temperature threshold (below this point the layout will end)
	  minTemp             : 1.0,

	  // Whether to use threading to speed up the layout
	  useMultitasking     : true
	};


	/**
	 * @brief       : constructor
	 * @arg options : object containing layout options
	 */
	function CoseLayout(options) {
	  this.options = util.extend({}, defaults, options);

	  this.options.layout = this;
	}


	/**
	 * @brief : runs the layout
	 */
	CoseLayout.prototype.run = function() {
	  var options = this.options;
	  var cy      = options.cy;
	  var layout  = this;
	  var thread  = this.thread;

	  if( !thread || thread.stopped() ){
	    thread = this.thread = Thread({ disabled: !options.useMultitasking });
	  }

	  layout.stopped = false;

	  layout.trigger({ type: 'layoutstart', layout: layout });

	  // Set DEBUG - Global variable
	  if (true === options.debug) {
	    DEBUG = true;
	  } else {
	    DEBUG = false;
	  }

	  // Initialize layout info
	  var layoutInfo = createLayoutInfo(cy, layout, options);

	  // Show LayoutInfo contents if debugging
	  if (DEBUG) {
	    printLayoutInfo(layoutInfo);
	  }

	  // If required, randomize node positions
	  // if (true === options.randomize) {
	    randomizePositions(layoutInfo, cy);
	  // }

	  var startTime = Date.now();
	  var refreshRequested = false;
	  var refresh = function( rOpts ){
	    rOpts = rOpts || {};

	    if( refreshRequested && !rOpts.next ){
	      return;
	    }

	    if( !rOpts.force && Date.now() - startTime < options.animationThreshold ){
	      return;
	    }

	    refreshRequested = true;

	    util.requestAnimationFrame(function(){
	      refreshPositions(layoutInfo, cy, options);

	      // Fit the graph if necessary
	      if (true === options.fit) {
	        cy.fit( options.padding );
	      }

	      refreshRequested = false;

	      if( rOpts.next ){ rOpts.next(); }
	    });
	  };

	  thread.on('message', function( e ){
	    var layoutNodes = e.message;

	    layoutInfo.layoutNodes = layoutNodes;
	    refresh();
	  });

	  thread.pass({
	    layoutInfo: layoutInfo,
	    options: {
	      animate: options.animate,
	      refresh: options.refresh,
	      componentSpacing: options.componentSpacing,
	      nodeOverlap: options.nodeOverlap,
	      nestingFactor: options.nestingFactor,
	      gravity: options.gravity,
	      numIter: options.numIter,
	      initialTemp: options.initialTemp,
	      coolingFactor: options.coolingFactor,
	      minTemp: options.minTemp
	    }
	  }).run(function( pass ){
	    var layoutInfo = pass.layoutInfo;
	    var options = pass.options;
	    var stopped = false;

	    /**
	     * @brief          : Performs one iteration of the physical simulation
	     * @arg layoutInfo : LayoutInfo object already initialized
	     * @arg cy         : Cytoscape object
	     * @arg options    : Layout options
	     */
	    var step = function(layoutInfo, options, step) {
	      // var s = "\n\n###############################";
	      // s += "\nSTEP: " + step;
	      // s += "\n###############################\n";
	      // logDebug(s);

	      // Calculate node repulsions
	      calculateNodeForces(layoutInfo, options);
	      // Calculate edge forces
	      calculateEdgeForces(layoutInfo, options);
	      // Calculate gravity forces
	      calculateGravityForces(layoutInfo, options);
	      // Propagate forces from parent to child
	      propagateForces(layoutInfo, options);
	      // Update positions based on calculated forces
	      updatePositions(layoutInfo, options);
	    };

	    /**
	     * @brief : Computes the node repulsion forces
	     */
	    var calculateNodeForces = function(layoutInfo, options) {
	      // Go through each of the graphs in graphSet
	      // Nodes only repel each other if they belong to the same graph
	      // var s = 'calculateNodeForces';
	      // logDebug(s);
	      for (var i = 0; i < layoutInfo.graphSet.length; i ++) {
	        var graph    = layoutInfo.graphSet[i];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Now get all the pairs of nodes
	        // Only get each pair once, (A, B) = (B, A)
	        for (var j = 0; j < numNodes; j++) {
	          var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

	          for (var k = j + 1; k < numNodes; k++) {
	            var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];

	            nodeRepulsion(node1, node2, layoutInfo, options);
	          }
	        }
	      }
	    };

	    /**
	     * @brief : Compute the node repulsion forces between a pair of nodes
	     */
	    var nodeRepulsion = function(node1, node2, layoutInfo, options) {
	      // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;

	      var cmptId1 = node1.cmptId;
	      var cmptId2 = node2.cmptId;

	      if( cmptId1 !== cmptId2 && !layoutInfo.isCompound ){ return; }

	      // Get direction of line connecting both node centers
	      var directionX = node2.positionX - node1.positionX;
	      var directionY = node2.positionY - node1.positionY;
	      // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;

	      // If both centers are the same, apply a random force
	      if (0 === directionX && 0 === directionY) {
	        // s += "\nNodes have the same position.";
	        return; // TODO could be improved with random force
	      }

	      var overlap = nodesOverlap(node1, node2, directionX, directionY);

	      if (overlap > 0) {
	        // s += "\nNodes DO overlap.";
	        // s += "\nOverlap: " + overlap;
	        // If nodes overlap, repulsion force is proportional
	        // to the overlap
	        var force    = options.nodeOverlap * overlap;

	        // Compute the module and components of the force vector
	        var distance = Math.sqrt(directionX * directionX + directionY * directionY);
	        // s += "\nDistance: " + distance;
	        var forceX   = force * directionX / distance;
	        var forceY   = force * directionY / distance;

	      } else {
	        // s += "\nNodes do NOT overlap.";
	        // If there's no overlap, force is inversely proportional
	        // to squared distance

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint(node1, directionX, directionY);
	        var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);

	        // Use clipping points to compute distance
	        var distanceX   = point2.x - point1.x;
	        var distanceY   = point2.y - point1.y;
	        var distanceSqr = distanceX * distanceX + distanceY * distanceY;
	        var distance    = Math.sqrt(distanceSqr);
	        // s += "\nDistance: " + distance;

	        // Compute the module and components of the force vector
	        var force  = ( node1.nodeRepulsion + node2.nodeRepulsion ) / distanceSqr;
	        var forceX = force * distanceX / distance;
	        var forceY = force * distanceY / distance;
	      }

	      // Apply force
	      if( !node1.isLocked ){
	        node1.offsetX -= forceX;
	        node1.offsetY -= forceY;
	      }

	      if( !node2.isLocked ){
	        node2.offsetX += forceX;
	        node2.offsetY += forceY;
	      }

	      // s += "\nForceX: " + forceX + " ForceY: " + forceY;
	      // logDebug(s);

	      return;
	    };

	    /**
	     * @brief  : Determines whether two nodes overlap or not
	     * @return : Amount of overlapping (0 => no overlap)
	     */
	    var nodesOverlap = function(node1, node2, dX, dY) {

	      if (dX > 0) {
	        var overlapX = node1.maxX - node2.minX;
	      } else {
	        var overlapX = node2.maxX - node1.minX;
	      }

	      if (dY > 0) {
	        var overlapY = node1.maxY - node2.minY;
	      } else {
	        var overlapY = node2.maxY - node1.minY;
	      }

	      if (overlapX >= 0 && overlapY >= 0) {
	        return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
	      } else {
	        return 0;
	      }
	    };

	    /**
	     * @brief : Finds the point in which an edge (direction dX, dY) intersects
	     *          the rectangular bounding box of it's source/target node
	     */
	    var findClippingPoint = function(node, dX, dY) {

	      // Shorcuts
	      var X = node.positionX;
	      var Y = node.positionY;
	      var H = node.height || 1;
	      var W = node.width || 1;
	      var dirSlope     = dY / dX;
	      var nodeSlope    = H / W;

	      // var s = 'Computing clipping point of node ' + node.id +
	      //   " . Height:  " + H + ", Width: " + W +
	      //   "\nDirection " + dX + ", " + dY;
	      //
	      // Compute intersection
	      var res = {};
	      do {
	        // Case: Vertical direction (up)
	        if (0 === dX && 0 < dY) {
	          res.x = X;
	          // s += "\nUp direction";
	          res.y = Y + H / 2;
	          break;
	        }

	        // Case: Vertical direction (down)
	        if (0 === dX && 0 > dY) {
	          res.x = X;
	          res.y = Y + H / 2;
	          // s += "\nDown direction";
	          break;
	        }

	        // Case: Intersects the right border
	        if (0 < dX &&
	        -1 * nodeSlope <= dirSlope &&
	        dirSlope <= nodeSlope) {
	          res.x = X + W / 2;
	          res.y = Y + (W * dY / 2 / dX);
	          // s += "\nRightborder";
	          break;
	        }

	        // Case: Intersects the left border
	        if (0 > dX &&
	        -1 * nodeSlope <= dirSlope &&
	        dirSlope <= nodeSlope) {
	          res.x = X - W / 2;
	          res.y = Y - (W * dY / 2 / dX);
	          // s += "\nLeftborder";
	          break;
	        }

	        // Case: Intersects the top border
	        if (0 < dY &&
	        ( dirSlope <= -1 * nodeSlope ||
	          dirSlope >= nodeSlope )) {
	          res.x = X + (H * dX / 2 / dY);
	          res.y = Y + H / 2;
	          // s += "\nTop border";
	          break;
	        }

	        // Case: Intersects the bottom border
	        if (0 > dY &&
	        ( dirSlope <= -1 * nodeSlope ||
	          dirSlope >= nodeSlope )) {
	          res.x = X - (H * dX / 2 / dY);
	          res.y = Y - H / 2;
	          // s += "\nBottom border";
	          break;
	        }

	      } while (false);

	      // s += "\nClipping point found at " + res.x + ", " + res.y;
	      // logDebug(s);
	      return res;
	    };

	    /**
	     * @brief : Calculates all edge forces
	     */
	    var calculateEdgeForces = function(layoutInfo, options) {
	      // Iterate over all edges
	      for (var i = 0; i < layoutInfo.edgeSize; i++) {
	        // Get edge, source & target nodes
	        var edge     = layoutInfo.layoutEdges[i];
	        var sourceIx = layoutInfo.idToIndex[edge.sourceId];
	        var source   = layoutInfo.layoutNodes[sourceIx];
	        var targetIx = layoutInfo.idToIndex[edge.targetId];
	        var target   = layoutInfo.layoutNodes[targetIx];

	        // Get direction of line connecting both node centers
	        var directionX = target.positionX - source.positionX;
	        var directionY = target.positionY - source.positionY;

	        // If both centers are the same, do nothing.
	        // A random force has already been applied as node repulsion
	        if (0 === directionX && 0 === directionY) {
	        return;
	        }

	        // Get clipping points for both nodes
	        var point1 = findClippingPoint(source, directionX, directionY);
	        var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);


	        var lx = point2.x - point1.x;
	        var ly = point2.y - point1.y;
	        var l  = Math.sqrt(lx * lx + ly * ly);

	        var force  = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

	        if (0 !== l) {
	          var forceX = force * lx / l;
	          var forceY = force * ly / l;
	        } else {
	          var forceX = 0;
	          var forceY = 0;
	        }

	        // Add this force to target and source nodes
	        if( !source.isLocked ){
	          source.offsetX += forceX;
	          source.offsetY += forceY;
	        }

	        if( !target.isLocked ){
	          target.offsetX -= forceX;
	          target.offsetY -= forceY;
	        }

	        // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
	        // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
	        // logDebug(s);
	      }
	    };

	    /**
	     * @brief : Computes gravity forces for all nodes
	     */
	    var calculateGravityForces = function(layoutInfo, options) {
	      var distThreshold = 1;

	      // var s = 'calculateGravityForces';
	      // logDebug(s);
	      for (var i = 0; i < layoutInfo.graphSet.length; i ++) {
	        var graph    = layoutInfo.graphSet[i];
	        var numNodes = graph.length;

	        // s = "Set: " + graph.toString();
	        // logDebug(s);

	        // Compute graph center
	        if (0 === i) {
	          var centerX   = layoutInfo.clientHeight / 2;
	          var centerY   = layoutInfo.clientWidth  / 2;
	        } else {
	          // Get Parent node for this graph, and use its position as center
	          var temp    = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
	          var parent  = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
	          var centerX = parent.positionX;
	          var centerY = parent.positionY;
	        }
	        // s = "Center found at: " + centerX + ", " + centerY;
	        // logDebug(s);

	        // Apply force to all nodes in graph
	        for (var j = 0; j < numNodes; j++) {
	          var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
	          // s = "Node: " + node.id;

	          if( node.isLocked ){ continue; }

	          var dx = centerX - node.positionX;
	          var dy = centerY - node.positionY;
	          var d  = Math.sqrt(dx * dx + dy * dy);
	          if (d > distThreshold) {
	            var fx = options.gravity * dx / d;
	            var fy = options.gravity * dy / d;
	            node.offsetX += fx;
	            node.offsetY += fy;
	            // s += ": Applied force: " + fx + ", " + fy;
	          } else {
	            // s += ": skypped since it's too close to center";
	          }
	          // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief          : This function propagates the existing offsets from
	     *                   parent nodes to its descendents.
	     * @arg layoutInfo : layoutInfo Object
	     * @arg cy         : cytoscape Object
	     * @arg options    : Layout options
	     */
	    var propagateForces = function(layoutInfo, options) {
	      // Inline implementation of a queue, used for traversing the graph in BFS order
	      var queue = [];
	      var start = 0;   // Points to the start the queue
	      var end   = -1;  // Points to the end of the queue

	      // logDebug('propagateForces');

	      // Start by visiting the nodes in the root graph
	      queue.push.apply(queue, layoutInfo.graphSet[0]);
	      end += layoutInfo.graphSet[0].length;

	      // Traverse the graph, level by level,
	      while (start <= end) {
	        // Get the node to visit and remove it from queue
	        var nodeId    = queue[start++];
	        var nodeIndex = layoutInfo.idToIndex[nodeId];
	        var node      = layoutInfo.layoutNodes[nodeIndex];
	        var children  = node.children;

	        // We only need to process the node if it's compound
	        if (0 < children.length && !node.isLocked) {
	          var offX = node.offsetX;
	          var offY = node.offsetY;

	          // var s = "Propagating offset from parent node : " + node.id +
	          //   ". OffsetX: " + offX + ". OffsetY: " + offY;
	          // s += "\n Children: " + children.toString();
	          // logDebug(s);

	          for (var i = 0; i < children.length; i++) {
	            var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]];
	            // Propagate offset
	            childNode.offsetX += offX;
	            childNode.offsetY += offY;
	            // Add children to queue to be visited
	            queue[++end] = children[i];
	          }

	          // Reset parent offsets
	          node.offsetX = 0;
	          node.offsetY = 0;
	        }

	      }
	    };

	    /**
	     * @brief : Updates the layout model positions, based on
	     *          the accumulated forces
	     */
	    var updatePositions = function(layoutInfo, options) {
	      // var s = 'Updating positions';
	      // logDebug(s);

	      // Reset boundaries for compound nodes
	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if (0 < n.children.length) {
	          // logDebug("Resetting boundaries of compound node: " + n.id);
	          n.maxX = undefined;
	          n.minX = undefined;
	          n.maxY = undefined;
	          n.minY = undefined;
	        }
	      }

	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if (0 < n.children.length || n.isLocked) {
	          // No need to set compound or locked node position
	          // logDebug("Skipping position update of node: " + n.id);
	          continue;
	        }
	        // s = "Node: " + n.id + " Previous position: (" +
	        // n.positionX + ", " + n.positionY + ").";

	        // Limit displacement in order to improve stability
	        var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
	        n.positionX += tempForce.x;
	        n.positionY += tempForce.y;
	        n.offsetX = 0;
	        n.offsetY = 0;
	        n.minX    = n.positionX - n.width;
	        n.maxX    = n.positionX + n.width;
	        n.minY    = n.positionY - n.height;
	        n.maxY    = n.positionY + n.height;
	        // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
	        // logDebug(s);

	        // Update ancestry boudaries
	        updateAncestryBoundaries(n, layoutInfo);
	      }

	      // Update size, position of compund nodes
	      for (var i = 0; i < layoutInfo.nodeSize; i++) {
	        var n = layoutInfo.layoutNodes[i];
	        if ( 0 < n.children.length && !n.isLocked ) {
	          n.positionX = (n.maxX + n.minX) / 2;
	          n.positionY = (n.maxY + n.minY) / 2;
	          n.width     = n.maxX - n.minX;
	          n.height    = n.maxY - n.minY;
	          // s = "Updating position, size of compound node " + n.id;
	          // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
	          // s += "\nWidth: " + n.width + ", Height: " + n.height;
	          // logDebug(s);
	        }
	      }
	    };

	    /**
	     * @brief : Limits a force (forceX, forceY) to be not
	     *          greater (in modulo) than max.
	     8          Preserves force direction.
	     */
	    var limitForce = function(forceX, forceY, max) {
	      // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
	      var force = Math.sqrt(forceX * forceX + forceY * forceY);

	      if (force > max) {
	        var res = {
	        x : max * forceX / force,
	        y : max * forceY / force
	        };

	      } else {
	        var res = {
	        x : forceX,
	        y : forceY
	        };
	      }

	      // s += ".\nResult: (" + res.x + ", " + res.y + ")";
	      // logDebug(s);

	      return res;
	    };

	    /**
	     * @brief : Function used for keeping track of compound node
	     *          sizes, since they should bound all their subnodes.
	     */
	    var updateAncestryBoundaries = function(node, layoutInfo) {
	      // var s = "Propagating new position/size of node " + node.id;
	      var parentId = node.parentId;
	      if (null == parentId) {
	        // If there's no parent, we are done
	        // s += ". No parent node.";
	        // logDebug(s);
	        return;
	      }

	      // Get Parent Node
	      var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
	      var flag = false;

	      // MaxX
	      if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
	        p.maxX = node.maxX + p.padRight;
	        flag = true;
	        // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
	      }

	      // MinX
	      if (null == p.minX || node.minX - p.padLeft < p.minX) {
	        p.minX = node.minX - p.padLeft;
	        flag = true;
	        // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
	      }

	      // MaxY
	      if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
	        p.maxY = node.maxY + p.padBottom;
	        flag = true;
	        // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
	      }

	      // MinY
	      if (null == p.minY || node.minY - p.padTop < p.minY) {
	        p.minY = node.minY - p.padTop;
	        flag = true;
	        // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
	      }

	      // If updated boundaries, propagate changes upward
	      if (flag) {
	        // logDebug(s);
	        return updateAncestryBoundaries(p, layoutInfo);
	      }

	      // s += ". No changes in boundaries/position of parent node " + p.id;
	      // logDebug(s);
	      return;
	    };

	    var separateComponents = function(layutInfo, options){
	      var nodes = layoutInfo.layoutNodes;
	      var components = [];

	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[i];
	        var cid = node.cmptId;
	        var component = components[ cid ] = components[ cid ] || [];

	        component.push( node );
	      }

	      var totalA = 0;

	      for( var i = 0; i < components.length; i++ ){
	        var c = components[i];
	        c.x1 = Infinity;
	        c.x2 = -Infinity;
	        c.y1 = Infinity;
	        c.y2 = -Infinity;

	        for( var j = 0; j < c.length; j++ ){
	          var n = c[j];

	          c.x1 = Math.min( c.x1, n.positionX - n.width/2 );
	          c.x2 = Math.max( c.x2, n.positionX + n.width/2 );
	          c.y1 = Math.min( c.y1, n.positionY - n.height/2 );
	          c.y2 = Math.max( c.y2, n.positionY + n.height/2 );
	        }

	        c.w = c.x2 - c.x1;
	        c.h = c.y2 - c.y1;

	        totalA += c.w * c.h;
	      }

	      components.sort(function( c1, c2 ){
	        return c2.w*c2.h - c1.w*c1.h;
	      });

	      var x = 0;
	      var y = 0;
	      var usedW = 0;
	      var rowH = 0;
	      var maxRowW = Math.sqrt( totalA ) * layoutInfo.clientWidth / layoutInfo.clientHeight;

	      for( var i = 0; i < components.length; i++ ){
	        var c = components[i];

	        for( var j = 0; j < c.length; j++ ){
	          var n = c[j];

	          if( !n.isLocked ){
	            n.positionX += x;
	            n.positionY += y;
	          }
	        }

	        x += c.w + options.componentSpacing;
	        usedW += c.w + options.componentSpacing;
	        rowH = Math.max( rowH, c.h );

	        if( usedW > maxRowW ){
	          y += rowH + options.componentSpacing;
	          x = 0;
	          usedW = 0;
	          rowH = 0;
	        }
	      }
	    };

	    var mainLoop = function(i){
	      if( stopped ){
	        // logDebug("Layout manually stopped. Stopping computation in step " + i);
	        return false;
	      }

	      // Do one step in the phisical simulation
	      step(layoutInfo, options, i);

	      // Update temperature
	      layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
	      // logDebug("New temperature: " + layoutInfo.temperature);

	      if (layoutInfo.temperature < options.minTemp) {
	        // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
	        return false;
	      }

	      return true;
	    };

	    var i = 0;
	    var loopRet;

	    do {
	      var f = 0;

	      while( f < options.refresh && i < options.numIter ){
	        var loopRet = mainLoop(i);
	        if( !loopRet ){ break; }

	        f++;
	        i++;
	      }

	      if( options.animate ){
	        broadcast( layoutInfo.layoutNodes ); // jshint ignore:line
	      }

	    } while ( loopRet && i + 1 < options.numIter );

	    separateComponents( layoutInfo, options );

	    return layoutInfo;
	  }).then(function( layoutInfoUpdated ){
	    layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

	    thread.stop();
	    done();
	  });

	  var done = function(){
	    refresh({ 
	      force: true,
	      next: function(){
	        // Layout has finished
	        layout.one('layoutstop', options.stop);
	        layout.trigger({ type: 'layoutstop', layout: layout });
	      }
	    });
	  };

	  return this; // chaining
	};


	/**
	 * @brief : called on continuous layouts to stop them before they finish
	 */
	CoseLayout.prototype.stop = function(){
	  this.stopped = true;

	  if( this.thread ){
	    this.thread.stop();
	  }

	  this.trigger('layoutstop');

	  return this; // chaining
	};

	CoseLayout.prototype.destroy = function(){
	  if( this.thread ){
	    this.thread.stop();
	  }

	  return this; // chaining
	};


	/**
	 * @brief     : Creates an object which is contains all the data
	 *              used in the layout process
	 * @arg cy    : cytoscape.js object
	 * @return    : layoutInfo object initialized
	 */
	var createLayoutInfo = function(cy, layout, options) {
	  // Shortcut
	  var edges = options.eles.edges();
	  var nodes = options.eles.nodes();

	  var layoutInfo   = {
	    isCompound   : cy.hasCompoundNodes(),
	    layoutNodes  : [],
	    idToIndex    : {},
	    nodeSize     : nodes.size(),
	    graphSet     : [],
	    indexToGraph : [],
	    layoutEdges  : [],
	    edgeSize     : edges.size(),
	    temperature  : options.initialTemp,
	    clientWidth  : cy.width(),
	    clientHeight : cy.width(),
	    boundingBox  : math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	                     x1: 0, y1: 0, w: cy.width(), h: cy.height()
	                   } )
	  };

	  var components = options.eles.components();
	  var id2cmptId = {};

	  for( var i = 0; i < components.length; i++ ){
	    var component = components[i];

	    for( var j = 0; j < component.length; j++ ){
	      var node = component[j];

	      id2cmptId[ node.id() ] = i;
	    }
	  }

	  // Iterate over all nodes, creating layout nodes
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = nodes[i];
	    var nbb = n.boundingBox();

	    var tempNode        = {};
	    tempNode.isLocked   = n.locked();
	    tempNode.id         = n.data('id');
	    tempNode.parentId   = n.data('parent');
	    tempNode.cmptId     = id2cmptId[ n.id() ];
	    tempNode.children   = [];
	    tempNode.positionX  = n.position('x');
	    tempNode.positionY  = n.position('y');
	    tempNode.offsetX    = 0;
	    tempNode.offsetY    = 0;
	    tempNode.height     = nbb.w;
	    tempNode.width      = nbb.h;
	    tempNode.maxX       = tempNode.positionX + tempNode.width  / 2;
	    tempNode.minX       = tempNode.positionX - tempNode.width  / 2;
	    tempNode.maxY       = tempNode.positionY + tempNode.height / 2;
	    tempNode.minY       = tempNode.positionY - tempNode.height / 2;
	    tempNode.padLeft    = parseFloat( n.style('padding-left') );
	    tempNode.padRight   = parseFloat( n.style('padding-right') );
	    tempNode.padTop     = parseFloat( n.style('padding-top') );
	    tempNode.padBottom  = parseFloat( n.style('padding-bottom') );

	    // forces
	    tempNode.nodeRepulsion = is.fn( options.nodeRepulsion ) ? options.nodeRepulsion.call( n, n ) : options.nodeRepulsion;

	    // Add new node
	    layoutInfo.layoutNodes.push(tempNode);
	    // Add entry to id-index map
	    layoutInfo.idToIndex[tempNode.id] = i;
	  }

	  // Inline implementation of a queue, used for traversing the graph in BFS order
	  var queue = [];
	  var start = 0;   // Points to the start the queue
	  var end   = -1;  // Points to the end of the queue

	  var tempGraph = [];

	  // Second pass to add child information and
	  // initialize queue for hierarchical traversal
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var p_id = n.parentId;
	    // Check if node n has a parent node
	    if (null != p_id) {
	    // Add node Id to parent's list of children
	    layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
	    } else {
	    // If a node doesn't have a parent, then it's in the root graph
	    queue[++end] = n.id;
	    tempGraph.push(n.id);
	    }
	  }

	  // Add root graph to graphSet
	  layoutInfo.graphSet.push(tempGraph);

	  // Traverse the graph, level by level,
	  while (start <= end) {
	    // Get the node to visit and remove it from queue
	    var node_id  = queue[start++];
	    var node_ix  = layoutInfo.idToIndex[node_id];
	    var node     = layoutInfo.layoutNodes[node_ix];
	    var children = node.children;
	    if (children.length > 0) {
	    // Add children nodes as a new graph to graph set
	    layoutInfo.graphSet.push(children);
	    // Add children to que queue to be visited
	    for (var i = 0; i < children.length; i++) {
	      queue[++end] = children[i];
	    }
	    }
	  }

	  // Create indexToGraph map
	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    for (var j = 0; j < graph.length; j++) {
	    var index = layoutInfo.idToIndex[graph[j]];
	    layoutInfo.indexToGraph[index] = i;
	    }
	  }

	  // Iterate over all edges, creating Layout Edges
	  for (var i = 0; i < layoutInfo.edgeSize; i++) {
	    var e = edges[i];
	    var tempEdge = {};
	    tempEdge.id       = e.data('id');
	    tempEdge.sourceId = e.data('source');
	    tempEdge.targetId = e.data('target');

	    // Compute ideal length
	    var idealLength = is.fn( options.idealEdgeLength ) ? options.idealEdgeLength.call( e, e ) : options.idealEdgeLength;
	    var elasticity = is.fn( options.edgeElasticity ) ? options.edgeElasticity.call( e, e ) : options.edgeElasticity;

	    // Check if it's an inter graph edge
	    var sourceIx    = layoutInfo.idToIndex[tempEdge.sourceId];
	    var targetIx    = layoutInfo.idToIndex[tempEdge.targetId];
	    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
	    var targetGraph = layoutInfo.indexToGraph[targetIx];

	    if (sourceGraph != targetGraph) {
	      // Find lowest common graph ancestor
	      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);

	      // Compute sum of node depths, relative to lca graph
	      var lcaGraph = layoutInfo.graphSet[lca];
	      var depth    = 0;

	      // Source depth
	      var tempNode = layoutInfo.layoutNodes[sourceIx];
	      while ( -1 === lcaGraph.indexOf(tempNode.id) ) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // Target depth
	      tempNode = layoutInfo.layoutNodes[targetIx];
	      while ( -1 === lcaGraph.indexOf(tempNode.id) ) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      }

	      // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
	        //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
	        //  ". Depth: " + depth);

	      // Update idealLength
	      idealLength *= depth * options.nestingFactor;
	    }

	    tempEdge.idealLength = idealLength;
	    tempEdge.elasticity = elasticity;

	    layoutInfo.layoutEdges.push(tempEdge);
	  }

	  // Finally, return layoutInfo object
	  return layoutInfo;
	};


	/**
	 * @brief : This function finds the index of the lowest common
	 *          graph ancestor between 2 nodes in the subtree
	 *          (from the graph hierarchy induced tree) whose
	 *          root is graphIx
	 *
	 * @arg node1: node1's ID
	 * @arg node2: node2's ID
	 * @arg layoutInfo: layoutInfo object
	 *
	 */
	var findLCA = function(node1, node2, layoutInfo) {
	  // Find their common ancester, starting from the root graph
	  var res = findLCA_aux(node1, node2, 0, layoutInfo);
	  if (2 > res.count) {
	    // If aux function couldn't find the common ancester,
	    // then it is the root graph
	    return 0;
	  } else {
	    return res.graph;
	  }
	};


	/**
	 * @brief          : Auxiliary function used for LCA computation
	 *
	 * @arg node1      : node1's ID
	 * @arg node2      : node2's ID
	 * @arg graphIx    : subgraph index
	 * @arg layoutInfo : layoutInfo object
	 *
	 * @return         : object of the form {count: X, graph: Y}, where:
	 *                   X is the number of ancesters (max: 2) found in
	 *                   graphIx (and it's subgraphs),
	 *                   Y is the graph index of the lowest graph containing
	 *                   all X nodes
	 */
	var findLCA_aux = function(node1, node2, graphIx, layoutInfo) {
	  var graph = layoutInfo.graphSet[graphIx];
	  // If both nodes belongs to graphIx
	  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
	    return {count:2, graph:graphIx};
	  }

	  // Make recursive calls for all subgraphs
	  var c = 0;
	  for (var i = 0; i < graph.length; i++) {
	    var nodeId   = graph[i];
	    var nodeIx   = layoutInfo.idToIndex[nodeId];
	    var children = layoutInfo.layoutNodes[nodeIx].children;

	    // If the node has no child, skip it
	    if (0 === children.length) {
	    continue;
	    }

	    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
	    var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);
	    if (0 === result.count) {
	    // Neither node1 nor node2 are present in this subgraph
	    continue;
	    } else if (1 === result.count) {
	    // One of (node1, node2) is present in this subgraph
	    c++;
	    if (2 === c) {
	      // We've already found both nodes, no need to keep searching
	      break;
	    }
	    } else {
	    // Both nodes are present in this subgraph
	    return result;
	    }
	  }

	  return {count:c, graph:graphIx};
	};


	/**
	 * @brief: printsLayoutInfo into js console
	 *         Only used for debbuging
	 */
	var printLayoutInfo = function(layoutInfo) {
	  /* jshint ignore:start */

	  if (!DEBUG) {
	    return;
	  }
	  console.debug("layoutNodes:");
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var s =
	    "\nindex: "     + i +
	    "\nId: "        + n.id +
	    "\nChildren: "  + n.children.toString() +
	    "\nparentId: "  + n.parentId  +
	    "\npositionX: " + n.positionX +
	    "\npositionY: " + n.positionY +
	    "\nOffsetX: " + n.offsetX +
	    "\nOffsetY: " + n.offsetY +
	    "\npadLeft: " + n.padLeft +
	    "\npadRight: " + n.padRight +
	    "\npadTop: " + n.padTop +
	    "\npadBottom: " + n.padBottom;

	    console.debug(s);
	  }

	  console.debug('idToIndex');
	  for (var i in layoutInfo.idToIndex) {
	    console.debug("Id: " + i + "\nIndex: " + layoutInfo.idToIndex[i]);
	  }

	  console.debug('Graph Set');
	  var set = layoutInfo.graphSet;
	  for (var i = 0; i < set.length; i ++) {
	    console.debug("Set : " + i + ": " + set[i].toString());
	  }

	  var s = 'IndexToGraph';
	  for (var i = 0; i < layoutInfo.indexToGraph.length; i ++) {
	    s += "\nIndex : " + i + " Graph: "+ layoutInfo.indexToGraph[i];
	  }
	  console.debug(s);

	  s = 'Layout Edges';
	  for (var i = 0; i < layoutInfo.layoutEdges.length; i++) {
	    var e = layoutInfo.layoutEdges[i];
	    s += "\nEdge Index: " + i + " ID: " + e.id +
	    " SouceID: " + e.sourceId + " TargetId: " + e.targetId +
	    " Ideal Length: " + e.idealLength;
	  }
	  console.debug(s);

	  s =  "nodeSize: " + layoutInfo.nodeSize;
	  s += "\nedgeSize: " + layoutInfo.edgeSize;
	  s += "\ntemperature: " + layoutInfo.temperature;
	  console.debug(s);

	  return;
	  /* jshint ignore:end */
	};


	/**
	 * @brief : Randomizes the position of all nodes
	 */
	var randomizePositions = function(layoutInfo, cy) {
	  var width     = layoutInfo.clientWidth;
	  var height    = layoutInfo.clientHeight;

	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];

	    // No need to randomize compound nodes or locked nodes
	    if ( 0 === n.children.length && !n.isLocked ) {
	      n.positionX = Math.random() * width;
	      n.positionY = Math.random() * height;
	    }
	  }
	};


	/**
	 * @brief          : Updates the positions of nodes in the network
	 * @arg layoutInfo : LayoutInfo object
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */
	var refreshPositions = function(layoutInfo, cy, options) {
	  // var s = 'Refreshing positions';
	  // logDebug(s);

	  var layout = options.layout;
	  var nodes = options.eles.nodes();
	  var bb = layoutInfo.boundingBox;
	  var coseBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };

	  if( options.boundingBox ){
	    nodes.forEach(function( node ){
	      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];

	      coseBB.x1 = Math.min( coseBB.x1, lnode.positionX );
	      coseBB.x2 = Math.max( coseBB.x2, lnode.positionX );

	      coseBB.y1 = Math.min( coseBB.y1, lnode.positionY );
	      coseBB.y2 = Math.max( coseBB.y2, lnode.positionY );
	    });

	    coseBB.w = coseBB.x2 - coseBB.x1;
	    coseBB.h = coseBB.y2 - coseBB.y1;
	  }

	  nodes.positions(function(i, ele) {
	    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];
	    // s = "Node: " + lnode.id + ". Refreshed position: (" +
	    // lnode.positionX + ", " + lnode.positionY + ").";
	    // logDebug(s);

	    if( options.boundingBox ){ // then add extra bounding box constraint
	      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
	      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;

	      return {
	        x: bb.x1 + pctX * bb.w,
	        y: bb.y1 + pctY * bb.h
	      };
	    } else {
	      return {
	        x: lnode.positionX,
	        y: lnode.positionY
	      };
	    }
	  });

	  // Trigger layoutReady only on first call
	  if (true !== layoutInfo.ready) {
	    // s = 'Triggering layoutready';
	    // logDebug(s);
	    layoutInfo.ready = true;
	    layout.one('layoutready', options.ready);
	    layout.trigger({ type: 'layoutready', layout: this });
	  }
	};

	/**
	 * @brief : Logs a debug message in JS console, if DEBUG is ON
	 */
	// var logDebug = function(text) {
	//   if (DEBUG) {
	//     console.debug(text);
	//   }
	// };

	module.exports = CoseLayout;

	},{"../../is":77,"../../math":79,"../../thread":92,"../../util":94}],49:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');

	var defaults = {
	  fit: true, // whether to fit the viewport to the graph
	  padding: 30, // padding used on fit
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
	  avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true
	  condense: false, // uses all available space on false, uses minimal space on true
	  rows: undefined, // force num of rows in the grid
	  cols: undefined, // force num of columns in the grid
	  position: function( node ){}, // returns { row, col } for element
	  sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function GridLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	GridLayout.prototype.run = function(){
	  var params = this.options;
	  var options = params;

	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  if( options.sort ){
	    nodes = nodes.sort( options.sort );
	  }

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  if( bb.h === 0 || bb.w === 0){
	    nodes.layoutPositions(this, options, function(){
	      return { x: bb.x1, y: bb.y1 };
	    });

	  } else {

	    // width/height * splits^2 = cells where splits is number of times to split width
	    var cells = nodes.size();
	    var splits = Math.sqrt( cells * bb.h/bb.w );
	    var rows = Math.round( splits );
	    var cols = Math.round( bb.w/bb.h * splits );

	    var small = function(val){
	      if( val == null ){
	        return Math.min(rows, cols);
	      } else {
	        var min = Math.min(rows, cols);
	        if( min == rows ){
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var large = function(val){
	      if( val == null ){
	        return Math.max(rows, cols);
	      } else {
	        var max = Math.max(rows, cols);
	        if( max == rows ){
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var oRows = options.rows;
	    var oCols = options.cols != null ? options.cols : options.columns;

	    // if rows or columns were set in options, use those values
	    if( oRows != null && oCols != null ){
	      rows = oRows;
	      cols = oCols;
	    } else if( oRows != null && oCols == null ){
	      rows = oRows;
	      cols = Math.ceil( cells / rows );
	    } else if( oRows == null && oCols != null ){
	      cols = oCols;
	      rows = Math.ceil( cells / cols );
	    }

	    // otherwise use the automatic values and adjust accordingly

	    // if rounding was up, see if we can reduce rows or columns
	    else if( cols * rows > cells ){
	      var sm = small();
	      var lg = large();

	      // reducing the small side takes away the most cells, so try it first
	      if( (sm - 1) * lg >= cells ){
	        small(sm - 1);
	      } else if( (lg - 1) * sm >= cells ){
	        large(lg - 1);
	      }
	    } else {

	      // if rounding was too low, add rows or columns
	      while( cols * rows < cells ){
	        var sm = small();
	        var lg = large();

	        // try to add to larger side first (adds less in multiplication)
	        if( (lg + 1) * sm >= cells ){
	          large(lg + 1);
	        } else {
	          small(sm + 1);
	        }
	      }
	    }

	    var cellWidth = bb.w / cols;
	    var cellHeight = bb.h / rows;

	    if( options.condense ){
	      cellWidth = 0;
	      cellHeight = 0;
	    }

	    if( options.avoidOverlap ){
	      for( var i = 0; i < nodes.length; i++ ){
	        var node = nodes[i];
	        var pos = node._private.position;

	        if( pos.x == null || pos.y == null ){ // for bb
	          pos.x = 0;
	          pos.y = 0;
	        }

	        var nbb = node.boundingBox();
	        var p = options.avoidOverlapPadding;

	        var w = nbb.w + p;
	        var h = nbb.h + p;

	        cellWidth = Math.max( cellWidth, w );
	        cellHeight = Math.max( cellHeight, h );
	      }
	    }

	    var cellUsed = {}; // e.g. 'c-0-2' => true

	    var used = function(row, col){
	      return cellUsed['c-' + row + '-' + col] ? true : false;
	    };

	    var use = function(row, col){
	      cellUsed['c-' + row + '-' + col] = true;
	    };

	    // to keep track of current cell position
	    var row = 0;
	    var col = 0;
	    var moveToNextCell = function(){
	      col++;
	      if( col >= cols ){
	        col = 0;
	        row++;
	      }
	    };

	    // get a cache of all the manual positions
	    var id2manPos = {};
	    for( var i = 0; i < nodes.length; i++ ){
	      var node = nodes[i];
	      var rcPos = options.position( node );

	      if( rcPos && (rcPos.row !== undefined || rcPos.col !== undefined) ){ // must have at least row or col def'd
	        var pos = {
	          row: rcPos.row,
	          col: rcPos.col
	        };

	        if( pos.col === undefined ){ // find unused col
	          pos.col = 0;

	          while( used(pos.row, pos.col) ){
	            pos.col++;
	          }
	        } else if( pos.row === undefined ){ // find unused row
	          pos.row = 0;

	          while( used(pos.row, pos.col) ){
	            pos.row++;
	          }
	        }

	        id2manPos[ node.id() ] = pos;
	        use( pos.row, pos.col );
	      }
	    }

	    var getPos = function(i, element){
	      var x, y;

	      if( element.locked() || element.isFullAutoParent() ){
	        return false;
	      }

	      // see if we have a manual position set
	      var rcPos = id2manPos[ element.id() ];
	      if( rcPos ){
	        x = rcPos.col * cellWidth + cellWidth/2 + bb.x1;
	        y = rcPos.row * cellHeight + cellHeight/2 + bb.y1;

	      } else { // otherwise set automatically

	        while( used(row, col) ){
	          moveToNextCell();
	        }

	        x = col * cellWidth + cellWidth/2 + bb.x1;
	        y = row * cellHeight + cellHeight/2 + bb.y1;
	        use( row, col );

	        moveToNextCell();
	      }

	      return { x: x, y: y };

	    };

	    nodes.layoutPositions( this, options, getPos );
	  }

	  return this; // chaining

	};

	module.exports = GridLayout;

	},{"../../math":79,"../../util":94}],50:[function(_dereq_,module,exports){
	'use strict';

	module.exports = [
	  { name: 'breadthfirst', impl: _dereq_('./breadthfirst') },
	  { name: 'circle', impl: _dereq_('./circle') },
	  { name: 'concentric',impl: _dereq_('./concentric') },
	  { name: 'cose', impl: _dereq_('./cose') },
	  { name: 'grid', impl: _dereq_('./grid') },
	  { name: 'null', impl: _dereq_('./null') },
	  { name: 'preset', impl: _dereq_('./preset') },
	  { name: 'random', impl: _dereq_('./random') }
	];

	},{"./breadthfirst":45,"./circle":46,"./concentric":47,"./cose":48,"./grid":49,"./null":51,"./preset":52,"./random":53}],51:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');

	// default layout options
	var defaults = {
	  ready: function(){}, // on layoutready
	  stop: function(){} // on layoutstop
	};

	// constructor
	// options : object containing layout options
	function NullLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	// runs the layout
	NullLayout.prototype.run = function(){
	  var options = this.options;
	  var eles = options.eles; // elements to consider in the layout
	  var layout = this;

	  // cy is automatically populated for us in the constructor
	  var cy = options.cy; // jshint ignore:line

	  layout.trigger('layoutstart');

	  // puts all nodes at (0, 0)
	  eles.nodes().positions(function(){
	    return {
	      x: 0,
	      y: 0
	    };
	  });

	  // trigger layoutready when each node has had its position set at least once
	  layout.one('layoutready', options.ready);
	  layout.trigger('layoutready');

	  // trigger layoutstop when the layout stops (e.g. finishes)
	  layout.one('layoutstop', options.stop);
	  layout.trigger('layoutstop');

	  return this; // chaining
	};

	// called on continuous layouts to stop them before they finish
	NullLayout.prototype.stop = function(){
	  return this; // chaining
	};

	module.exports = NullLayout;

	},{"../../util":94}],52:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var is = _dereq_('../../is');

	var defaults = {
	  positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }
	  zoom: undefined, // the zoom level to set (prob want fit = false if set)
	  pan: undefined, // the pan level to set (prob want fit = false if set)
	  fit: true, // whether to fit to viewport
	  padding: 30, // padding on fit
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function PresetLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	PresetLayout.prototype.run = function(){
	  var options = this.options;
	  var eles = options.eles;

	  var nodes = eles.nodes();
	  var posIsFn = is.fn( options.positions );

	  function getPosition(node){
	    if( options.positions == null ){
	      return null;
	    }

	    if( posIsFn ){
	      return options.positions.apply( node, [ node ] );
	    }

	    var pos = options.positions[node._private.data.id];

	    if( pos == null ){
	      return null;
	    }

	    return pos;
	  }

	  nodes.layoutPositions(this, options, function(i, node){
	    var position = getPosition(node);

	    if( node.locked() || position == null ){
	      return false;
	    }

	    return position;
	  });

	  return this; // chaining
	};

	module.exports = PresetLayout;

	},{"../../is":77,"../../util":94}],53:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../util');
	var math = _dereq_('../../math');

	var defaults = {
	  fit: true, // whether to fit to viewport
	  padding: 30, // fit padding
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  animate: false, // whether to transition the node positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  ready: undefined, // callback on layoutready
	  stop: undefined // callback on layoutstop
	};

	function RandomLayout( options ){
	  this.options = util.extend({}, defaults, options);
	}

	RandomLayout.prototype.run = function(){
	  var options = this.options;
	  var cy = options.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  var bb = math.makeBoundingBox( options.boundingBox ? options.boundingBox : {
	    x1: 0, y1: 0, w: cy.width(), h: cy.height()
	  } );

	  var getPos = function( i, node ){
	    return {
	      x: bb.x1 + Math.round( Math.random() * bb.w ),
	      y: bb.y1 + Math.round( Math.random() * bb.h )
	    };
	  };

	  nodes.layoutPositions( this, options, getPos );

	  return this; // chaining
	};

	module.exports = RandomLayout;

	},{"../../math":79,"../../util":94}],54:[function(_dereq_,module,exports){
	'use strict';

	var math = _dereq_('../../../math');
	var is = _dereq_('../../../is');
	var util = _dereq_('../../../util');

	var BRp = {};

	BRp.arrowShapeHeight = 0.3;

	BRp.registerArrowShapes = function(){
	  var arrowShapes = this.arrowShapes = {};
	  var renderer = this;

	  // Contract for arrow shapes:
	  // 0, 0 is arrow tip
	  // (0, 1) is direction towards node
	  // (1, 0) is right
	  //
	  // functional api:
	  // collide: check x, y in shape
	  // roughCollide: called before collide, no false negatives
	  // draw: draw
	  // spacing: dist(arrowTip, nodeBoundary)
	  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

	  var bbCollide = function( x, y, size, angle, translation, padding ){
	    var x1 = translation.x - size/2 - padding;
	    var x2 = translation.x + size/2 + padding;
	    var y1 = translation.y - size/2 - padding;
	    var y2 = translation.y + size/2 + padding;

	    var inside = (x1 <= x && x <= x2) && (y1 <= y && y <= y2);

	    return inside;
	  };

	  var transform = function( x, y, size, angle, translation ){
	    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
	    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);

	    var xScaled = xRotated * size;
	    var yScaled = yRotated * size;

	    var xTranslated = xScaled + translation.x;
	    var yTranslated = yScaled + translation.y;

	    return {
	      x: xTranslated,
	      y: yTranslated
	    };
	  };

	  var transformPoints = function( pts, size, angle, translation ){
	    var retPts = [];

	    for( var i = 0; i < pts.length; i += 2 ){
	      var x = pts[i];
	      var y = pts[i + 1];

	      retPts.push( transform(x, y, size, angle, translation) );
	    }

	    return retPts;
	  };

	  var pointsToArr = function( pts ){
	    var ret = [];

	    for( var i = 0; i < pts.length; i++ ){
	      var p = pts[i];

	      ret.push( p.x, p.y );
	    }

	    return ret;
	  };

	  var defineArrowShape = function( name, defn ){
	    if( is.string(defn) ){
	      defn = arrowShapes[ defn ];
	    }

	    arrowShapes[ name ] = util.extend( {
	      name: name,

	      points: [
	        -0.15, -0.3,
	        0.15, -0.3,
	        0.15, 0.3,
	        -0.15, 0.3
	      ],

	      collide: function( x, y, size, angle, translation, padding ){
	        var points = pointsToArr( transformPoints( this.points, size + 2*padding, angle, translation ) );
	        var inside = math.pointInsidePolygonPoints( x, y, points );

	        return inside;
	      },

	      roughCollide: bbCollide,

	      draw: function( context, size, angle, translation ){
	        var points = transformPoints( this.points, size, angle, translation );

	        renderer.arrowShapeImpl('polygon')( context, points );
	      },

	      spacing: function( edge ){
	        return 0;
	      },

	      gap: function( edge ){
	        return edge._private.style['width'].pfValue * 2;
	      }
	    }, defn );
	  };

	  defineArrowShape( 'none', {
	    collide: util.falsify,

	    roughCollide: util.falsify,

	    draw: util.noop,

	    spacing: util.zeroify,

	    gap: util.zeroify
	  } );

	  defineArrowShape( 'triangle', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3
	    ]
	  } );

	  defineArrowShape( 'arrow', 'triangle' );

	  defineArrowShape( 'triangle-backcurve', {
	    points: arrowShapes['triangle'].points,

	    controlPoint: [ 0, -0.15 ],

	    roughCollide: bbCollide,

	    draw: function( context, size, angle, translation ){
	      var ptsTrans = transformPoints( this.points, size, angle, translation );
	      var ctrlPt = this.controlPoint;
	      var ctrlPtTrans = transform( ctrlPt[0], ctrlPt[1], size, angle, translation );

	      renderer.arrowShapeImpl( this.name )( context, ptsTrans, ctrlPtTrans );
	    },

	    gap: function( edge ){
	      return edge._private.style['width'].pfValue;
	    }
	  } );


	  defineArrowShape( 'triangle-tee', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3,
	      -0.15, -0.3
	    ],

	    pointsTee: [
	      -0.15, -0.4,
	      -0.15, -0.5,
	      0.15, -0.5,
	      0.15, -0.4
	    ],

	    collide: function( x, y, size, angle, translation, padding ){
	      var triPts = pointsToArr( transformPoints( this.points, size + 2*padding, angle, translation ) );
	      var teePts = pointsToArr( transformPoints( this.pointsTee, size + 2*padding, angle, translation ) );

	      var inside = math.pointInsidePolygonPoints( x, y, triPts ) || math.pointInsidePolygonPoints( x, y, teePts );

	      return inside;
	    },

	    draw: function( context, size, angle, translation ){
	      var triPts = transformPoints( this.points, size, angle, translation );
	      var teePts = transformPoints( this.pointsTee, size, angle, translation );

	      renderer.arrowShapeImpl( this.name )( context, triPts, teePts );
	    }
	  } );

	  defineArrowShape( 'vee', {
	    points: [
	      -0.15, -0.3,
	      0, 0,
	      0.15, -0.3,
	      0, -0.15
	    ],

	    gap: function( edge ){
	      return edge._private.style['width'].pfValue;
	    }
	  } );

	  defineArrowShape( 'half-triangle-overshot', {
	    points: [
	      0, -0.25,
	      -0.5, -0.25,
	      0.5, 0.25
	    ],

	    leavePathOpen: true,

	    matchEdgeWidth: true
	  } );

	  defineArrowShape( 'circle', {
	    radius: 0.15,

	    collide: function( x, y, size, angle, translation, padding ){
	      var t = translation;
	      var inside = ( Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2*padding) * this.radius, 2) );

	      return inside;
	    },

	    draw: function( context, size, angle, translation ){
	      renderer.arrowShapeImpl( this.name )( context, translation.x, translation.y, this.radius * size );
	    },

	    spacing: function( edge ){
	      return renderer.getArrowWidth(edge._private.style['width'].pfValue)
	        * this.radius;
	    }
	  } );

	  defineArrowShape( 'inhibitor', {
	    points: [
	      -0.25, 0,
	      -0.25, -0.1,
	      0.25, -0.1,
	      0.25, 0
	    ],

	    spacing: function( edge ){
	      return 1;
	    },

	    gap: function( edge ){
	      return 1;
	    }
	  } );

	  defineArrowShape( 'tee', 'inhibitor' );

	  defineArrowShape( 'square', {
	    points: [
	      -0.15, 0.00,
	      0.15, 0.00,
	      0.15, -0.3,
	      -0.15, -0.3
	    ]
	  } );

	  defineArrowShape( 'diamond', {
	    points: [
	      -0.15, -0.15,
	      0, -0.3,
	      0.15, -0.15,
	      0, 0
	    ],

	    gap: function( edge ){
	      return edge._private.style['width'].pfValue;
	    }
	  } );

	};

	module.exports = BRp;

	},{"../../../is":77,"../../../math":79,"../../../util":94}],55:[function(_dereq_,module,exports){
	'use strict';

	var BRp = {};

	var delEleCache = function( r ){
	  r.eleEache = null;
	};

	var getEleCache = function( r ){
	  if( !r.eleEache ){
	    r.eleEache = {
	      nodes: r.cy.nodes(),
	      edges: r.cy.edges()
	    };
	  }

	  return r.eleEache;
	};

	BRp.getCachedElements = function(){
	  return getEleCache( this );
	};

	BRp.getCachedNodes = function(){
	  return getEleCache( this ).nodes;
	};

	BRp.getCachedEdges = function(){
	  return getEleCache( this ).edges;
	};

	BRp.updateElementsCache = function(){
	  var r = this;

	  delEleCache( r );

	  return getEleCache( r );
	};

	module.exports = BRp;

	},{}],56:[function(_dereq_,module,exports){
	'use strict';

	var math = _dereq_('../../../math');
	var is = _dereq_('../../../is');
	var zIndexSort = _dereq_('../../../collection/zsort');

	var BRp = {};

	// Project mouse
	BRp.projectIntoViewport = function(clientX, clientY) {
	  var offsets = this.findContainerClientCoords();
	  var offsetLeft = offsets[0];
	  var offsetTop = offsets[1];

	  var x = clientX - offsetLeft;
	  var y = clientY - offsetTop;

	  x -= this.cy.pan().x; y -= this.cy.pan().y; x /= this.cy.zoom(); y /= this.cy.zoom();
	  return [x, y];
	};

	BRp.findContainerClientCoords = function() {
	  var container = this.container;

	  var bb = this.containerBB = this.containerBB || container.getBoundingClientRect();

	  return [bb.left, bb.top, bb.right - bb.left, bb.bottom - bb.top];
	};

	BRp.invalidateContainerClientCoordsCache = function(){
	  this.containerBB = null;
	};

	// Find nearest element
	BRp.findNearestElement = function(x, y, visibleElementsOnly, isTouch){
	  var self = this;
	  var r = this;
	  var eles = r.getCachedZSortedEles();
	  var near = [];
	  var zoom = r.cy.zoom();
	  var hasCompounds = r.cy.hasCompoundNodes();
	  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
	  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
	  var labelThreshold = (isTouch ? 8 : 2) / zoom;

	  function checkNode(node){
	    var _p = node._private;

	    if( _p.style['events'].strValue === 'no' ){ return; }

	    var width = node.outerWidth() + 2*nodeThreshold;
	    var height = node.outerHeight() + 2*nodeThreshold;
	    var hw = width/2;
	    var hh = height/2;
	    var pos = _p.position;

	    if(
	      pos.x - hw <= x && x <= pos.x + hw // bb check x
	        &&
	      pos.y - hh <= y && y <= pos.y + hh // bb check y
	    ){
	      var visible = !visibleElementsOnly || ( node.visible() && !node.transparent() );

	      // exit early if invisible edge and must be visible
	      if( visibleElementsOnly && !visible ){
	        return;
	      }

	      var shape = r.nodeShapes[ self.getNodeShape(node) ];

	      if(
	        shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)
	      ){
	        near.push( node );
	      }

	    }
	  }

	  function checkEdge(edge){
	    var _p = edge._private;

	    if( _p.style['events'].strValue === 'no' ){ return; }

	    var rs = _p.rscratch;
	    var style = _p.style;
	    var width = style['width'].pfValue/2 + edgeThreshold; // more like a distance radius from centre
	    var widthSq = width * width;
	    var width2 = width * 2;
	    var src = _p.source;
	    var tgt = _p.target;
	    var inEdgeBB = false;
	    var sqDist;

	    // exit early if invisible edge and must be visible
	    var passedVisibilityCheck;
	    var passesVisibilityCheck = function(){
	      if( passedVisibilityCheck !== undefined ){
	        return passedVisibilityCheck;
	      }

	      if( !visibleElementsOnly ){
	        passedVisibilityCheck = true;
	        return true;
	      }

	      var visible = edge.visible() && !edge.transparent();
	      if( visible ){
	        passedVisibilityCheck = true;
	        return true;
	      }

	      passedVisibilityCheck = false;
	      return false;
	    };

	    if( rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack' ){
	      var pts = rs.allpts;

	      for( var i = 0; i + 3 < pts.length; i += 2 ){
	        if(
	          (inEdgeBB = math.inLineVicinity(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3], width2))
	            && passesVisibilityCheck() &&
	          widthSq > ( sqDist = math.sqDistanceToFiniteLine(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3]) )
	        ){
	          near.push( edge );
	        }
	      }

	    } else if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	      var pts = rs.allpts;
	      for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
	        if(
	          (inEdgeBB = math.inBezierVicinity(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3], pts[i+4], pts[i+5], width2))
	            && passesVisibilityCheck() &&
	          (widthSq > (sqDist = math.sqDistanceToQuadraticBezier(x, y, pts[i], pts[i+1], pts[i+2], pts[i+3], pts[i+4], pts[i+5])) )
	        ){
	          near.push( edge );
	        }
	      }
	    }

	    // if we're close to the edge but didn't hit it, maybe we hit its arrows
	    if( inEdgeBB && passesVisibilityCheck() && near.length === 0 || near[near.length - 1] !== edge ){
	      var src = src || _p.source;
	      var tgt = tgt || _p.target;

	      var eWidth = style['width'].pfValue;
	      var arSize = self.getArrowWidth( eWidth );

	      var arrows = [
	        { name: 'source', x: rs.arrowStartX, y: rs.arrowStartY, angle: rs.srcArrowAngle },
	        { name: 'target', x: rs.arrowEndX, y: rs.arrowEndY, angle: rs.tgtArrowAngle },
	        { name: 'mid-source', x: rs.midX, y: rs.midY, angle: rs.midsrcArrowAngle },
	        { name: 'mid-target', x: rs.midX, y: rs.midY, angle: rs.midtgtArrowAngle }
	      ];

	      for( var i = 0; i < arrows.length; i++ ){
	        var ar = arrows[i];
	        var shape = r.arrowShapes[ style[ar.name+'-arrow-shape'].value ];

	        if(
	          shape.roughCollide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold)
	           &&
	          shape.collide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeThreshold)
	        ){
	          near.push( edge );
	          break;
	        }
	      }
	    }

	    // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)
	    if( hasCompounds &&  near.length > 0 && near[ near.length - 1 ] === edge ){
	      checkNode( src );
	      checkNode( tgt );
	    }
	  }

	  function checkLabel(ele){
	    var _p = ele._private;
	    var th = labelThreshold;

	    if( _p.style['text-events'].strValue === 'no' ){ return; }

	    // adjust bb w/ angle
	    if( _p.group === 'edges' && _p.style['edge-text-rotation'].strValue === 'autorotate' ){

	      var rstyle = _p.rstyle;
	      var lw = rstyle.labelWidth + 2*th;
	      var lh = rstyle.labelHeight + 2*th;
	      var lx = rstyle.labelX;
	      var ly = rstyle.labelY;

	      var theta = _p.rscratch.labelAngle;
	      var cos = Math.cos( theta );
	      var sin = Math.sin( theta );

	      var rotate = function( x, y ){
	        x = x - lx;
	        y = y - ly;

	        return {
	          x: x*cos - y*sin + lx,
	          y: x*sin + y*cos + ly
	        };
	      };

	      var lx1 = lx - lw/2;
	      var lx2 = lx + lw/2;
	      var ly1 = ly - lh/2;
	      var ly2 = ly + lh/2;

	      var px1y1 = rotate( lx1, ly1 );
	      var px1y2 = rotate( lx1, ly2 );
	      var px2y1 = rotate( lx2, ly1 );
	      var px2y2 = rotate( lx2, ly2 );

	      var points = [
	        px1y1.x, px1y1.y,
	        px2y1.x, px2y1.y,
	        px2y2.x, px2y2.y,
	        px1y2.x, px1y2.y
	      ];

	      if( math.pointInsidePolygonPoints( x, y, points ) ){
	        near.push( ele );
	      }

	    } else {
	      var bb = ele.boundingBox({
	        includeLabels: true,
	        includeNodes: false,
	        includeEdges: false
	      });

	      // adjust bb w/ threshold
	      bb.x1 -= th;
	      bb.y1 -= th;
	      bb.x2 += th;
	      bb.y2 += th;
	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;

	      if( math.inBoundingBox( bb, x, y ) ){
	        near.push( ele );
	      }
	    }

	  }

	  for( var i = eles.length - 1; i >= 0; i-- ){ // reverse order for precedence
	    var ele = eles[i];
	    var _p = ele._private;

	    if( near.length > 0 ){ break; } // since we check in z-order, first found is top and best result => exit early

	    if( _p.group === 'nodes' ){
	      checkNode( ele );

	    } else  { // then edge
	      checkEdge( ele );
	    }

	    checkLabel( ele );

	  }


	  if( near.length > 0 ){
	    return near[ near.length - 1 ];
	  } else {
	    return null;
	  }
	};

	// 'Give me everything from this box'
	BRp.getAllInBox = function(x1, y1, x2, y2) {
	  var nodes = this.getCachedNodes();
	  var edges = this.getCachedEdges();
	  var box = [];

	  var x1c = Math.min(x1, x2);
	  var x2c = Math.max(x1, x2);
	  var y1c = Math.min(y1, y2);
	  var y2c = Math.max(y1, y2);

	  x1 = x1c;
	  x2 = x2c;
	  y1 = y1c;
	  y2 = y2c;

	  var boxBb = math.makeBoundingBox({
	    x1: x1, y1: y1,
	    x2: x2, y2: y2
	  });

	  for ( var i = 0; i < nodes.length; i++ ){
	    var node = nodes[i];
	    var nodeBb = node.boundingBox({
	      includeNodes: true,
	      includeEdges: false,
	      includeLabels: false
	    });

	    if( math.boundingBoxesIntersect(boxBb, nodeBb) ){
	      box.push(nodes[i]);
	    }
	  }

	  for( var e = 0; e < edges.length; e++ ){
	    var edge = edges[e];
	    var _p = edge._private;
	    var rs = _p.rscratch;

	    if( rs.startX != null && rs.startY != null && !math.inBoundingBox( boxBb, rs.startX, rs.startY ) ){ continue; }
	    if( rs.endX != null && rs.endY != null && !math.inBoundingBox( boxBb, rs.endX, rs.endY ) ){ continue; }

	    if( rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack' ){

	      var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
	      var allInside = true;

	      for( var i = 0; i < pts.length; i++ ){
	        if( !math.pointInBoundingBox( boxBb, pts[i] ) ){
	          allInside = false;
	          break;
	        }
	      }

	      if( allInside ){
	        box.push( edge );
	      }

	    } else if( rs.edgeType === 'haystack' || rs.edgeType === 'straight' ){
	      box.push( edge );
	    }

	  }

	  return box;
	};


	/**
	 * Returns the shape of the given node. If the height or width of the given node
	 * is set to auto, the node is considered to be a compound.
	 *
	 * @param node          a node
	 * @return {String}     shape of the node
	 */
	BRp.getNodeShape = function( node ){
	  var r = this;
	  var style = node._private.style;
	  var shape = style['shape'].value;

	  if( node.isParent() ){
	    if( shape === 'rectangle' || shape === 'roundrectangle' ){
	      return shape;
	    } else {
	      return 'rectangle';
	    }
	  }

	  if( shape === 'polygon' ){
	    var points = style['shape-polygon-points'].value;

	    return r.nodeShapes.makePolygon( points ).name;
	  }

	  return shape;
	};

	BRp.updateCachedZSortedEles = function(){
	  this.getCachedZSortedEles( true );
	};

	BRp.getCachedZSortedEles = function( forceRecalc ){
	  var lastNodes = this.lastZOrderCachedNodes;
	  var lastEdges = this.lastZOrderCachedEdges;
	  var nodes = this.getCachedNodes();
	  var edges = this.getCachedEdges();
	  var eles = [];

	  if( forceRecalc || !lastNodes || !lastEdges || lastNodes !== nodes || lastEdges !== edges ){
	    //console.time('cachezorder')

	    for( var i = 0; i < nodes.length; i++ ){
	      var n = nodes[i];

	      if( n.animated() || (n.visible() && !n.transparent()) ){
	        eles.push( n );
	      }
	    }

	    for( var i = 0; i < edges.length; i++ ){
	      var e = edges[i];

	      if( e.animated() || (e.visible() && !e.transparent()) ){
	        eles.push( e );
	      }
	    }

	    eles.sort( zIndexSort );
	    this.cachedZSortedEles = eles;
	    //console.log('make cache')

	    //console.timeEnd('cachezorder')
	  } else {
	    eles = this.cachedZSortedEles;
	    //console.log('read cache')
	  }

	  this.lastZOrderCachedNodes = nodes;
	  this.lastZOrderCachedEdges = edges;

	  return eles;
	};

	function pushBezierPts(edge, pts){
	  var qbezierAt = function( p1, p2, p3, t ){ return math.qbezierAt(p1, p2, p3, t); };
	  var _p = edge._private;
	  var bpts = _p.rstyle.bezierPts;

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.05 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.05 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.25 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.25 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.4 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.4 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.5 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.5 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.6 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.6 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.75 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.75 )
	  });

	  bpts.push({
	    x: qbezierAt( pts[0], pts[2], pts[4], 0.95 ),
	    y: qbezierAt( pts[1], pts[3], pts[5], 0.95 )
	  });
	}

	BRp.projectLines = function( edge ){
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var et = rs.edgeType;

	  if( et === 'multibezier' ||  et === 'bezier' ||  et === 'self' ||  et === 'compound' ){
	    var bpts = _p.rstyle.bezierPts = []; // jshint ignore:line

	    for( var i = 0; i + 5 < rs.allpts.length; i += 4 ){
	      pushBezierPts( edge, rs.allpts.slice(i, i+6) );
	    }
	  } else if(  et === 'segments' ){
	    var lpts = _p.rstyle.linePts = [];

	    for( var i = 0; i + 1 < rs.allpts.length; i += 2 ){
	      lpts.push({
	        x: rs.allpts[i],
	        y: rs.allpts[i+1]
	      });
	    }
	  } else if( et === 'haystack' ){
	    var hpts = rs.haystackPts;

	    _p.rstyle.haystackPts = [
	      { x: hpts[0], y: hpts[1] },
	      { x: hpts[2], y: hpts[3] }
	    ];
	  }
	};

	BRp.projectBezier = BRp.projectLines;

	BRp.recalculateNodeLabelProjection = function( node ){
	  var content = node._private.style['label'].strValue;
	  if( !content || content.match(/^\s+$/) ){ return; }

	  var textX, textY;
	  var nodeWidth = node.outerWidth();
	  var nodeHeight = node.outerHeight();
	  var nodePos = node._private.position;
	  var textHalign = node._private.style['text-halign'].strValue;
	  var textValign = node._private.style['text-valign'].strValue;
	  var rs = node._private.rscratch;
	  var rstyle = node._private.rstyle;

	  switch( textHalign ){
	    case 'left':
	      textX = nodePos.x - nodeWidth / 2;
	      break;

	    case 'right':
	      textX = nodePos.x + nodeWidth / 2;
	      break;

	    default: // e.g. center
	      textX = nodePos.x;
	  }

	  switch( textValign ){
	    case 'top':
	      textY = nodePos.y - nodeHeight / 2;
	      break;

	    case 'bottom':
	      textY = nodePos.y + nodeHeight / 2;
	      break;

	    default: // e.g. middle
	      textY = nodePos.y;
	  }

	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;

	  this.applyLabelDimensions( node );
	};

	BRp.recalculateEdgeLabelProjection = function( edge ){
	  var content = edge._private.style['label'].strValue;
	  if( !content || content.match(/^\s+$/) ){ return; }

	  var textX, textY;
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  //var style = _p.style;
	  var rstyle = _p.rstyle;

	  textX = rs.midX;
	  textY = rs.midY;

	  // add center point to style so bounding box calculations can use it
	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;

	  this.applyLabelDimensions( edge );
	};

	BRp.applyLabelDimensions = function( ele ){
	  var rs = ele._private.rscratch;
	  var rstyle = ele._private.rstyle;

	  var text = this.getLabelText( ele );
	  var labelDims = this.calculateLabelDimensions( ele, text );

	  rstyle.labelWidth = labelDims.width;
	  rs.labelWidth = labelDims.width;

	  rstyle.labelHeight = labelDims.height;
	  rs.labelHeight = labelDims.height;
	};

	BRp.getLabelText = function( ele ){
	  var style = ele._private.style;
	  var text = ele._private.style['label'].strValue;
	  var textTransform = style['text-transform'].value;
	  var rscratch = ele._private.rscratch;

	  if (textTransform == 'none') {
	  } else if (textTransform == 'uppercase') {
	    text = text.toUpperCase();
	  } else if (textTransform == 'lowercase') {
	    text = text.toLowerCase();
	  }

	  if( style['text-wrap'].value === 'wrap' ){
	    //console.log('wrap');

	    // save recalc if the label is the same as before
	    if( rscratch.labelWrapKey && rscratch.labelWrapKey === rscratch.labelKey ){
	      // console.log('wrap cache hit');
	      return rscratch.labelWrapCachedText;
	    }
	    // console.log('wrap cache miss');

	    var lines = text.split('\n');
	    var maxW = style['text-max-width'].pfValue;
	    var wrappedLines = [];

	    for( var l = 0; l < lines.length; l++ ){
	      var line = lines[l];
	      var lineDims = this.calculateLabelDimensions( ele, line, 'line=' + line );
	      var lineW = lineDims.width;

	      if( lineW > maxW ){ // line is too long
	        var words = line.split(/\s+/); // NB: assume collapsed whitespace into single space
	        var subline = '';

	        for( var w = 0; w < words.length; w++ ){
	          var word = words[w];
	          var testLine = subline.length === 0 ? word : subline + ' ' + word;
	          var testDims = this.calculateLabelDimensions( ele, testLine, 'testLine=' + testLine );
	          var testW = testDims.width;

	          if( testW <= maxW ){ // word fits on current line
	            subline += word + ' ';
	          } else { // word starts new line
	            wrappedLines.push( subline );
	            subline = word + ' ';
	          }
	        }

	        // if there's remaining text, put it in a wrapped line
	        if( !subline.match(/^\s+$/) ){
	          wrappedLines.push( subline );
	        }
	      } else { // line is already short enough
	        wrappedLines.push( line );
	      }
	    } // for

	    rscratch.labelWrapCachedLines = wrappedLines;
	    rscratch.labelWrapCachedText = text = wrappedLines.join('\n');
	    rscratch.labelWrapKey = rscratch.labelKey;

	    // console.log(text)
	  } // if wrap

	  return text;
	};

	BRp.calculateLabelDimensions = function( ele, text, extraKey ){
	  var r = this;
	  var style = ele._private.style;
	  var fStyle = style['font-style'].strValue;
	  var size = style['font-size'].pfValue + 'px';
	  var family = style['font-family'].strValue;
	  // var variant = style['font-variant'].strValue;
	  var weight = style['font-weight'].strValue;

	  var cacheKey = ele._private.labelKey;

	  if( extraKey ){
	    cacheKey += '$@$' + extraKey;
	  }

	  var cache = r.labelDimCache || (r.labelDimCache = {});

	  if( cache[cacheKey] ){
	    return cache[cacheKey];
	  }

	  var div = this.labelCalcDiv;

	  if( !div ){
	    div = this.labelCalcDiv = document.createElement('div');
	    document.body.appendChild( div );
	  }

	  var ds = div.style;

	  // from ele style
	  ds.fontFamily = family;
	  ds.fontStyle = fStyle;
	  ds.fontSize = size;
	  // ds.fontVariant = variant;
	  ds.fontWeight = weight;

	  // forced style
	  ds.position = 'absolute';
	  ds.left = '-9999px';
	  ds.top = '-9999px';
	  ds.zIndex = '-1';
	  ds.visibility = 'hidden';
	  ds.pointerEvents = 'none';
	  ds.padding = '0';
	  ds.lineHeight = '1';

	  if( style['text-wrap'].value === 'wrap' ){
	    ds.whiteSpace = 'pre'; // so newlines are taken into account
	  } else {
	    ds.whiteSpace = 'normal';
	  }

	  // put label content in div
	  div.textContent = text;

	  cache[cacheKey] = {
	    width: div.clientWidth,
	    height: div.clientHeight
	  };

	  return cache[cacheKey];
	};

	BRp.recalculateRenderedStyle = function( eles ){
	  var edges = [];
	  var nodes = [];
	  var handledEdge = {};

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];
	    var _p = ele._private;
	    var style = _p.style;
	    var rs = _p.rscratch;
	    var rstyle = _p.rstyle;
	    var id = _p.data.id;
	    var bbStyleSame = rs.boundingBoxKey != null && _p.boundingBoxKey === rs.boundingBoxKey;
	    var labelStyleSame = rs.labelKey != null && _p.labelKey === rs.labelKey;
	    var styleSame = bbStyleSame && labelStyleSame;

	    if( _p.group === 'nodes' ){
	      var pos = _p.position;
	      var posSame = rstyle.nodeX != null && rstyle.nodeY != null && pos.x === rstyle.nodeX && pos.y === rstyle.nodeY;
	      var wSame = rstyle.nodeW != null && rstyle.nodeW === style['width'].pfValue;
	      var hSame = rstyle.nodeH != null && rstyle.nodeH === style['height'].pfValue;

	      if( !posSame || !styleSame || !wSame || !hSame ){
	        nodes.push( ele );
	      }

	      rstyle.nodeX = pos.x;
	      rstyle.nodeY = pos.y;
	      rstyle.nodeW = style['width'].pfValue;
	      rstyle.nodeH = style['height'].pfValue;
	    } else { // edges

	      var srcPos = _p.source._private.position;
	      var tgtPos = _p.target._private.position;
	      var srcSame = rstyle.srcX != null && rstyle.srcY != null && srcPos.x === rstyle.srcX && srcPos.y === rstyle.srcY;
	      var tgtSame = rstyle.tgtX != null && rstyle.tgtY != null && tgtPos.x === rstyle.tgtX && tgtPos.y === rstyle.tgtY;
	      var positionsSame = srcSame && tgtSame;

	      if( !positionsSame || !styleSame ){
	        if( rs.edgeType === 'bezier' || rs.edgeType === 'straight' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	          if( !handledEdge[ id ] ){
	            edges.push( ele );
	            handledEdge[ id ] = true;

	            var parallelEdges = ele.parallelEdges();
	            for( var i = 0; i < parallelEdges.length; i++ ){
	              var pEdge = parallelEdges[i];
	              var pId = pEdge._private.data.id;

	              if( !handledEdge[ pId ] ){
	                edges.push( pEdge );
	                handledEdge[ pId ] = true;
	              }

	            }
	          }
	        } else {
	          edges.push( ele );
	        }
	      } // if positions diff

	      // update rstyle positions
	      rstyle.srcX = srcPos.x;
	      rstyle.srcY = srcPos.y;
	      rstyle.tgtX = tgtPos.x;
	      rstyle.tgtY = tgtPos.y;

	    } // if edges

	    rs.boundingBoxKey = _p.boundingBoxKey;
	    rs.labelKey = _p.labelKey;
	  }

	  this.recalculateEdgeProjections( edges );
	  this.recalculateLabelProjections( nodes, edges );
	};

	BRp.recalculateLabelProjections = function( nodes, edges ){
	  for( var i = 0; i < nodes.length; i++ ){
	    this.recalculateNodeLabelProjection( nodes[i] );
	  }

	  for( var i = 0; i < edges.length; i++ ){
	    this.recalculateEdgeLabelProjection( edges[i] );
	  }
	};

	BRp.recalculateEdgeProjections = function( edges ){
	  this.findEdgeControlPoints( edges );
	};


	// Find edge control points
	BRp.findEdgeControlPoints = function(edges) {
	  if( !edges || edges.length === 0 ){ return; }

	  var r = this;
	  var cy = r.cy;
	  var hasCompounds = cy.hasCompoundNodes();
	  var hashTable = {};
	  var pairIds = [];
	  var haystackEdges = [];
	  var autorotateEdges = [];

	  // create a table of edge (src, tgt) => list of edges between them
	  var pairId;
	  for (var i = 0; i < edges.length; i++){
	    var edge = edges[i];
	    var _p = edge._private;
	    var data = _p.data;
	    var style = _p.style;
	    var curveStyle = style['curve-style'].value;
	    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

	    // ignore edges who are not to be displayed
	    // they shouldn't take up space
	    if( style.display.value === 'none' ){
	      continue;
	    }

	    if( style['edge-text-rotation'].strValue === 'autorotate' ){
	      autorotateEdges.push( edge );
	    }

	    if( curveStyle === 'haystack' ){
	      haystackEdges.push( edge );
	      continue;
	    }

	    var srcId = data.source;
	    var tgtId = data.target;

	    pairId = srcId > tgtId ?
	      tgtId + '$-$' + srcId :
	      srcId + '$-$' + tgtId ;

	    if( edgeIsUnbundled ){
	      pairId = 'unbundled' + '$-$' + data.id;
	    }

	    if( hashTable[pairId] == null ){
	      hashTable[pairId] = [];
	      pairIds.push( pairId );
	    }

	    hashTable[pairId].push( edge );

	    if( edgeIsUnbundled ){
	      hashTable[pairId].hasUnbundled = true;
	    }
	  }

	  var src, tgt, src_p, tgt_p, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;
	  var vectorNormInverse;
	  var badBezier;

	  // for each pair (src, tgt), create the ctrl pts
	  // Nested for loop is OK; total number of iterations for both loops = edgeCount
	  for (var p = 0; p < pairIds.length; p++) {
	    pairId = pairIds[p];
	    var pairEdges = hashTable[pairId];

	    // for each pair id, the edges should be sorted by index
	    pairEdges.sort(function(edge1, edge2){
	      return edge1._private.index - edge2._private.index;
	    });

	    src = pairEdges[0]._private.source;
	    tgt = pairEdges[0]._private.target;

	    src_p = src._private;
	    tgt_p = tgt._private;

	    // make sure src/tgt distinction is consistent
	    // (src/tgt in this case are just for ctrlpts and don't actually have to be true src/tgt)
	    if( src_p.data.id > tgt_p.data.id ){
	      var temp = src;
	      src = tgt;
	      tgt = temp;
	    }

	    srcPos = src_p.position;
	    tgtPos = tgt_p.position;

	    srcW = src.outerWidth();
	    srcH = src.outerHeight();

	    tgtW = tgt.outerWidth();
	    tgtH = tgt.outerHeight();

	    srcShape = r.nodeShapes[ this.getNodeShape(src) ];
	    tgtShape = r.nodeShapes[ this.getNodeShape(tgt) ];

	    badBezier = false;


	    if( (pairEdges.length > 1 && src !== tgt) || pairEdges.hasUnbundled ){

	      // pt outside src shape to calc distance/displacement from src to tgt
	      var srcOutside = srcShape.intersectLine(
	        srcPos.x,
	        srcPos.y,
	        srcW,
	        srcH,
	        tgtPos.x,
	        tgtPos.y,
	        0
	      );

	      // pt outside tgt shape to calc distance/displacement from src to tgt
	      var tgtOutside = tgtShape.intersectLine(
	        tgtPos.x,
	        tgtPos.y,
	        tgtW,
	        tgtH,
	        srcPos.x,
	        srcPos.y,
	        0
	      );

	      var midptSrcPts = {
	        x1: srcOutside[0],
	        x2: tgtOutside[0],
	        y1: srcOutside[1],
	        y2: tgtOutside[1]
	      };

	      var dy = ( tgtOutside[1] - srcOutside[1] );
	      var dx = ( tgtOutside[0] - srcOutside[0] );
	      var l = Math.sqrt( dx*dx + dy*dy );

	      var vector = {
	        x: dx,
	        y: dy
	      };

	      var vectorNorm = {
	        x: vector.x/l,
	        y: vector.y/l
	      };
	      vectorNormInverse = {
	        x: -vectorNorm.y,
	        y: vectorNorm.x
	      };


	      // if src intersection is inside tgt or tgt intersection is inside src, then no ctrl pts to draw
	      if(
	        tgtShape.checkPoint( srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y )  ||
	        srcShape.checkPoint( tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y )
	      ){
	        vectorNormInverse = {};
	        badBezier = true;
	      }

	    }

	    var edge;
	    var edge_p;
	    var rs;

	    for (var i = 0; i < pairEdges.length; i++) {
	      edge = pairEdges[i];
	      edge_p = edge._private;
	      rs = edge_p.rscratch;

	      var edgeIndex1 = rs.lastEdgeIndex;
	      var edgeIndex2 = i;

	      var numEdges1 = rs.lastNumEdges;
	      var numEdges2 = pairEdges.length;

	      var eStyle = edge_p.style;
	      var style = eStyle;
	      var curveStyle = eStyle['curve-style'].value;
	      var ctrlptDists = eStyle['control-point-distances'];
	      var ctrlptWs = eStyle['control-point-weights'];
	      var bezierN = ctrlptDists && ctrlptWs ? Math.min( ctrlptDists.value.length, ctrlptWs.value.length ) : 1;
	      var stepSize = eStyle['control-point-step-size'].pfValue;
	      var ctrlptDist = ctrlptDists !== undefined ? ctrlptDists.pfValue[0] : undefined;
	      var ctrlptWeight = ctrlptWs.value[0];
	      var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

	      var swappedDirection = edge_p.source !== src;

	      if( swappedDirection && edgeIsUnbundled ){
	        ctrlptDist *= -1;
	      }

	      var srcX1 = rs.lastSrcCtlPtX;
	      var srcX2 = srcPos.x;
	      var srcY1 = rs.lastSrcCtlPtY;
	      var srcY2 = srcPos.y;
	      var srcW1 = rs.lastSrcCtlPtW;
	      var srcW2 = src.outerWidth();
	      var srcH1 = rs.lastSrcCtlPtH;
	      var srcH2 = src.outerHeight();

	      var tgtX1 = rs.lastTgtCtlPtX;
	      var tgtX2 = tgtPos.x;
	      var tgtY1 = rs.lastTgtCtlPtY;
	      var tgtY2 = tgtPos.y;
	      var tgtW1 = rs.lastTgtCtlPtW;
	      var tgtW2 = tgt.outerWidth();
	      var tgtH1 = rs.lastTgtCtlPtH;
	      var tgtH2 = tgt.outerHeight();

	      var width1 = rs.lastW;
	      var width2 = eStyle['control-point-step-size'].pfValue;

	      if( badBezier ){
	        rs.badBezier = true;
	      } else {
	        rs.badBezier = false;
	      }

	      if( srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2
	      &&  tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2
	      &&  width1 === width2
	      &&  ((edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2) || edgeIsUnbundled) ){
	        // console.log('edge ctrl pt cache HIT')
	        continue; // then the control points haven't changed and we can skip calculating them
	      } else {
	        rs.lastSrcCtlPtX = srcX2;
	        rs.lastSrcCtlPtY = srcY2;
	        rs.lastSrcCtlPtW = srcW2;
	        rs.lastSrcCtlPtH = srcH2;
	        rs.lastTgtCtlPtX = tgtX2;
	        rs.lastTgtCtlPtY = tgtY2;
	        rs.lastTgtCtlPtW = tgtW2;
	        rs.lastTgtCtlPtH = tgtH2;
	        rs.lastEdgeIndex = edgeIndex2;
	        rs.lastNumEdges = numEdges2;
	        rs.lastWidth = width2;
	        // console.log('edge ctrl pt cache MISS')
	      }

	      if( src === tgt ){
	        // Self-edge

	        rs.edgeType = 'self';

	        var j = i;
	        var loopDist = stepSize;

	        if( edgeIsUnbundled ){
	          j = 0;
	          loopDist = ctrlptDist;
	        }

	        rs.ctrlpts = [
	          srcPos.x,
	          srcPos.y - (1 + Math.pow(srcH, 1.12) / 100) * loopDist * (j / 3 + 1),

	          srcPos.x - (1 + Math.pow(srcW, 1.12) / 100) * loopDist * (j / 3 + 1),
	          srcPos.y
	        ];

	      } else if(
	        hasCompounds &&
	        ( src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild() ) &&
	        ( src.parents().anySame(tgt) || tgt.parents().anySame(src) )
	      ){
	        // Compound edge

	        rs.edgeType = 'compound';

	        // because the line approximation doesn't apply for compound beziers
	        // (loop/self edges are already elided b/c of cheap src==tgt check)
	        rs.badBezier = false;

	        var j = i;
	        var loopDist = stepSize;

	        if( edgeIsUnbundled ){
	          j = 0;
	          loopDist = ctrlptDist;
	        }

	        var loopW = 50;

	        var loopaPos = {
	          x: srcPos.x - srcW/2,
	          y: srcPos.y - srcH/2
	        };

	        var loopbPos = {
	          x: tgtPos.x - tgtW/2,
	          y: tgtPos.y - tgtH/2
	        };

	        var loopPos = {
	          x: Math.min( loopaPos.x, loopbPos.x ),
	          y: Math.min( loopaPos.y, loopbPos.y )
	        };

	        // avoids cases with impossible beziers
	        var minCompoundStretch = 0.5;
	        var compoundStretchA = Math.max( minCompoundStretch, Math.log(srcW * 0.01) );
	        var compoundStretchB = Math.max( minCompoundStretch, Math.log(tgtW * 0.01) );

	        rs.ctrlpts = [
	          loopPos.x,
	          loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA,

	          loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB,
	          loopPos.y
	        ];

	      } else if( curveStyle === 'segments' ){
	        // Segments (multiple straight lines)

	        rs.edgeType = 'segments';
	        rs.segpts = [];

	        var segmentWs = eStyle['segment-weights'].pfValue;
	        var segmentDs = eStyle['segment-distances'].pfValue;
	        var segmentsN = Math.min( segmentWs.length, segmentDs.length );

	        for( var s = 0; s < segmentsN; s++ ){
	          var w = segmentWs[s];
	          var d = segmentDs[s];

	          // d = swappedDirection ? -d : d;
	          //
	          // d = Math.abs(d);

	          // var w1 = !swappedDirection ? (1 - w) : w;
	          // var w2 = !swappedDirection ? w : (1 - w);

	          var w1 = (1 - w);
	          var w2 = w;

	          var adjustedMidpt = {
	            x: midptSrcPts.x1 * w1 + midptSrcPts.x2 * w2,
	            y: midptSrcPts.y1 * w1 + midptSrcPts.y2 * w2
	          };

	          rs.segpts.push(
	            adjustedMidpt.x + vectorNormInverse.x * d,
	            adjustedMidpt.y + vectorNormInverse.y * d
	          );
	        }

	      // Straight edge
	      } else if (
	        pairEdges.length % 2 === 1
	        && i === Math.floor(pairEdges.length / 2)
	        && !edgeIsUnbundled
	      ){

	        rs.edgeType = 'straight';

	      } else {
	        // (Multi)bezier

	        var multi = edgeIsUnbundled;

	        rs.edgeType = multi ? 'multibezier' : 'bezier';
	        rs.ctrlpts = [];

	        for( var b = 0; b < bezierN; b++ ){
	          var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;
	          var manctrlptDist;
	          var sign = math.signum( normctrlptDist );

	          if( multi ){
	            ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size
	            ctrlptWeight = ctrlptWs.value[b];
	          }

	          if( edgeIsUnbundled ){ // multi or single unbundled
	            manctrlptDist = ctrlptDist;
	          } else {
	            manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
	          }

	          var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;

	          var w1 = !swappedDirection || edgeIsUnbundled ? (1 - ctrlptWeight) : ctrlptWeight;
	          var w2 = !swappedDirection || edgeIsUnbundled ? ctrlptWeight : (1 - ctrlptWeight);

	          var adjustedMidpt = {
	            x: midptSrcPts.x1 * w1 + midptSrcPts.x2 * w2,
	            y: midptSrcPts.y1 * w1 + midptSrcPts.y2 * w2
	          };

	          rs.ctrlpts.push(
	            adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint,
	            adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint
	          );
	        }

	      }

	      // find endpts for edge
	      this.findEndpoints( edge );

	      var badStart = !is.number( rs.startX ) || !is.number( rs.startY );
	      var badAStart = !is.number( rs.arrowStartX ) || !is.number( rs.arrowStartY );
	      var badEnd = !is.number( rs.endX ) || !is.number( rs.endY );
	      var badAEnd = !is.number( rs.arrowEndX ) || !is.number( rs.arrowEndY );

	      var minCpADistFactor = 3;
	      var arrowW = this.getArrowWidth( eStyle['width'].pfValue ) * this.arrowShapeHeight;
	      var minCpADist = minCpADistFactor * arrowW;

	      if( rs.edgeType === 'bezier' ){
	        var startACpDist = math.distance( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.startX, y: rs.startY } );
	        var closeStartACp = startACpDist < minCpADist;
	        var endACpDist = math.distance( { x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.endX, y: rs.endY } );
	        var closeEndACp = endACpDist < minCpADist;

	        var overlapping = false;

	        if( badStart || badAStart || closeStartACp ){
	          overlapping = true;

	          // project control point along line from src centre to outside the src shape
	          // (otherwise intersection will yield nothing)
	          var cpD = { // delta
	            x: rs.ctrlpts[0] - srcPos.x,
	            y: rs.ctrlpts[1] - srcPos.y
	          };
	          var cpL = Math.sqrt( cpD.x*cpD.x + cpD.y*cpD.y ); // length of line
	          var cpM = { // normalised delta
	            x: cpD.x / cpL,
	            y: cpD.y / cpL
	          };
	          var radius = Math.max(srcW, srcH);
	          var cpProj = { // *2 radius guarantees outside shape
	            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	            y: rs.ctrlpts[1] + cpM.y * 2 * radius
	          };

	          var srcCtrlPtIntn = srcShape.intersectLine(
	            srcPos.x,
	            srcPos.y,
	            srcW,
	            srcH,
	            cpProj.x,
	            cpProj.y,
	            0
	          );

	          if( closeStartACp ){
	            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
	            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
	          } else {
	            rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
	            rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
	          }
	        }

	        if( badEnd || badAEnd || closeEndACp ){
	          overlapping = true;

	          // project control point along line from tgt centre to outside the tgt shape
	          // (otherwise intersection will yield nothing)
	          var cpD = { // delta
	            x: rs.ctrlpts[0] - tgtPos.x,
	            y: rs.ctrlpts[1] - tgtPos.y
	          };
	          var cpL = Math.sqrt( cpD.x*cpD.x + cpD.y*cpD.y ); // length of line
	          var cpM = { // normalised delta
	            x: cpD.x / cpL,
	            y: cpD.y / cpL
	          };
	          var radius = Math.max(srcW, srcH);
	          var cpProj = { // *2 radius guarantees outside shape
	            x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	            y: rs.ctrlpts[1] + cpM.y * 2 * radius
	          };

	          var tgtCtrlPtIntn = tgtShape.intersectLine(
	            tgtPos.x,
	            tgtPos.y,
	            tgtW,
	            tgtH,
	            cpProj.x,
	            cpProj.y,
	            0
	          );

	          if( closeEndACp ){
	            rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);
	            rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);
	          } else {
	            rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;
	            rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;
	          }

	        }

	        if( overlapping ){
	          // recalc endpts
	          this.findEndpoints( edge );
	        }

	      }

	      if( rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' ){
	        rs.allpts = [];

	        rs.allpts.push( rs.startX, rs.startY );

	        for( var b = 0; b+1 < rs.ctrlpts.length; b += 2 ){
	          // ctrl pt itself
	          rs.allpts.push( rs.ctrlpts[b], rs.ctrlpts[b+1] );

	          // the midpt between ctrlpts as intermediate destination pts
	          if( b + 3 < rs.ctrlpts.length ){
	            rs.allpts.push( (rs.ctrlpts[b] + rs.ctrlpts[b+2])/2, (rs.ctrlpts[b+1] + rs.ctrlpts[b+3])/2 );
	          }
	        }

	        rs.allpts.push( rs.endX, rs.endY );

	        var m, mt;
	        if( rs.edgeType === 'bezier' ){
	          rs.midX = math.qbezierAt( rs.arrowStartX, rs.ctrlpts[0], rs.arrowEndX, 0.5 );
	          rs.midY = math.qbezierAt( rs.arrowStartY, rs.ctrlpts[1], rs.arrowEndY, 0.5 );
	        } else if( rs.ctrlpts.length/2 % 2 === 0 ){
	          m = rs.allpts.length/2 - 1;

	          rs.midX = rs.allpts[m];
	          rs.midY = rs.allpts[m+1];
	        } else {
	          m = rs.allpts.length/2 - 3;
	          mt = 0.5;

	          rs.midX = math.qbezierAt( rs.allpts[m], rs.allpts[m+2], rs.allpts[m+4], mt );
	          rs.midY = math.qbezierAt( rs.allpts[m+1], rs.allpts[m+3], rs.allpts[m+5], mt );
	        }

	      } else if( rs.edgeType === 'straight' ){
	        // need to calc these after endpts
	        rs.allpts = [ rs.startX, rs.startY, rs.endX, rs.endY ];

	        // default midpt for labels etc
	        rs.midX = ( rs.arrowStartX + rs.arrowEndX )/2;
	        rs.midY = ( rs.arrowStartY + rs.arrowEndY )/2;

	      } else if( rs.edgeType === 'segments' ){
	        rs.allpts = [];
	        rs.allpts.push( rs.startX, rs.startY );
	        rs.allpts.push.apply( rs.allpts, rs.segpts );
	        rs.allpts.push( rs.endX, rs.endY );

	        if( rs.segpts.length % 4 === 0 ){
	          var i2 = rs.segpts.length / 2;
	          var i1 = i2 - 2;

	          rs.midX = ( rs.segpts[i1] + rs.segpts[i2] ) / 2;
	          rs.midY = ( rs.segpts[i1+1] + rs.segpts[i2+1] ) / 2;
	        } else {
	          var i1 = rs.segpts.length / 2 - 1;

	          rs.midX = rs.segpts[i1];
	          rs.midY = rs.segpts[i1+1];
	        }


	      }

	      this.projectLines( edge );
	      this.calculateArrowAngles( edge );
	      this.recalculateEdgeLabelProjection( edge );

	    }
	  }

	  for( var i = 0; i < haystackEdges.length; i++ ){
	    var edge = haystackEdges[i];
	    var _p = edge._private;
	    var style = _p.style;
	    var rscratch = _p.rscratch;
	    var rs = rscratch;

	    if( !rscratch.haystack ){
	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.source = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };

	      var angle = Math.random() * 2 * Math.PI;

	      rscratch.target = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };

	    }

	    var src = _p.source;
	    var tgt = _p.target;
	    var srcPos = src._private.position;
	    var tgtPos = tgt._private.position;
	    var srcW = src.width();
	    var tgtW = tgt.width();
	    var srcH = src.height();
	    var tgtH = tgt.height();
	    var radius = style['haystack-radius'].value;
	    var halfRadius = radius/2; // b/c have to half width/height

	    rs.haystackPts = rs.allpts = [
	      rs.source.x * srcW * halfRadius + srcPos.x,
	      rs.source.y * srcH * halfRadius + srcPos.y,
	      rs.target.x * tgtW * halfRadius + tgtPos.x,
	      rs.target.y * tgtH * halfRadius + tgtPos.y
	    ];

	    rs.midX = (rs.allpts[0] + rs.allpts[2])/2;
	    rs.midY = (rs.allpts[1] + rs.allpts[3])/2;

	    // always override as haystack in case set to different type previously
	    rscratch.edgeType = 'haystack';
	    rscratch.haystack = true;

	    this.projectLines( edge );
	    this.calculateArrowAngles( edge );
	    this.recalculateEdgeLabelProjection( edge );
	  }

	  for( var i = 0 ; i < autorotateEdges.length; i++ ){
	    var edge = autorotateEdges[i];
	    var rs = edge._private.rscratch;

	    rs.labelAngle = Math.atan( rs.midDispY / rs.midDispX );
	  }

	  return hashTable;
	};

	var getAngleFromDisp = function( dispX, dispY ){
	  return Math.atan2( dispY, dispX ) - Math.PI/2;
	};

	BRp.calculateArrowAngles = function( edge ){
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';
	  var isMultibezier = rs.edgeType === 'multibezier';
	  var isSegments = rs.edgeType === 'segments';
	  var isCompound = rs.edgeType === 'compound';
	  var isSelf = rs.edgeType === 'self';

	  // Displacement gives direction for arrowhead orientation
	  var dispX, dispY;
	  var startX, startY, endX, endY;

	  var srcPos = edge.source().position();
	  var tgtPos = edge.target().position();

	  if( isHaystack ){
	    startX = rs.haystackPts[0];
	    startY = rs.haystackPts[1];
	    endX = rs.haystackPts[2];
	    endY = rs.haystackPts[3];
	  } else {
	    startX = rs.arrowStartX;
	    startY = rs.arrowStartY;
	    endX = rs.arrowEndX;
	    endY = rs.arrowEndY;
	  }

	  // source
	  //

	  dispX = srcPos.x - startX;
	  dispY = srcPos.y - startY;

	  rs.srcArrowAngle = getAngleFromDisp( dispX, dispY );

	  // mid target
	  //

	  var midX = rs.midX;
	  var midY = rs.midY;

	  if( isHaystack ){
	    midX = ( startX + endX )/2;
	    midY = ( startY + endY )/2;
	  }

	  dispX = endX - startX;
	  dispY = endY - startY;

	  if( isSelf ){
	    dispX = -1;
	    dispY = 1;
	  } else if( isSegments ){
	    var pts = rs.allpts;

	    if( pts.length / 2 % 2 === 0 ){
	      var i2 = pts.length / 2;
	      var i1 = i2 - 2;

	      dispX = ( pts[i2] - pts[i1] );
	      dispY = ( pts[i2+1] - pts[i1+1] );
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i1 = i2 - 2;
	      var i3 = i2 + 2;

	      dispX = ( pts[i2] - pts[i1] );
	      dispY = ( pts[i2+1] - pts[i1+1] );
	    }
	  } else if( isMultibezier || isCompound ){
	    var pts = rs.allpts;
	    var cpts = rs.ctrlpts;
	    var bp0x, bp0y;
	    var bp1x, bp1y;

	    if( cpts.length / 2 % 2 === 0 ){
	      var p0 = pts.length / 2 - 1; // startpt
	      var ic = p0 + 2;
	      var p1 = ic + 2;

	      bp0x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.0 );
	      bp0y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.0 );

	      bp1x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.0001 );
	      bp1y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.0001 );
	    } else {
	      var ic = pts.length / 2 - 1; // ctrpt
	      var p0 = ic - 2; // startpt
	      var p1 = ic + 2; // endpt

	      bp0x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.4999 );
	      bp0y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.4999 );

	      bp1x = math.qbezierAt( pts[p0], pts[ic], pts[p1], 0.5 );
	      bp1y = math.qbezierAt( pts[p0+1], pts[ic+1], pts[p1+1], 0.5 );
	    }

	    dispX = ( bp1x - bp0x );
	    dispY = ( bp1y - bp0y );
	  }

	  rs.midtgtArrowAngle = getAngleFromDisp( dispX, dispY );

	  rs.midDispX = dispX;
	  rs.midDispY = dispY;

	  // mid source
	  //

	  dispX *= -1;
	  dispY *= -1;

	  if( isSegments ){
	    var pts = rs.allpts;

	    if( pts.length / 2 % 2 === 0 ){
	      // already ok
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i3 = i2 + 2;

	      dispX = -( pts[i3] - pts[i2] );
	      dispY = -( pts[i3+1] - pts[i2+1] );
	    }
	  }

	  rs.midsrcArrowAngle = getAngleFromDisp( dispX, dispY );

	  // target
	  //

	  dispX = tgtPos.x - endX;
	  dispY = tgtPos.y - endY;

	  rs.tgtArrowAngle = getAngleFromDisp( dispX, dispY );
	};


	BRp.findEndpoints = function( edge ){
	  var r = this;
	  var intersect;

	  var source = edge.source()[0];
	  var target = edge.target()[0];

	  var src_p = source._private;
	  var tgt_p = target._private;

	  var srcPos = src_p.position;
	  var tgtPos = tgt_p.position;

	  var tgtArShape = edge._private.style['target-arrow-shape'].value;
	  var srcArShape = edge._private.style['source-arrow-shape'].value;

	  var rs = edge._private.rscratch;

	  var et = rs.edgeType;
	  var bezier = et === 'bezier' || et === 'multibezier' || et === 'self' || et === 'compound';
	  var multi = et !== 'bezier';
	  var lines = et === 'straight' || et === 'segments';
	  var segments = et === 'segments';

	  var p1, p2;

	  if( bezier ){
	    var cpStart = [ rs.ctrlpts[0], rs.ctrlpts[1] ];
	    var cpEnd = multi ? [ rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1] ] : cpStart;

	    p1 = cpEnd;
	    p2 = cpStart;
	  } else if( lines ){
	    var srcArrowFromPt = !segments ? [ tgtPos.x, tgtPos.y ] : rs.segpts.slice( 0, 2 );
	    var tgtArrowFromPt = !segments ? [ srcPos.x, srcPos.y ] : rs.segpts.slice( rs.segpts.length - 2 );

	    p1 = tgtArrowFromPt;
	    p2 = srcArrowFromPt;
	  }

	  intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(
	    tgtPos.x,
	    tgtPos.y,
	    target.outerWidth(),
	    target.outerHeight(),
	    p1[0],
	    p1[1],
	    0
	  );

	  var arrowEnd = math.shortenIntersection(intersect, p1,
	    r.arrowShapes[tgtArShape].spacing(edge));
	  var edgeEnd = math.shortenIntersection(intersect, p1,
	    r.arrowShapes[tgtArShape].gap(edge));

	  rs.endX = edgeEnd[0];
	  rs.endY = edgeEnd[1];

	  rs.arrowEndX = arrowEnd[0];
	  rs.arrowEndY = arrowEnd[1];

	  intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(
	    srcPos.x,
	    srcPos.y,
	    source.outerWidth(),
	    source.outerHeight(),
	    p2[0],
	    p2[1],
	    0
	  );

	  var arrowStart = math.shortenIntersection(
	    intersect, p2,
	    r.arrowShapes[srcArShape].spacing(edge)
	  );
	  var edgeStart = math.shortenIntersection(
	    intersect, p2,
	    r.arrowShapes[srcArShape].gap(edge)
	  );

	  rs.startX = edgeStart[0];
	  rs.startY = edgeStart[1];

	  rs.arrowStartX = arrowStart[0];
	  rs.arrowStartY = arrowStart[1];

	  if( lines ){
	    if( !is.number(rs.startX) || !is.number(rs.startY) || !is.number(rs.endX) || !is.number(rs.endY) ){
	      rs.badLine = true;
	    } else {
	      rs.badLine = false;
	    }
	  }
	};

	BRp.getArrowWidth = BRp.getArrowHeight = function(edgeWidth) {
	  var cache = this.arrowWidthCache = this.arrowWidthCache || {};

	  var cachedVal = cache[edgeWidth];
	  if( cachedVal ){
	    return cachedVal;
	  }

	  cachedVal =  Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29);
	  cache[edgeWidth] = cachedVal;

	  return cachedVal;
	};

	module.exports = BRp;

	},{"../../../collection/zsort":29,"../../../is":77,"../../../math":79}],57:[function(_dereq_,module,exports){
	'use strict';

	var BRp = {};

	BRp.getCachedImage = function(url, onLoad) {
	  var r = this;
	  var imageCache = r.imageCache = r.imageCache || {};

	  if( imageCache[url] && imageCache[url].image ){
	    return imageCache[url].image;
	  }

	  var cache = imageCache[url] = imageCache[url] || {};

	  var image = cache.image = new Image();
	  image.addEventListener('load', onLoad);
	  image.src = url;

	  return image;
	};

	module.exports = BRp;

	},{}],58:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');
	var util = _dereq_('../../../util');

	var BaseRenderer = function(){};
	var BR = BaseRenderer;
	var BRp = BR.prototype;

	BRp.clientFunctions = [ 'redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl' ];

	BRp.init = function( options ){
	  var r = this;

	  r.options = options;

	  r.cy = options.cy;

	  r.container = options.cy.container();

	  r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

	  //--Pointer-related data
	  r.hoverData = {down: null, last: null,
	      downTime: null, triggerMode: null,
	      dragging: false,
	      initialPan: [null, null], capture: false};

	  r.dragData = {possibleDragElements: []};

	  r.touchData = {
	      start: null, capture: false,

	      // These 3 fields related to tap, taphold events
	      startPosition: [null, null, null, null, null, null],
	      singleTouchStartTime: null,
	      singleTouchMoved: true,

	      now: [null, null, null, null, null, null],
	      earlier: [null, null, null, null, null, null]
	  };

	  r.redraws = 0;
	  r.showFps = options.showFps;

	  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
	  r.hideLabelsOnViewport = options.hideLabelsOnViewport;
	  r.textureOnViewport = options.textureOnViewport;
	  r.wheelSensitivity = options.wheelSensitivity;
	  r.motionBlurEnabled = options.motionBlur; // on by default
	  r.forcedPixelRatio = options.pixelRatio;
	  r.motionBlur = true; // for initial kick off
	  r.motionBlurOpacity = options.motionBlurOpacity;
	  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
	  r.motionBlurPxRatio = 1;
	  r.mbPxRBlurry = 1; //0.8;
	  r.minMbLowQualFrames = 4;
	  r.fullQualityMb = false;
	  r.clearedForMotionBlur = [];
	  r.desktopTapThreshold = options.desktopTapThreshold;
	  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
	  r.touchTapThreshold = options.touchTapThreshold;
	  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
	  r.tapholdDuration = 500;

	  r.bindings = [];

	  r.registerNodeShapes();
	  r.registerArrowShapes();
	  r.load();
	};

	BRp.notify = function(params) {
	  var types;
	  var r = this;

	  if( is.array( params.type ) ){
	    types = params.type;

	  } else {
	    types = [ params.type ];
	  }

	  var has = {};
	  for( var i = 0; i < types.length; i++ ){
	    var type = types[i];

	    has[ type ] = true;
	  }

	  if( has.destroy ){
	    r.destroy();
	    return;
	  }

	  if( has.add || has.remove || has.load ){
	    r.updateElementsCache();
	  }

	  if( has.viewport ){
	    r.redrawHint('select', true);
	  }

	  if( has.load || has.resize ){
	    r.invalidateContainerClientCoordsCache();
	    r.matchCanvasSize(r.container);
	  }

	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);

	  this.startRenderLoop();

	  this.redraw();
	};

	BRp.destroy = function(){
	  this.destroyed = true;

	  this.cy.stopAnimationLoop();

	  for( var i = 0; i < this.bindings.length; i++ ){
	    var binding = this.bindings[i];
	    var b = binding;

	    b.target.removeEventListener(b.event, b.handler, b.useCapture);
	  }

	  if( this.removeObserver ){
	    this.removeObserver.disconnect();
	  }

	  if( this.labelCalcDiv ){
	    try{
	      document.body.removeChild(this.labelCalcDiv);
	    } catch(e){
	      // ie10 issue #1014
	    }
	  }
	};

	[
	  _dereq_('./arrow-shapes'),
	  _dereq_('./cached-eles'),
	  _dereq_('./coord-ele-math'),
	  _dereq_('./images'),
	  _dereq_('./load-listeners'),
	  _dereq_('./node-shapes'),
	  _dereq_('./redraw')
	].forEach(function( props ){
	  util.extend( BRp, props );
	});

	module.exports = BR;

	},{"../../../is":77,"../../../util":94,"./arrow-shapes":54,"./cached-eles":55,"./coord-ele-math":56,"./images":57,"./load-listeners":59,"./node-shapes":60,"./redraw":61}],59:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');
	var util = _dereq_('../../../util');
	var Event = _dereq_('../../../event');
	var Collection = _dereq_('../../../collection');

	var BRp = {};

	BRp.registerBinding = function(target, event, handler, useCapture){
	  this.bindings.push({
	    target: target,
	    event: event,
	    handler: handler,
	    useCapture: useCapture
	  });

	  target.addEventListener(event, handler, useCapture);
	};

	BRp.nodeIsDraggable = function(node) {
	  if (node._private.style['opacity'].value !== 0
	    && node._private.style['visibility'].value == 'visible'
	    && node._private.style['display'].value == 'element'
	    && !node.locked()
	    && node.grabbable() ) {

	    return true;
	  }

	  return false;
	};

	BRp.load = function() {
	  var r = this;

	  var triggerEvents = function( target, names, e, props ){
	    if( target == null ){
	      target = r.cy;
	    }

	    for( var i = 0; i < names.length; i++ ){
	      var name = names[i];

	      var event = Event( e, util.extend({ type: name }, props) );
	      target.trigger( event );
	    }
	  };

	  var isMultSelKeyDown = function( e ){
	    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
	  };

	  var getDragListIds = function(opts){
	    var listHasId;

	    if( opts.addToList && r.cy.hasCompoundNodes() ){ // only needed for compound graphs
	      if( !opts.addToList.hasId ){ // build ids lookup if doesn't already exist
	        opts.addToList.hasId = {};

	        for( var i = 0; i < opts.addToList.length; i++ ){
	          var ele = opts.addToList[i];

	          opts.addToList.hasId[ ele.id() ] = true;
	        }
	      }

	      listHasId = opts.addToList.hasId;
	    }

	    return listHasId || {};
	  };

	  // helper function to determine which child nodes and inner edges
	  // of a compound node to be dragged as well as the grabbed and selected nodes
	  var addDescendantsToDrag = function(node, opts){
	    if( !node._private.cy.hasCompoundNodes() ){
	      return;
	    }

	    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

	    var listHasId = getDragListIds( opts );

	    var innerNodes = node.descendants();

	    for( var i = 0; i < innerNodes.size(); i++ ){
	      var iNode = innerNodes[i];
	      var _p = iNode._private;

	      if( opts.inDragLayer ){
	        _p.rscratch.inDragLayer = true;
	      }

	      if( opts.addToList && !listHasId[ iNode.id() ] ){
	        opts.addToList.push( iNode );
	        listHasId[ iNode.id() ] = true;

	        _p.grabbed = true;
	      }

	      var edges = _p.edges;
	      for( var j = 0; opts.inDragLayer && j < edges.length; j++ ){
	        edges[j]._private.rscratch.inDragLayer = true;
	      }
	    }
	  };

	  // adds the given nodes, and its edges to the drag layer
	  var addNodeToDrag = function(node, opts){

	    var _p = node._private;
	    var listHasId = getDragListIds( opts );

	    if( opts.inDragLayer ){
	      _p.rscratch.inDragLayer = true;
	    }

	    if( opts.addToList && !listHasId[ node.id() ] ){
	      opts.addToList.push( node );
	      listHasId[ node.id() ] = true;

	      _p.grabbed = true;
	    }

	    var edges = _p.edges;
	    for( var i = 0; opts.inDragLayer && i < edges.length; i++ ){
	      edges[i]._private.rscratch.inDragLayer = true;
	    }

	    addDescendantsToDrag( node, opts ); // always add to drag

	    // also add nodes and edges related to the topmost ancestor
	    updateAncestorsInDragLayer( node, {
	      inDragLayer: opts.inDragLayer
	    } );
	  };

	  var freeDraggedElements = function( draggedElements ){
	    if( !draggedElements ){ return; }

	    for (var i=0; i < draggedElements.length; i++) {

	      var dEi_p = draggedElements[i]._private;

	      if(dEi_p.group === 'nodes') {
	        dEi_p.rscratch.inDragLayer = false;
	        dEi_p.grabbed = false;

	        var sEdges = dEi_p.edges;
	        for( var j = 0; j < sEdges.length; j++ ){ sEdges[j]._private.rscratch.inDragLayer = false; }

	        // for compound nodes, also remove related nodes and edges from the drag layer
	        updateAncestorsInDragLayer(draggedElements[i], { inDragLayer: false });

	      } else if( dEi_p.group === 'edges' ){
	        dEi_p.rscratch.inDragLayer = false;
	      }

	    }
	  };

	  // helper function to determine which ancestor nodes and edges should go
	  // to the drag layer (or should be removed from drag layer).
	  var updateAncestorsInDragLayer = function(node, opts) {

	    if( opts.inDragLayer == null && opts.addToList == null ){ return; } // nothing to do

	    // find top-level parent
	    var parent = node;

	    if( !node._private.cy.hasCompoundNodes() ){
	      return;
	    }

	    while( parent.parent().nonempty() ){
	      parent = parent.parent()[0];
	    }

	    // no parent node: no nodes to add to the drag layer
	    if( parent == node ){
	      return;
	    }

	    var nodes = parent.descendants()
	      .merge( parent )
	      .unmerge( node )
	      .unmerge( node.descendants() )
	    ;

	    var edges = nodes.connectedEdges();

	    var listHasId = getDragListIds( opts );

	    for( var i = 0; i < nodes.size(); i++ ){
	      if( opts.inDragLayer !== undefined ){
	        nodes[i]._private.rscratch.inDragLayer = opts.inDragLayer;
	      }

	      if( opts.addToList && !listHasId[ nodes[i].id() ] ){
	        opts.addToList.push( nodes[i] );
	        listHasId[ nodes[i].id() ] = true;

	        nodes[i]._private.grabbed = true;
	      }
	    }

	    for( var j = 0; opts.inDragLayer !== undefined && j < edges.length; j++ ) {
	      edges[j]._private.rscratch.inDragLayer = opts.inDragLayer;
	    }
	  };

	  if( typeof MutationObserver !== 'undefined' ){
	    r.removeObserver = new MutationObserver(function( mutns ){
	      for( var i = 0; i < mutns.length; i++ ){
	        var mutn = mutns[i];
	        var rNodes = mutn.removedNodes;

	        if( rNodes ){ for( var j = 0; j < rNodes.length; j++ ){
	          var rNode = rNodes[j];

	          if( rNode === r.container ){
	            r.destroy();
	            break;
	          }
	        } }
	      }
	    });

	    if( r.container.parentNode ){
	      r.removeObserver.observe( r.container.parentNode, { childList: true } );
	    }
	  } else {
	    r.registerBinding(r.container, 'DOMNodeRemoved', function(e){
	      r.destroy();
	    });
	  }



	  // auto resize
	  r.registerBinding(window, 'resize', util.debounce( function(e) {
	    r.invalidateContainerClientCoordsCache();

	    r.matchCanvasSize(r.container);
	    r.redrawHint('eles', true);
	    r.redraw();
	  }, 100 ) );

	  var invalCtnrBBOnScroll = function(domEle){
	    r.registerBinding(domEle, 'scroll', function(e){
	      r.invalidateContainerClientCoordsCache();
	    } );
	  };

	  var bbCtnr = r.cy.container();

	  for( ;; ){

	    invalCtnrBBOnScroll( bbCtnr );

	    if( bbCtnr.parentNode ){
	      bbCtnr = bbCtnr.parentNode;
	    } else {
	      break;
	    }

	  }

	  // stop right click menu from appearing on cy
	  r.registerBinding(r.container, 'contextmenu', function(e){
	    e.preventDefault();
	  });

	  var inBoxSelection = function(){
	    return r.selection[4] !== 0;
	  };

	  // Primary key
	  r.registerBinding(r.container, 'mousedown', function(e) {
	    e.preventDefault();
	    r.hoverData.capture = true;
	    r.hoverData.which = e.which;

	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var select = r.selection;
	    var near = r.findNearestElement(pos[0], pos[1], true, false);
	    var draggedElements = r.dragData.possibleDragElements;

	    r.hoverData.mdownPos = pos;

	    var checkForTaphold = function(){
	      r.hoverData.tapholdCancelled = false;

	      clearTimeout( r.hoverData.tapholdTimeout );

	      r.hoverData.tapholdTimeout = setTimeout(function(){

	        if( r.hoverData.tapholdCancelled ){
	          return;
	        } else {
	          var ele = r.hoverData.down;

	          if( ele ){
	            ele.trigger( Event(e, {
	              type: 'taphold',
	              cyPosition: { x: pos[0], y: pos[1] }
	            }) );
	          } else {
	            cy.trigger( Event(e, {
	              type: 'taphold',
	              cyPosition: { x: pos[0], y: pos[1] }
	            }) );
	          }
	        }

	      }, r.tapholdDuration);
	    };

	    // Right click button
	    if( e.which == 3 ){

	      r.hoverData.cxtStarted = true;

	      var cxtEvt = Event(e, {
	        type: 'cxttapstart',
	        cyPosition: { x: pos[0], y: pos[1] }
	      });

	      if( near ){
	        near.activate();
	        near.trigger( cxtEvt );

	        r.hoverData.down = near;
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      r.hoverData.downTime = (new Date()).getTime();
	      r.hoverData.cxtDragged = false;

	    // Primary button
	    } else if (e.which == 1) {

	      if( near ){
	        near.activate();
	      }

	      // Element dragging
	      {
	        // If something is under the cursor and it is draggable, prepare to grab it
	        if (near != null) {

	          if( r.nodeIsDraggable(near) ){

	            var grabEvent = Event(e, {
	              type: 'grab',
	              cyPosition: { x: pos[0], y: pos[1] }
	            });

	            if ( near.isNode() && !near.selected() ){

	              draggedElements = r.dragData.possibleDragElements = [];
	              addNodeToDrag( near, { addToList: draggedElements } );

	              near.trigger(grabEvent);

	            } else if ( near.isNode() && near.selected() ){
	              draggedElements = r.dragData.possibleDragElements = [  ];

	              var selectedNodes = cy.$(function(){ return this.isNode() && this.selected(); });

	              for( var i = 0; i < selectedNodes.length; i++ ){

	                // Only add this selected node to drag if it is draggable, eg. has nonzero opacity
	                if( r.nodeIsDraggable( selectedNodes[i] ) ){
	                  addNodeToDrag( selectedNodes[i], { addToList: draggedElements } );
	                }
	              }

	              near.trigger( grabEvent );
	            }

	            r.redrawHint('eles', true);
	            r.redrawHint('drag', true);

	          }

	        }

	        r.hoverData.down = near;
	        r.hoverData.downTime = (new Date()).getTime();
	      }

	      triggerEvents( near, ['mousedown', 'tapstart', 'vmousedown'], e, {
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if ( near == null ) {
	        select[4] = 1;

	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);

	        r.redraw();
	      } else if( near.isEdge() ){
	        select[4] = 1; // for future pan
	      }

	      checkForTaphold();

	    }

	    // Initialize selection box coordinates
	    select[0] = select[2] = pos[0];
	    select[1] = select[3] = pos[1];

	  }, false);

	  r.registerBinding(window, 'mousemove', function(e) {
	    var preventDefault = false;
	    var capture = r.hoverData.capture;

	    // save cycles if mouse events aren't to be captured
	    if ( !capture ){
	      var containerPageCoords = r.findContainerClientCoords();

	      if (e.clientX > containerPageCoords[0] && e.clientX < containerPageCoords[0] + r.canvasWidth
	        && e.clientY > containerPageCoords[1] && e.clientY < containerPageCoords[1] + r.canvasHeight
	      ) {
	        // inside container bounds so OK
	      } else {
	        return;
	      }

	      var cyContainer = r.container;
	      var target = e.target;
	      var tParent = target.parentNode;
	      var containerIsTarget = false;

	      while( tParent ){
	        if( tParent === cyContainer ){
	          containerIsTarget = true;
	          break;
	        }

	        tParent = tParent.parentNode;
	      }

	      if( !containerIsTarget ){ return; } // if target is outisde cy container, then this event is not for us
	    }

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var select = r.selection;

	    var near = null;
	    if( !r.hoverData.draggingEles ){
	      near = r.findNearestElement(pos[0], pos[1], true, false);
	    }
	    var last = r.hoverData.last;
	    var down = r.hoverData.down;

	    var disp = [pos[0] - select[2], pos[1] - select[3]];

	    var draggedElements = r.dragData.possibleDragElements;

	    var dx = select[2] - select[0];
	    var dx2 = dx * dx;
	    var dy = select[3] - select[1];
	    var dy2 = dy * dy;
	    var dist2 = dx2 + dy2;
	    var rdist2 = dist2 * zoom * zoom;

	    var multSelKeyDown = isMultSelKeyDown( e );

	    var isOverThresholdDrag = rdist2 >= r.desktopTapThreshold2;

	    if (isOverThresholdDrag) {
	      r.hoverData.tapholdCancelled = true;
	    }

	    var updateDragDelta = function(){
	      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

	      if( dragDelta.length === 0 ){
	        dragDelta.push( disp[0] );
	        dragDelta.push( disp[1] );
	      } else {
	        dragDelta[0] += disp[0];
	        dragDelta[1] += disp[1];
	      }
	    };


	    preventDefault = true;

	    triggerEvents( near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
	      cyPosition: { x: pos[0], y: pos[1] }
	    } );

	    // trigger context drag if rmouse down
	    if( r.hoverData.which === 3 ){
	      // but only if over threshold
	      if( isOverThresholdDrag ){
	        var cxtEvt = Event( e, {
	          type: 'cxtdrag',
	          cyPosition: { x: pos[0], y: pos[1] }
	        } );

	        if( down ){
	          down.trigger( cxtEvt );
	        } else{
	          cy.trigger( cxtEvt );
	        }

	        r.hoverData.cxtDragged = true;

	        if( !r.hoverData.cxtOver || near !== r.hoverData.cxtOver ){

	          if( r.hoverData.cxtOver ){
	            r.hoverData.cxtOver.trigger( Event( e, {
	              type: 'cxtdragout',
	              cyPosition: { x: pos[0], y: pos[1] }
	            } ) );
	          }

	          r.hoverData.cxtOver = near;

	          if( near ){
	            near.trigger( Event( e, {
	              type: 'cxtdragover',
	              cyPosition: { x: pos[0], y: pos[1] }
	            } ) );
	          }

	        }
	      }

	    // Check if we are drag panning the entire graph
	    } else if (r.hoverData.dragging) {
	      preventDefault = true;

	      if( cy.panningEnabled() && cy.userPanningEnabled() ){
	        var deltaP;

	        if( r.hoverData.justStartedPan ){
	          var mdPos = r.hoverData.mdownPos;

	          deltaP = {
	            x: ( pos[0] - mdPos[0] ) * zoom,
	            y: ( pos[1] - mdPos[1] ) * zoom
	          };

	          r.hoverData.justStartedPan = false;

	        } else {
	          deltaP = {
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          };

	        }

	        cy.panBy( deltaP );

	        r.hoverData.dragged = true;
	      }

	      // Needs reproject due to pan changing viewport
	      pos = r.projectIntoViewport(e.clientX, e.clientY);

	    // Checks primary button down & out of time & mouse not moved much
	    } else if(
	        select[4] == 1 && (down == null || down.isEdge())
	    ){

	      if( !r.hoverData.dragging && cy.boxSelectionEnabled() && ( multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled() ) ){
	        r.data.bgActivePosistion = undefined;
	        r.hoverData.selecting = true;

	        r.redrawHint('select', true);
	        r.redraw();

	      } else if( !r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled() ){
	        r.hoverData.dragging = true;
	        r.hoverData.justStartedPan = true;
	        select[4] = 0;

	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);
	        r.redraw();
	      }

	      if( down && down.isEdge() && down.active() ){ down.unactivate(); }

	    } else {
	      if( down && down.isEdge() && down.active() ){ down.unactivate(); }

	      if (near != last) {

	        if (last) {
	          triggerEvents( last, ['mouseout', 'tapdragout'], e, {
	            cyPosition: { x: pos[0], y: pos[1] }
	          } );
	        }

	        if (near) {
	          triggerEvents( near, ['mouseover', 'tapdragover'], e, {
	            cyPosition: { x: pos[0], y: pos[1] }
	          } );
	        }

	        r.hoverData.last = near;
	      }

	      if( down && down.isNode() && r.nodeIsDraggable(down) ){

	        if( isOverThresholdDrag ){ // then drag

	          var justStartedDrag = !r.dragData.didDrag;

	          if( justStartedDrag ) {
	            r.redrawHint('eles', true);
	          }

	          r.dragData.didDrag = true; // indicate that we actually did drag the node

	          var toTrigger = [];

	          for( var i = 0; i < draggedElements.length; i++ ){
	            var dEle = draggedElements[i];

	            // now, add the elements to the drag layer if not done already
	            if( !r.hoverData.draggingEles ){
	              addNodeToDrag( dEle, { inDragLayer: true } );
	            }

	            // Locked nodes not draggable, as well as non-visible nodes
	            if( dEle.isNode() && r.nodeIsDraggable(dEle) && dEle.grabbed() ){
	              var dPos = dEle._private.position;

	              toTrigger.push( dEle );

	              if( is.number(disp[0]) && is.number(disp[1]) ){
	                var updatePos = !dEle.isParent();

	                if( updatePos ){
	                  dPos.x += disp[0];
	                  dPos.y += disp[1];
	                }

	                if( justStartedDrag ){
	                  var dragDelta = r.hoverData.dragDelta;

	                  if( updatePos && is.number(dragDelta[0]) && is.number(dragDelta[1]) ){
	                    dPos.x += dragDelta[0];
	                    dPos.y += dragDelta[1];
	                  }
	                }
	              }

	            }
	          }

	          r.hoverData.draggingEles = true;

	          var tcol = (Collection(cy, toTrigger));

	          tcol.updateCompoundBounds();
	          tcol.trigger('position drag');

	          r.redrawHint('drag', true);
	          r.redraw();

	        } else { // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
	          updateDragDelta();
	        }
	      }

	      // prevent the dragging from triggering text selection on the page
	      preventDefault = true;
	    }

	    select[2] = pos[0]; select[3] = pos[1];

	    if( preventDefault ){
	      if(e.stopPropagation) e.stopPropagation();
	        if(e.preventDefault) e.preventDefault();
	        return false;
	      }
	  }, false);

	  r.registerBinding(window, 'mouseup', function(e) {
	    var capture = r.hoverData.capture;
	    if (!capture) { return; }
	    r.hoverData.capture = false;

	    var cy = r.cy; var pos = r.projectIntoViewport(e.clientX, e.clientY); var select = r.selection;
	    var near = r.findNearestElement(pos[0], pos[1], true, false);
	    var draggedElements = r.dragData.possibleDragElements; var down = r.hoverData.down;
	    var multSelKeyDown = isMultSelKeyDown( e );

	    if( r.data.bgActivePosistion ){
	      r.redrawHint('select', true);
	      r.redraw();
	    }

	    r.hoverData.tapholdCancelled = true;

	    r.data.bgActivePosistion = undefined; // not active bg now

	    if( down ){
	      down.unactivate();
	    }

	    if( r.hoverData.which === 3 ){
	      var cxtEvt = Event(e, {
	        type: 'cxttapend',
	        cyPosition: { x: pos[0], y: pos[1] }
	      });

	      if( down ){
	        down.trigger( cxtEvt );
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      if( !r.hoverData.cxtDragged ){
	        var cxtTap = Event(e, {
	          type: 'cxttap',
	          cyPosition: { x: pos[0], y: pos[1] }
	        });

	        if( down ){
	          down.trigger( cxtTap );
	        } else {
	          cy.trigger( cxtTap );
	        }
	      }

	      r.hoverData.cxtDragged = false;
	      r.hoverData.which = null;

	    } else if( r.hoverData.which === 1 ) {

	      // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something
	      if ( (down == null) // not mousedown on node
	        && !r.dragData.didDrag // didn't move the node around
	        && !r.hoverData.selecting // not box selection
	        && !r.hoverData.dragged // didn't pan
	        && !isMultSelKeyDown( e )
	      ) {

	        cy.$(function(){
	          return this.selected();
	        }).unselect();

	        if (draggedElements.length > 0) {
	          r.redrawHint('eles', true);
	        }

	        r.dragData.possibleDragElements = draggedElements = [];
	      }

	      triggerEvents( near, ['mouseup', 'tapend', 'vmouseup'], e, {
	        cyPosition: { x: pos[0], y: pos[1] }
	      } );

	      if(
	        !r.dragData.didDrag // didn't move a node around
	        && !r.hoverData.dragged // didn't pan
	        && !r.hoverData.selecting // not box selection
	      ){
	        triggerEvents( down, ['click', 'tap', 'vclick'], e, {
	          cyPosition: { x: pos[0], y: pos[1] }
	        } );
	      }

	      // Single selection
	      if( near == down && !r.dragData.didDrag && !r.hoverData.selecting ){
	        if( near != null && near._private.selectable ){

	          if( r.hoverData.dragging ){
	            // if panning, don't change selection state
	          } else if( cy.selectionType() === 'additive' || multSelKeyDown ){
	            if( near.selected() ){
	              near.unselect();
	            } else {
	              near.select();
	            }
	          } else {
	            if( !multSelKeyDown ){
	              cy.$(':selected').unmerge( near ).unselect();
	              near.select();
	            }
	          }

	          r.redrawHint('eles', true);
	        }
	      }

	      if ( r.hoverData.selecting ) {
	        var newlySelected = [];
	        var box = r.getAllInBox( select[0], select[1], select[2], select[3] );

	        r.redrawHint('select', true);

	        if( box.length > 0 ) {
	          r.redrawHint('eles', true);
	        }

	        for( var i = 0; i < box.length; i++ ){
	          if( box[i]._private.selectable ){
	            newlySelected.push( box[i] );
	          }
	        }

	        var newlySelCol = Collection( cy, newlySelected );

	        if( cy.selectionType() === 'additive' ){
	          newlySelCol.select();
	        } else {
	          if( !multSelKeyDown ){
	            cy.$(':selected').unmerge( newlySelCol ).unselect();
	          }

	          newlySelCol.select();
	        }

	        // always need redraw in case eles unselectable
	        r.redraw();

	      }

	      // Cancel drag pan
	      if( r.hoverData.dragging ){
	        r.hoverData.dragging = false;

	        r.redrawHint('select', true);
	        r.redrawHint('eles', true);

	        r.redraw();
	      }

	      if( !select[4] ) {
	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        var downWasGrabbed = down && down.grabbed();

	        freeDraggedElements( draggedElements );

	        if( downWasGrabbed ){ down.trigger('free'); }
	      }

	    } // else not right mouse

	    select[4] = 0; r.hoverData.down = null;

	    r.hoverData.cxtStarted = false;
	    r.hoverData.draggingEles = false;
	    r.hoverData.selecting = false;
	    r.dragData.didDrag = false;
	    r.hoverData.dragged = false;
	    r.hoverData.dragDelta = [];

	  }, false);

	  var wheelHandler = function(e) {


	    if( r.scrollingPage ){ return; } // while scrolling, ignore wheel-to-zoom

	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var rpos = [pos[0] * cy.zoom() + cy.pan().x,
	                  pos[1] * cy.zoom() + cy.pan().y];

	    if( r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection() ){ // if pan dragging or cxt dragging, wheel movements make no zoom
	      e.preventDefault();
	      return;
	    }

	    if( cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled() ){
	      e.preventDefault();

	      r.data.wheelZooming = true;
	      clearTimeout( r.data.wheelTimeout );
	      r.data.wheelTimeout = setTimeout(function(){
	        r.data.wheelZooming = false;

	        r.redrawHint('eles', true);
	        r.redraw();
	      }, 150);

	      var diff = e.deltaY / -250 || e.wheelDeltaY / 1000 || e.wheelDelta / 1000;
	      diff = diff * r.wheelSensitivity;

	      var needsWheelFix = e.deltaMode === 1;
	      if( needsWheelFix ){ // fixes slow wheel events on ff/linux and ff/windows
	        diff *= 33;
	      }

	      cy.zoom({
	        level: cy.zoom() * Math.pow(10, diff),
	        renderedPosition: { x: rpos[0], y: rpos[1] }
	      });
	    }

	  };

	  // Functions to help with whether mouse wheel should trigger zooming
	  // --
	  r.registerBinding(r.container, 'wheel', wheelHandler, true);

	  // disable nonstandard wheel events
	  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
	  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
	  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

	  r.registerBinding(window, 'scroll', function(e){
	    r.scrollingPage = true;

	    clearTimeout( r.scrollingPageTimeout );
	    r.scrollingPageTimeout = setTimeout(function(){
	      r.scrollingPage = false;
	    }, 250);
	  }, true);

	  // Functions to help with handling mouseout/mouseover on the Cytoscape container
	        // Handle mouseout on Cytoscape container
	  r.registerBinding(r.container, 'mouseout', function(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);

	    r.cy.trigger(Event(e, {
	      type: 'mouseout',
	      cyPosition: { x: pos[0], y: pos[1] }
	    }));
	  }, false);

	  r.registerBinding(r.container, 'mouseover', function(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);

	    r.cy.trigger(Event(e, {
	      type: 'mouseover',
	      cyPosition: { x: pos[0], y: pos[1] }
	    }));
	  }, false);

	  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom
	  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom
	  var center1, modelCenter1; // center point on start pinch to zoom
	  var offsetLeft, offsetTop;
	  var containerWidth, containerHeight;
	  var twoFingersStartInside;

	  var distance = function(x1, y1, x2, y2){
	    return Math.sqrt( (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) );
	  };

	  var distanceSq = function(x1, y1, x2, y2){
	    return (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);
	  };

	  var touchstartHandler;
	  r.registerBinding(r.container, 'touchstart', touchstartHandler = function(e) {
	    r.touchData.capture = true;
	    r.data.bgActivePosistion = undefined;

	    var cy = r.cy;
	    var nodes = r.getCachedNodes();
	    var edges = r.getCachedEdges();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	    if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	    if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }


	    // record starting points for pinch-to-zoom
	    if( e.touches[1] ){

	      // anything in the set of dragged eles should be released
	      var release = function( eles ){
	        for( var i = 0; i < eles.length; i++ ){
	          eles[i]._private.grabbed = false;
	          eles[i]._private.rscratch.inDragLayer = false;
	          if( eles[i].active() ){ eles[i].unactivate(); }
	        }
	      };
	      release(nodes);
	      release(edges);

	      var offsets = r.findContainerClientCoords();
	      offsetLeft = offsets[0];
	      offsetTop = offsets[1];
	      containerWidth = offsets[2];
	      containerHeight = offsets[3];

	      f1x1 = e.touches[0].clientX - offsetLeft;
	      f1y1 = e.touches[0].clientY - offsetTop;

	      f2x1 = e.touches[1].clientX - offsetLeft;
	      f2y1 = e.touches[1].clientY - offsetTop;

	      twoFingersStartInside =
	           0 <= f1x1 && f1x1 <= containerWidth
	        && 0 <= f2x1 && f2x1 <= containerWidth
	        && 0 <= f1y1 && f1y1 <= containerHeight
	        && 0 <= f2y1 && f2y1 <= containerHeight
	      ;

	      var pan = cy.pan();
	      var zoom = cy.zoom();

	      distance1 = distance( f1x1, f1y1, f2x1, f2y1 );
	      distance1Sq = distanceSq( f1x1, f1y1, f2x1, f2y1 );
	      center1 = [ (f1x1 + f2x1)/2, (f1y1 + f2y1)/2 ];
	      modelCenter1 = [
	        (center1[0] - pan.x) / zoom,
	        (center1[1] - pan.y) / zoom
	      ];

	      // consider context tap
	      var cxtDistThreshold = 200;
	      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
	      if( distance1Sq < cxtDistThresholdSq && !e.touches[2] ){

	        var near1 = r.findNearestElement(now[0], now[1], true, true);
	        var near2 = r.findNearestElement(now[2], now[3], true, true);

	        if( near1 && near1.isNode() ){
	          near1.activate().trigger( Event(e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	          r.touchData.start = near1;

	        } else if( near2 && near2.isNode() ){
	          near2.activate().trigger( Event(e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	          r.touchData.start = near2;

	        } else {
	          cy.trigger( Event(e, {
	            type: 'cxttapstart',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	          r.touchData.start = null;
	        }

	        if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	        r.touchData.cxt = true;
	        r.touchData.cxtDragged = false;
	        r.data.bgActivePosistion = undefined;

	        r.redraw();
	        return;

	      }

	    }

	    if (e.touches[2]) {

	    } else if (e.touches[1]) {

	    } else if (e.touches[0]) {
	      var near = r.findNearestElement(now[0], now[1], true, true);

	      if (near != null) {
	        near.activate();

	        r.touchData.start = near;

	        if( near.isNode() && r.nodeIsDraggable(near) ){

	          var draggedEles = r.dragData.touchDragEles = [];

	          r.redrawHint('eles', true);
	          r.redrawHint('drag', true);

	          if( near.selected() ){
	            // reset drag elements, since near will be added again

	            var selectedNodes = cy.$(function(){
	              return this.isNode() && this.selected();
	            });

	            for( var k = 0; k < selectedNodes.length; k++ ){
	              var selectedNode = selectedNodes[k];

	              if( r.nodeIsDraggable(selectedNode) ){
	                addNodeToDrag( selectedNode, { addToList: draggedEles } );
	              }
	            }
	          } else {
	            addNodeToDrag( near, { addToList: draggedEles } );
	          }

	          near.trigger( Event(e, {
	            type: 'grab',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	        }
	      }

	      triggerEvents( near, ['touchstart', 'tapstart', 'vmousedown'], e, {
	        cyPosition: { x: now[0], y: now[1] }
	      } );

	      if (near == null) {
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };

	        r.redrawHint('select', true);
	        r.redraw();
	      }


	      // Tap, taphold
	      // -----

	      for (var i=0; i<now.length; i++) {
	        earlier[i] = now[i];
	        r.touchData.startPosition[i] = now[i];
	      }

	      r.touchData.singleTouchMoved = false;
	      r.touchData.singleTouchStartTime = +new Date();

	      clearTimeout( r.touchData.tapholdTimeout );
	      r.touchData.tapholdTimeout = setTimeout(function() {
	        if(
	            r.touchData.singleTouchMoved === false
	            && !r.pinching // if pinching, then taphold unselect shouldn't take effect
	            && !r.touchData.selecting // box selection shouldn't allow taphold through
	        ){
	          triggerEvents( r.touchData.start, ['taphold'], e, {
	            cyPosition: { x: now[0], y: now[1] }
	          } );

	          if (!r.touchData.start) {
	            cy.$(':selected').unselect();
	          }

	        }
	      }, r.tapholdDuration);
	    }

	  }, false);

	  var touchmoveHandler;
	  r.registerBinding(window, 'touchmove', touchmoveHandler = function(e) {

	    var select = r.selection;
	    var capture = r.touchData.capture;
	    var cy = r.cy;
	    var now = r.touchData.now; var earlier = r.touchData.earlier;
	    var zoom = cy.zoom();

	    if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	    if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	    if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }

	    var disp = []; for (var j=0;j<now.length;j++) { disp[j] = now[j] - earlier[j]; }
	    var startPos = r.touchData.startPosition;
	    var dx = now[0] - startPos[0];
	    var dx2 = dx * dx;
	    var dy = now[1] - startPos[1];
	    var dy2 = dy * dy;
	    var dist2 = dx2 + dy2;
	    var rdist2 = dist2 * zoom * zoom;

	    var isOverThresholdDrag = rdist2 >= r.touchTapThreshold2;

	    // context swipe cancelling
	    if( capture && r.touchData.cxt ){
	      e.preventDefault();

	      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;
	      // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      var factorSq = distance2Sq / distance1Sq;

	      var distThreshold = 150;
	      var distThresholdSq = distThreshold * distThreshold;
	      var factorThreshold = 1.5;
	      var factorThresholdSq = factorThreshold * factorThreshold;

	      // cancel ctx gestures if the distance b/t the fingers increases
	      if( factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq ){
	        r.touchData.cxt = false;
	        if( r.touchData.start ){ r.touchData.start.unactivate(); r.touchData.start = null; }
	        r.data.bgActivePosistion = undefined;
	        r.redrawHint('select', true);

	        var cxtEvt = Event(e, {
	          type: 'cxttapend',
	          cyPosition: { x: now[0], y: now[1] }
	        });
	        if( r.touchData.start ){
	          r.touchData.start.trigger( cxtEvt );
	        } else {
	          cy.trigger( cxtEvt );
	        }
	      }

	    }

	    // context swipe
	    if( capture && r.touchData.cxt ){
	      var cxtEvt = Event(e, {
	        type: 'cxtdrag',
	        cyPosition: { x: now[0], y: now[1] }
	      });
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      if( r.touchData.start ){
	        r.touchData.start.trigger( cxtEvt );
	      } else {
	        cy.trigger( cxtEvt );
	      }

	      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	      r.touchData.cxtDragged = true;

	      var near = r.findNearestElement(now[0], now[1], true, true);

	      if( !r.touchData.cxtOver || near !== r.touchData.cxtOver ){

	        if( r.touchData.cxtOver ){
	          r.touchData.cxtOver.trigger( Event(e, {
	            type: 'cxtdragout',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );
	        }

	        r.touchData.cxtOver = near;

	        if( near ){
	          near.trigger( Event(e, {
	            type: 'cxtdragover',
	            cyPosition: { x: now[0], y: now[1] }
	          }) );

	        }

	      }

	    // box selection
	    } else if( capture && e.touches[2] && cy.boxSelectionEnabled() ){
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;

	      this.lastThreeTouch = +new Date();
	      r.touchData.selecting = true;

	      r.redrawHint('select', true);

	      if( !select || select.length === 0 || select[0] === undefined ){
	        select[0] = (now[0] + now[2] + now[4])/3;
	        select[1] = (now[1] + now[3] + now[5])/3;
	        select[2] = (now[0] + now[2] + now[4])/3 + 1;
	        select[3] = (now[1] + now[3] + now[5])/3 + 1;
	      } else {
	        select[2] = (now[0] + now[2] + now[4])/3;
	        select[3] = (now[1] + now[3] + now[5])/3;
	      }

	      select[4] = 1;
	      r.touchData.selecting = true;

	      r.redraw();

	    // pinch to zoom
	    } else if ( capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled() ) { // two fingers => pinch to zoom
	      e.preventDefault();

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      var draggedEles = r.dragData.touchDragEles;
	      if( draggedEles ){
	        r.redrawHint('drag', true);

	        for( var i = 0; i < draggedEles.length; i++ ){
	          draggedEles[i]._private.grabbed = false;
	          draggedEles[i]._private.rscratch.inDragLayer = false;
	        }
	      }

	      // (x2, y2) for fingers 1 and 2
	      var f1x2 = e.touches[0].clientX - offsetLeft, f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft, f2y2 = e.touches[1].clientY - offsetTop;


	      var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
	      // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );
	      var factor = distance2 / distance1;

	      if( factor != 1 && twoFingersStartInside){
	        // delta finger1
	        var df1x = f1x2 - f1x1;
	        var df1y = f1y2 - f1y1;

	        // delta finger 2
	        var df2x = f2x2 - f2x1;
	        var df2y = f2y2 - f2y1;

	        // translation is the normalised vector of the two fingers movement
	        // i.e. so pinching cancels out and moving together pans
	        var tx = (df1x + df2x)/2;
	        var ty = (df1y + df2y)/2;

	        // adjust factor by the speed multiplier
	        // var speed = 1.5;
	        // if( factor > 1 ){
	        //   factor = (factor - 1) * speed + 1;
	        // } else {
	        //   factor = 1 - (1 - factor) * speed;
	        // }

	        // now calculate the zoom
	        var zoom1 = cy.zoom();
	        var zoom2 = zoom1 * factor;
	        var pan1 = cy.pan();

	        // the model center point converted to the current rendered pos
	        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
	        var ctry = modelCenter1[1] * zoom1 + pan1.y;

	        var pan2 = {
	          x: -zoom2/zoom1 * (ctrx - pan1.x - tx) + ctrx,
	          y: -zoom2/zoom1 * (ctry - pan1.y - ty) + ctry
	        };

	        // remove dragged eles
	        if( r.touchData.start ){
	          var draggedEles = r.dragData.touchDragEles;

	          if( draggedEles ){ for( var i = 0; i < draggedEles.length; i++ ){
	            var dEi_p = draggedEles[i]._private;

	            dEi_p.grabbed = false;
	            dEi_p.rscratch.inDragLayer = false;
	          } }

	          var start_p = r.touchData.start._private;
	          start_p.active = false;
	          start_p.grabbed = false;
	          start_p.rscratch.inDragLayer = false;

	          r.redrawHint('drag', true);

	          r.touchData.start
	            .trigger('free')
	            .trigger('unactivate')
	          ;
	        }

	        cy.viewport({
	          zoom: zoom2,
	          pan: pan2,
	          cancelOnFailedZoom: true
	        });

	        distance1 = distance2;
	        f1x1 = f1x2;
	        f1y1 = f1y2;
	        f2x1 = f2x2;
	        f2y1 = f2y2;

	        r.pinching = true;
	      }

	      // Re-project
	      if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	      if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	      if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }

	    } else if (e.touches[0]) {
	      var start = r.touchData.start;
	      var last = r.touchData.last;
	      var near = near || r.findNearestElement(now[0], now[1], true, true);

	      if( start != null ){
	        e.preventDefault();
	      }

	      // dragging nodes
	      if( start != null && start._private.group == 'nodes' && r.nodeIsDraggable(start) ){

	        if( isOverThresholdDrag ){ // then dragging can happen
	          var draggedEles = r.dragData.touchDragEles;
	          var justStartedDrag = !r.dragData.didDrag;

	          for( var k = 0; k < draggedEles.length; k++ ){
	            var draggedEle = draggedEles[k];

	            if( justStartedDrag ){
	              addNodeToDrag( draggedEle, { inDragLayer: true } );
	            }

	            if( r.nodeIsDraggable(draggedEle) && draggedEle.isNode() && draggedEle.grabbed() ){
	              r.dragData.didDrag = true;
	              var dPos = draggedEle._private.position;
	              var updatePos = !draggedEle.isParent();

	              if( updatePos && is.number(disp[0]) && is.number(disp[1]) ){
	                dPos.x += disp[0];
	                dPos.y += disp[1];
	              }

	              if( justStartedDrag ){
	                r.redrawHint('eles', true);

	                var dragDelta = r.touchData.dragDelta;

	                if( updatePos && is.number(dragDelta[0]) && is.number(dragDelta[1]) ){
	                  dPos.x += dragDelta[0];
	                  dPos.y += dragDelta[1];
	                }

	              }
	            }
	          }

	          var tcol = Collection(cy, draggedEles);

	          tcol.updateCompoundBounds();
	          tcol.trigger('position drag');

	          r.hoverData.draggingEles = true;

	          r.redrawHint('drag', true);

	          if(
	               r.touchData.startPosition[0] == earlier[0]
	            && r.touchData.startPosition[1] == earlier[1]
	          ){

	            r.redrawHint('eles', true);
	          }

	          r.redraw();
	        } else { // otherise keep track of drag delta for later
	          var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

	          if( dragDelta.length === 0 ){
	            dragDelta.push( disp[0] );
	            dragDelta.push( disp[1] );
	          } else {
	            dragDelta[0] += disp[0];
	            dragDelta[1] += disp[1];
	          }
	        }
	      }

	      // touchmove
	      {
	        triggerEvents( (start || near), ['touchmove', 'tapdrag', 'vmousemove'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	        if (near != last) {
	          if (last) { last.trigger(Event(e, { type: 'tapdragout', cyPosition: { x: now[0], y: now[1] } })); }
	          if (near) { near.trigger(Event(e, { type: 'tapdragover', cyPosition: { x: now[0], y: now[1] } })); }
	        }

	        r.touchData.last = near;
	      }

	      // check to cancel taphold
	      for (var i=0;i<now.length;i++) {
	        if( now[i]
	          && r.touchData.startPosition[i]
	          && isOverThresholdDrag ){

	          r.touchData.singleTouchMoved = true;
	        }
	      }

	      // panning
	      if(
	          capture
	          && ( start == null || start.isEdge() )
	          && cy.panningEnabled() && cy.userPanningEnabled()
	      ){

	        e.preventDefault();

	        if( r.swipePanning ){
	          cy.panBy({
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          });

	        } else if( isOverThresholdDrag ){
	          r.swipePanning = true;

	          cy.panBy({
	            x: dx * zoom,
	            y: dy * zoom
	          });

	          if( start ){
	            start.unactivate();

	            if( !r.data.bgActivePosistion ){
	              r.data.bgActivePosistion = {
	                x: now[0],
	                y: now[1]
	              };
	            }

	            r.redrawHint('select', true);

	            r.touchData.start = null;
	          }
	        }

	        // Re-project
	        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	        now[0] = pos[0]; now[1] = pos[1];
	      }
	    }

	    for (var j=0; j<now.length; j++) { earlier[j] = now[j]; }
	    //r.redraw();

	  }, false);

	  var touchcancelHandler;
	  r.registerBinding(window, 'touchcancel', touchcancelHandler = function(e) {
	    var start = r.touchData.start;

	    r.touchData.capture = false;

	    if( start ){
	      start.unactivate();
	    }
	  });

	  var touchendHandler;
	  r.registerBinding(window, 'touchend', touchendHandler = function(e) {
	    var start = r.touchData.start;

	    var capture = r.touchData.capture;

	    if( capture ){
	      r.touchData.capture = false;

	      e.preventDefault();
	    } else {
	      return;
	    }

	    var select = r.selection;

	    r.swipePanning = false;
	    r.hoverData.draggingEles = false;

	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) { var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY); now[0] = pos[0]; now[1] = pos[1]; }
	    if (e.touches[1]) { var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY); now[2] = pos[0]; now[3] = pos[1]; }
	    if (e.touches[2]) { var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY); now[4] = pos[0]; now[5] = pos[1]; }

	    if( start ){
	      start.unactivate();
	    }

	    var ctxTapend;
	    if( r.touchData.cxt ){
	      ctxTapend = Event(e, {
	        type: 'cxttapend',
	        cyPosition: { x: now[0], y: now[1] }
	      });

	      if( start ){
	        start.trigger( ctxTapend );
	      } else {
	        cy.trigger( ctxTapend );
	      }

	      if( !r.touchData.cxtDragged ){
	        var ctxTap = Event(e, {
	          type: 'cxttap',
	          cyPosition: { x: now[0], y: now[1] }
	        });

	        if( start ){
	          start.trigger( ctxTap );
	        } else {
	          cy.trigger( ctxTap );
	        }

	      }

	      if( r.touchData.start ){ r.touchData.start._private.grabbed = false; }
	      r.touchData.cxt = false;
	      r.touchData.start = null;

	      r.redraw();
	      return;
	    }

	    // no more box selection if we don't have three fingers
	    if( !e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting ){
	      r.touchData.selecting = false;

	      var newlySelected = [];
	      var box = r.getAllInBox( select[0], select[1], select[2], select[3] );

	      select[0] = undefined;
	      select[1] = undefined;
	      select[2] = undefined;
	      select[3] = undefined;
	      select[4] = 0;

	      r.redrawHint('select', true);

	      for( var i = 0; i< box.length; i++ ) {
	        if( box[i]._private.selectable ){
	          newlySelected.push( box[i] );
	        }
	      }

	      var newlySelCol = Collection( cy, newlySelected );

	      newlySelCol.select();

	      if( newlySelCol.length > 0 ) {
	        r.redrawHint('eles', true);
	      } else {
	        r.redraw();
	      }
	    }

	    var updateStartStyle = false;

	    if( start != null ){
	      start._private.active = false;
	      updateStartStyle = true;
	      start.unactivate();
	    }

	    if (e.touches[2]) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	    } else if (e.touches[1]) {

	    } else if (e.touches[0]) {

	    // Last touch released
	    } else if (!e.touches[0]) {

	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      var draggedEles = r.dragData.touchDragEles;

	      if (start != null ) {

	        var startWasGrabbed = start._private.grabbed;

	        freeDraggedElements( draggedEles );

	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        if( startWasGrabbed ){
	          start.trigger('free');
	        }

	        triggerEvents( start, ['touchend', 'tapend', 'vmouseup'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	        start.unactivate();

	        r.touchData.start = null;

	      } else {
	        var near = r.findNearestElement(now[0], now[1], true, true);

	        triggerEvents( near, ['touchend', 'tapend', 'vmouseup'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );

	      }

	      var dx = r.touchData.startPosition[0] - now[0];
	      var dx2 = dx * dx;
	      var dy = r.touchData.startPosition[1] - now[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      var rdist2 = dist2 * zoom * zoom;

	      // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance
	      if (start != null
	          && !r.dragData.didDrag // didn't drag nodes around
	          && start._private.selectable
	          && rdist2 < r.touchTapThreshold2
	          && !r.pinching // pinch to zoom should not affect selection
	      ) {

	        if( cy.selectionType() === 'single' ){
	          cy.$(':selected').unmerge( start ).unselect();
	          start.select();
	        } else {
	          if( start.selected() ){
	            start.unselect();
	          } else {
	            start.select();
	          }
	        }

	        updateStartStyle = true;


	        r.redrawHint('eles', true);
	      }

	      // Tap event, roughly same as mouse click event for touch
	      if( !r.touchData.singleTouchMoved ){
	        triggerEvents( start, ['tap', 'vclick'], e, {
	          cyPosition: { x: now[0], y: now[1] }
	        } );
	      }

	      r.touchData.singleTouchMoved = true;
	    }

	    for( var j = 0; j < now.length; j++ ){ earlier[j] = now[j]; }

	    r.dragData.didDrag = false; // reset for next mousedown

	    if( e.touches.length === 0 ){
	      r.touchData.dragDelta = [];
	    }

	    if( updateStartStyle && start ){
	      start.updateStyle(false);
	    }

	    if( e.touches.length < 2 ){
	      r.pinching = false;
	      r.redrawHint('eles', true);
	      r.redraw();
	    }

	    //r.redraw();

	  }, false);

	  // fallback compatibility layer for ms pointer events
	  if( typeof TouchEvent === 'undefined' ){

	    var pointers = [];

	    var makeTouch = function( e ){
	      return {
	        clientX: e.clientX,
	        clientY: e.clientY,
	        force: 1,
	        identifier: e.pointerId,
	        pageX: e.pageX,
	        pageY: e.pageY,
	        radiusX: e.width/2,
	        radiusY: e.height/2,
	        screenX: e.screenX,
	        screenY: e.screenY,
	        target: e.target
	      };
	    };

	    var makePointer = function( e ){
	      return {
	        event: e,
	        touch: makeTouch(e)
	      };
	    };

	    var addPointer = function( e ){
	      pointers.push( makePointer(e) );
	    };

	    var removePointer = function( e ){
	      for( var i = 0; i < pointers.length; i++ ){
	        var p = pointers[i];

	        if( p.event.pointerId === e.pointerId ){
	          pointers.splice( i, 1 );
	          return;
	        }
	      }
	    };

	    var updatePointer = function( e ){
	      var p = pointers.filter(function( p ){
	        return p.event.pointerId === e.pointerId;
	      })[0];

	      p.event = e;
	      p.touch = makeTouch(e);
	    };

	    var addTouchesToEvent = function( e ){
	      e.touches = pointers.map(function( p ){
	        return p.touch;
	      });
	    };

	    var pointerIsMouse = function( e ){
	      return e.pointerType === 'mouse' || e.pointerType === 4;
	    };

	    r.registerBinding(r.container, 'pointerdown', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      e.preventDefault();

	      addPointer( e );

	      addTouchesToEvent( e );
	      touchstartHandler( e );
	    });

	    r.registerBinding(r.container, 'pointerup', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      removePointer( e );

	      addTouchesToEvent( e );
	      touchendHandler( e );
	    });

	    r.registerBinding(r.container, 'pointercancel', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      removePointer( e );

	      addTouchesToEvent( e );
	      touchcancelHandler( e );
	    });

	    r.registerBinding(r.container, 'pointermove', function(e){
	      if( pointerIsMouse(e) ){ return; } // mouse already handled

	      e.preventDefault();

	      updatePointer( e );

	      addTouchesToEvent( e );
	      touchmoveHandler( e );
	    });

	  }
	};

	module.exports = BRp;

	},{"../../../collection":23,"../../../event":42,"../../../is":77,"../../../util":94}],60:[function(_dereq_,module,exports){
	'use strict';

	var math = _dereq_('../../../math');

	var BRp = {};

	BRp.registerNodeShapes = function(){
	  var nodeShapes = this.nodeShapes = {};
	  var renderer = this;

	  nodeShapes['ellipse'] = {
	    name: 'ellipse',

	    draw: function( context, centerX, centerY, width, height ){
	      renderer.nodeShapeImpl( this.name )( context, centerX, centerY, width, height );
	    },

	    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	      return math.intersectLineEllipse(
	        x, y,
	        nodeX,
	        nodeY,
	        width / 2 + padding,
	        height / 2 + padding)
	      ;
	    },

	    checkPoint: function( x, y, padding, width, height, centerX, centerY ){
	      x -= centerX;
	      y -= centerY;

	      x /= (width / 2 + padding);
	      y /= (height / 2 + padding);

	      return x*x + y*y <= 1;
	    }
	  };

	  function generatePolygon( name, points ){
	    return ( nodeShapes[name] = {
	      name: name,

	      points: points,

	      draw: function( context, centerX, centerY, width, height ){
	        renderer.nodeShapeImpl('polygon')( context, centerX, centerY, width, height, this.points );
	      },

	      intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	        return math.polygonIntersectLine(
	            x, y,
	            this.points,
	            nodeX,
	            nodeY,
	            width / 2, height / 2,
	            padding)
	          ;
	      },

	      checkPoint: function( x, y, padding, width, height, centerX, centerY ){
	        return math.pointInsidePolygon(x, y, nodeShapes[name].points,
	          centerX, centerY, width, height, [0, -1], padding)
	        ;
	      }
	    } );
	  }

	  generatePolygon( 'triangle', math.generateUnitNgonPointsFitToSquare(3, 0) );

	  generatePolygon( 'square', math.generateUnitNgonPointsFitToSquare(4, 0) );
	  nodeShapes['rectangle'] = nodeShapes['square'];

	  nodeShapes['roundrectangle'] = {
	    name: 'roundrectangle',

	    points: math.generateUnitNgonPointsFitToSquare(4, 0),

	    draw: function( context, centerX, centerY, width, height ){
	      renderer.nodeShapeImpl( this.name )( context, centerX, centerY, width, height );
	    },

	    intersectLine: function( nodeX, nodeY, width, height, x, y, padding ){
	      return math.roundRectangleIntersectLine(
	        x, y,
	        nodeX,
	        nodeY,
	        width, height,
	        padding)
	      ;
	    },

	    // Looks like the width passed into this function is actually the total width / 2
	    checkPoint: function(
	      x, y, padding, width, height, centerX, centerY ){

	      var cornerRadius = math.getRoundRectangleRadius(width, height);

	      // Check hBox
	      if (math.pointInsidePolygon(x, y, this.points,
	        centerX, centerY, width, height - 2 * cornerRadius, [0, -1], padding) ){
	        return true;
	      }

	      // Check vBox
	      if (math.pointInsidePolygon(x, y, this.points,
	        centerX, centerY, width - 2 * cornerRadius, height, [0, -1], padding) ){
	        return true;
	      }

	      var checkInEllipse = function( x, y, centerX, centerY, width, height, padding ){
	        x -= centerX;
	        y -= centerY;

	        x /= (width / 2 + padding);
	        y /= (height / 2 + padding);

	        return (x*x + y*y <= 1);
	      };


	      // Check top left quarter circle
	      if (checkInEllipse(x, y,
	        centerX - width / 2 + cornerRadius,
	        centerY - height / 2 + cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      // Check top right quarter circle
	      if (checkInEllipse(x, y,
	        centerX + width / 2 - cornerRadius,
	        centerY - height / 2 + cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      // Check bottom right quarter circle
	      if (checkInEllipse(x, y,
	        centerX + width / 2 - cornerRadius,
	        centerY + height / 2 - cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      // Check bottom left quarter circle
	      if (checkInEllipse(x, y,
	        centerX - width / 2 + cornerRadius,
	        centerY + height / 2 - cornerRadius,
	        cornerRadius * 2, cornerRadius * 2, padding) ){

	        return true;
	      }

	      return false;
	    }
	  };

	  generatePolygon( 'diamond', [
	    0, 1,
	    1, 0,
	    0, -1,
	    -1, 0
	  ] );

	  generatePolygon( 'pentagon', math.generateUnitNgonPointsFitToSquare(5, 0) );

	  generatePolygon( 'hexagon', math.generateUnitNgonPointsFitToSquare(6, 0) );

	  generatePolygon( 'heptagon', math.generateUnitNgonPointsFitToSquare(7, 0) );

	  generatePolygon( 'octagon', math.generateUnitNgonPointsFitToSquare(8, 0) );

	  var star5Points = new Array(20);
	  {
	    var outerPoints = math.generateUnitNgonPoints(5, 0);
	    var innerPoints = math.generateUnitNgonPoints(5, Math.PI / 5);

	    // Outer radius is 1; inner radius of star is smaller
	    var innerRadius = 0.5 * (3 - Math.sqrt(5));
	    innerRadius *= 1.57;

	    for (var i=0;i<innerPoints.length/2;i++ ){
	      innerPoints[i*2] *= innerRadius;
	      innerPoints[i*2+1] *= innerRadius;
	    }

	    for (var i=0;i<20/4;i++ ){
	      star5Points[i*4] = outerPoints[i*2];
	      star5Points[i*4+1] = outerPoints[i*2+1];

	      star5Points[i*4+2] = innerPoints[i*2];
	      star5Points[i*4+3] = innerPoints[i*2+1];
	    }
	  }

	  star5Points = math.fitPolygonToSquare( star5Points );

	  generatePolygon( 'star', star5Points );

	  generatePolygon( 'vee', [
	    -1, -1,
	    0, -0.333,
	    1, -1,
	    0, 1
	  ] );

	  generatePolygon( 'rhomboid', [
	    -1, -1,
	    0.333, -1,
	    1, 1,
	    -0.333, 1
	  ] );

	  nodeShapes.makePolygon = function( points ){

	    // use caching on user-specified polygons so they are as fast as native shapes

	    var key = points.join('$');
	    var name = 'polygon-' + key;
	    var shape;

	    if( (shape = nodeShapes[name]) ){ // got cached shape
	      return shape;
	    }

	    // create and cache new shape
	    return generatePolygon( name, points );
	  };

	};

	module.exports = BRp;

	},{"../../../math":79}],61:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../../../util');

	var BRp = {};

	BRp.timeToRender = function(){
	  return this.redrawTotalTime / this.redrawCount;
	};

	var minRedrawLimit = 1000/60; // people can't see much better than 60fps
	var maxRedrawLimit = 1000;  // don't cap max b/c it's more important to be responsive than smooth

	BRp.redraw = function( options ){
	  options = options || util.staticEmptyObject();

	  var r = this;
	  var forcedContext = options.forcedContext;

	  if( r.averageRedrawTime === undefined ){ r.averageRedrawTime = 0; }
	  if( r.lastRedrawTime === undefined ){ r.lastRedrawTime = 0; }

	  var redrawLimit = r.lastRedrawTime; // estimate the ideal redraw limit based on how fast we can draw
	  redrawLimit = minRedrawLimit > redrawLimit ? minRedrawLimit : redrawLimit;
	  redrawLimit = redrawLimit < maxRedrawLimit ? redrawLimit : maxRedrawLimit;

	  if( r.lastDrawTime === undefined ){ r.lastDrawTime = 0; }

	  var nowTime = Date.now();
	  var timeElapsed = nowTime - r.lastDrawTime;
	  var callAfterLimit = timeElapsed >= redrawLimit;

	  if( !forcedContext ){
	    if( !callAfterLimit ){
	      r.skipFrame = true;
	      return;
	    }
	  }

	  r.requestedFrame = true;
	  r.renderOptions = options;
	};

	BRp.startRenderLoop = function(){
	  var r = this;

	  if( r.renderLoopStarted ){
	    return;
	  } else {
	    r.renderLoopStarted = true;
	  }

	  var renderFn = function(){
	    if( r.destroyed ){ return; }

	    if( r.requestedFrame && !r.skipFrame ){
	      var startTime = util.performanceNow();

	      r.render( r.renderOptions );

	      var endTime = r.lastRedrawTime = util.performanceNow();

	      if( r.averageRedrawTime === undefined ){
	        r.averageRedrawTime = endTime - startTime;
	      }

	      if( r.redrawCount === undefined ){
	        r.redrawCount = 0;
	      }

	      r.redrawCount++;

	      if( r.redrawTotalTime === undefined ){
	        r.redrawTotalTime = 0;
	      }

	      var duration = endTime - startTime;

	      r.redrawTotalTime += duration;
	      r.lastRedrawTime = duration;

	      // use a weighted average with a bias from the previous average so we don't spike so easily
	      r.averageRedrawTime = r.averageRedrawTime/2 + duration/2;

	      r.requestedFrame = false;
	    }

	    r.skipFrame = false;

	    util.requestAnimationFrame( renderFn );
	  };

	  util.requestAnimationFrame( renderFn );

	};

	module.exports = BRp;

	},{"../../../util":94}],62:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	var impl;

	CRp.arrowShapeImpl = function( name ){
	  return ( impl || (impl = {
	    'polygon': function( context, points ){
	      for( var i = 0; i < points.length; i++ ){
	        var pt = points[i];

	        context.lineTo( pt.x, pt.y );
	      }
	    },

	    'triangle-backcurve': function( context, points, controlPoint ){
	      var firstPt;

	      for( var i = 0; i < points.length; i++ ){
	        var pt = points[i];

	        if( i === 0 ){
	          firstPt = pt;
	        }

	        context.lineTo( pt.x, pt.y );
	      }

	      context.quadraticCurveTo( controlPoint.x, controlPoint.y, firstPt.x, firstPt.y );
	    },

	    'triangle-tee': function( context, trianglePoints, teePoints ){
	      var triPts = trianglePoints;
	      for( var i = 0; i < triPts.length; i++ ){
	        var pt = triPts[i];

	        context.lineTo( pt.x, pt.y );
	      }

	      var teePts = teePoints;
	      var firstTeePt = teePoints[0];
	      context.moveTo( firstTeePt.x, firstTeePt.y );

	      for( var i = 0; i < teePts.length; i++ ){
	        var pt = teePts[i];

	        context.lineTo( pt.x, pt.y );
	      }
	    },

	    'circle': function( context, rx, ry, r ){
	      context.arc(rx, ry, r, 0, Math.PI * 2, false);
	    }
	  }) )[ name ];
	};

	module.exports = CRp;

	},{}],63:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	CRp.drawEdge = function(context, edge, drawOverlayInstead) {
	  var rs = edge._private.rscratch;
	  var usePaths = this.usePaths();

	  // if bezier ctrl pts can not be calculated, then die
	  if( rs.badBezier || rs.badLine || isNaN( rs.allpts[0] ) ){ // iNaN in case edge is impossible and browser bugs (e.g. safari)
	    return;
	  }

	  var style = edge._private.style;

	  // Edge line width
	  if (style['width'].pfValue <= 0) {
	    return;
	  }

	  var overlayPadding = style['overlay-padding'].pfValue;
	  var overlayOpacity = style['overlay-opacity'].value;
	  var overlayColor = style['overlay-color'].value;

	  // Edge color & opacity
	  if( drawOverlayInstead ){

	    if( overlayOpacity === 0 ){ // exit early if no overlay
	      return;
	    }

	    this.strokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
	    context.lineCap = 'round';

	    if( rs.edgeType == 'self' && !usePaths ){
	      context.lineCap = 'butt';
	    }

	  } else {
	    var lineColor = style['line-color'].value;

	    this.strokeStyle(context, lineColor[0], lineColor[1], lineColor[2], style.opacity.value);

	    context.lineCap = 'butt';
	  }

	  var edgeWidth = style['width'].pfValue + (drawOverlayInstead ? 2 * overlayPadding : 0);
	  var lineStyle = drawOverlayInstead ? 'solid' : style['line-style'].value;
	  context.lineWidth = edgeWidth;

	  var shadowBlur = style['shadow-blur'].pfValue;
	  var shadowOpacity = style['shadow-opacity'].value;
	  var shadowColor = style['shadow-color'].value;
	  var shadowOffsetX = style['shadow-offset-x'].pfValue;
	  var shadowOffsetY = style['shadow-offset-y'].pfValue;

	  this.shadowStyle(context,  shadowColor, drawOverlayInstead ? 0 : shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);

	  this.drawEdgePath(
	    edge,
	    context,
	    rs.allpts,
	    lineStyle,
	    edgeWidth
	  );

	  this.drawArrowheads(context, edge, drawOverlayInstead);

	  this.shadowStyle(context, 'transparent', 0); // reset for next guy

	};


	CRp.drawEdgePath = function(edge, context, pts, type, width) {
	  var rs = edge._private.rscratch;
	  var canvasCxt = context;
	  var path;
	  var pathCacheHit = false;
	  var usePaths = this.usePaths();

	  if( usePaths ){
	    var pathCacheKey = pts.join('$');
	    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

	    if( keyMatches ){
	      path = context = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }

	  if( canvasCxt.setLineDash ){ // for very outofdate browsers
	    switch( type ){
	      case 'dotted':
	        canvasCxt.setLineDash([ 1, 1 ]);
	        break;

	      case 'dashed':
	        canvasCxt.setLineDash([ 6, 3 ]);
	        break;

	      case 'solid':
	        canvasCxt.setLineDash([ ]);
	        break;
	    }
	  }

	  if( !pathCacheHit ){
	    if( context.beginPath ){ context.beginPath(); }
	    context.moveTo( pts[0], pts[1] );

	    switch( rs.edgeType ){
	      case 'bezier':
	      case 'self':
	      case 'compound':
	      case 'multibezier':
	        if( !rs.badBezier ){
	          for( var i = 2; i + 3 < pts.length; i += 4 ){
	            context.quadraticCurveTo( pts[i], pts[i+1], pts[i+2], pts[i+3] );
	          }
	        }
	        break;

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        if( !rs.badLine ){
	          for( var i = 2; i + 1 < pts.length; i += 2 ){
	            context.lineTo( pts[i], pts[i+1] );
	          }
	        }
	        break;
	    }
	  }

	  context = canvasCxt;
	  if( usePaths ){
	    context.stroke( path );
	  } else {
	    context.stroke();
	  }

	  // reset any line dashes
	  if( context.setLineDash ){ // for very outofdate browsers
	    context.setLineDash([ ]);
	  }

	};

	CRp.drawArrowheads = function(context, edge, drawOverlayInstead) {
	  if( drawOverlayInstead ){ return; } // don't do anything for overlays

	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';

	  if( !isHaystack ){
	    this.drawArrowhead( context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle );
	  }

	  this.drawArrowhead( context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle );

	  this.drawArrowhead( context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle );

	  if( !isHaystack ){
	    this.drawArrowhead( context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle );
	  }
	};

	CRp.drawArrowhead = function( context, edge, prefix, x, y, angle ){
	  if( isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null ){ return; }

	  var self = this;
	  var style = edge._private.style;
	  var arrowShape = style[prefix + '-arrow-shape'].value;

	  if( arrowShape === 'none' ){
	    return;
	  }

	  var gco = context.globalCompositeOperation;

	  var arrowClearFill = style[prefix + '-arrow-fill'].value === 'hollow' ? 'both' : 'filled';
	  var arrowFill = style[prefix + '-arrow-fill'].value;

	  if( arrowShape === 'half-triangle-overshot' ){
	    arrowFill = 'hollow';
	    arrowClearFill = 'hollow';
	  }

	  if( style.opacity.value !== 1 || arrowFill === 'hollow' ){ // then extra clear is needed
	    context.globalCompositeOperation = 'destination-out';

	    self.fillStyle(context, 255, 255, 255, 1);
	    self.strokeStyle(context, 255, 255, 255, 1);

	    self.drawArrowShape( edge, prefix, context,
	      arrowClearFill, style['width'].pfValue, style[prefix + '-arrow-shape'].value,
	      x, y, angle
	    );

	    context.globalCompositeOperation = gco;
	  } // otherwise, the opaque arrow clears it for free :)

	  var color = style[prefix + '-arrow-color'].value;
	  self.fillStyle(context, color[0], color[1], color[2], style.opacity.value);
	  self.strokeStyle(context, color[0], color[1], color[2], style.opacity.value);

	  self.drawArrowShape( edge, prefix, context,
	    arrowFill, style['width'].pfValue, style[prefix + '-arrow-shape'].value,
	    x, y, angle
	  );
	};

	CRp.drawArrowShape = function(edge, arrowType, context, fill, edgeWidth, shape, x, y, angle) {
	  var r = this;
	  var usePaths = this.usePaths();
	  var rs = edge._private.rscratch;
	  var pathCacheHit = false;
	  var path;
	  var canvasContext = context;
	  var translation = { x: x, y: y };
	  var size = this.getArrowWidth( edgeWidth );
	  var shapeImpl = r.arrowShapes[shape];

	  if( usePaths ){
	    var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;
	    rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};
	    rs.arrowPathCache = rs.arrowPathCache || {};

	    var alreadyCached = rs.arrowPathCacheKey[arrowType] === pathCacheKey;
	    if( alreadyCached ){
	      path = context = rs.arrowPathCache[arrowType];
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.arrowPathCacheKey[arrowType] = pathCacheKey;
	      rs.arrowPathCache[arrowType] = path;
	    }
	  }

	  if( context.beginPath ){ context.beginPath(); }

	  if( !pathCacheHit ){
	    shapeImpl.draw(context, size, angle, translation);
	  }

	  if( !shapeImpl.leavePathOpen && context.closePath ){
	    context.closePath();
	  }

	  context = canvasContext;

	  if( fill === 'filled' || fill === 'both' ){
	    if( usePaths ){
	      context.fill( path );
	    } else {
	      context.fill();
	    }
	  }

	  if( fill === 'hollow' || fill === 'both' ){
	    context.lineWidth = ( shapeImpl.matchEdgeWidth ? edgeWidth : 1 );
	    context.lineJoin = 'miter';

	    if( usePaths ){
	      context.stroke( path );
	    } else {
	      context.stroke();
	    }

	  }
	};

	module.exports = CRp;

	},{}],64:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	CRp.safeDrawImage = function( context, img, ix, iy, iw, ih, x, y, w, h ){
	  var r = this;

	  try {
	    context.drawImage( img, ix, iy, iw, ih, x, y, w, h );
	  } catch(e){
	    r.data.canvasNeedsRedraw[r.NODE] = true;
	    r.data.canvasNeedsRedraw[r.DRAG] = true;

	    r.drawingImage = true;

	    r.redraw();
	  }
	};

	CRp.drawInscribedImage = function(context, img, node) {
	  var r = this;
	  var nodeX = node._private.position.x;
	  var nodeY = node._private.position.y;
	  var style = node._private.style;
	  var fit = style['background-fit'].value;
	  var xPos = style['background-position-x'];
	  var yPos = style['background-position-y'];
	  var repeat = style['background-repeat'].value;
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var rs = node._private.rscratch;
	  var clip = style['background-clip'].value;
	  var shouldClip = clip === 'node';
	  var imgOpacity = style['background-image-opacity'].value;

	  var imgW = img.width || img.cachedW;
	  var imgH = img.height || img.cachedH;

	  // workaround for broken browsers like ie
	  if( null == imgW || null == imgH ){
	    document.body.appendChild( img );

	    imgW = img.cachedW = img.width || img.offsetWidth;
	    imgH = img.cachedH = img.height || img.offsetHeight;

	    document.body.removeChild( img );
	  }

	  var w = imgW;
	  var h = imgH;

	  var bgW = style['background-width'];
	  if( bgW.value !== 'auto' ){
	    if( bgW.units === '%' ){
	      w = bgW.value/100 * nodeW;
	    } else {
	      w = bgW.pfValue;
	    }
	  }

	  var bgH = style['background-height'];
	  if( bgH.value !== 'auto' ){
	    if( bgH.units === '%' ){
	      h = bgH.value/100 * nodeH;
	    } else {
	      h = bgH.pfValue;
	    }
	  }

	  if( w === 0 || h === 0 ){
	    return; // no point in drawing empty image (and chrome is broken in this case)
	  }

	  if( fit === 'contain' ){
	    var scale = Math.min( nodeW/w, nodeH/h );

	    w *= scale;
	    h *= scale;

	  } else if( fit === 'cover' ){
	    var scale = Math.max( nodeW/w, nodeH/h );

	    w *= scale;
	    h *= scale;
	  }

	  var x = (nodeX - nodeW/2); // left
	  if( xPos.units === '%' ){
	    x += (nodeW - w) * xPos.value/100;
	  } else {
	    x += xPos.pfValue;
	  }

	  var y = (nodeY - nodeH/2); // top
	  if( yPos.units === '%' ){
	    y += (nodeH - h) * yPos.value/100;
	  } else {
	    y += yPos.pfValue;
	  }

	  if( rs.pathCache ){
	    x -= nodeX;
	    y -= nodeY;

	    nodeX = 0;
	    nodeY = 0;
	  }

	  var gAlpha = context.globalAlpha;

	  context.globalAlpha = imgOpacity;

	  if( repeat === 'no-repeat' ){

	    if( shouldClip ){
	      context.save();

	      if( rs.pathCache ){
	        context.clip( rs.pathCache );
	      } else {
	        r.nodeShapes[r.getNodeShape(node)].draw(
	          context,
	          nodeX, nodeY,
	          nodeW, nodeH);

	        context.clip();
	      }
	    }

	    r.safeDrawImage( context, img, 0, 0, imgW, imgH, x, y, w, h );

	    if( shouldClip ){
	      context.restore();
	    }
	  } else {
	    var pattern = context.createPattern( img, repeat );
	    context.fillStyle = pattern;

	    r.nodeShapes[r.getNodeShape(node)].draw(
	        context,
	        nodeX, nodeY,
	        nodeW, nodeH);

	      context.translate(x, y);
	      context.fill();
	      context.translate(-x, -y);
	  }

	  context.globalAlpha = gAlpha;

	};

	module.exports = CRp;

	},{}],65:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');

	var CRp = {};

	// Draw edge text
	CRp.drawEdgeText = function(context, edge) {
	  var text = edge._private.style['label'].strValue;

	  if( !text || text.match(/^\s+$/) ){
	    return;
	  }

	  if( this.hideEdgesOnViewport && (this.dragData.didDrag || this.pinching || this.hoverData.dragging || this.data.wheel || this.swipePanning) ){ return; } // save cycles on pinching

	  var computedSize = edge._private.style['font-size'].pfValue * edge.cy().zoom();
	  var minSize = edge._private.style['min-zoomed-font-size'].pfValue;

	  if( computedSize < minSize ){
	    return;
	  }

	  // Calculate text draw position

	  context.textAlign = 'center';
	  context.textBaseline = 'middle';

	  var rs = edge._private.rscratch;
	  if( !is.number( rs.labelX ) || !is.number( rs.labelY ) ){ return; } // no pos => label can't be rendered

	  var style = edge._private.style;
	  var autorotate = style['edge-text-rotation'].strValue === 'autorotate';
	  var theta;

	  if( autorotate ){
	    theta = rs.labelAngle;

	    context.translate(rs.labelX, rs.labelY);
	    context.rotate(theta);

	    this.drawText(context, edge, 0, 0);

	    context.rotate(-theta);
	    context.translate(-rs.labelX, -rs.labelY);
	  } else {
	    this.drawText(context, edge, rs.labelX, rs.labelY);
	  }

	};

	// Draw node text
	CRp.drawNodeText = function(context, node) {
	  var text = node._private.style['label'].strValue;

	  if ( !text || text.match(/^\s+$/) ) {
	    return;
	  }

	  var computedSize = node._private.style['font-size'].pfValue * node.cy().zoom();
	  var minSize = node._private.style['min-zoomed-font-size'].pfValue;

	  if( computedSize < minSize ){
	    return;
	  }

	  // this.recalculateNodeLabelProjection( node );

	  var textHalign = node._private.style['text-halign'].strValue;
	  var textValign = node._private.style['text-valign'].strValue;
	  var rs = node._private.rscratch;
	  if( !is.number( rs.labelX ) || !is.number( rs.labelY ) ){ return; } // no pos => label can't be rendered

	  switch( textHalign ){
	    case 'left':
	      context.textAlign = 'right';
	      break;

	    case 'right':
	      context.textAlign = 'left';
	      break;

	    default: // e.g. center
	      context.textAlign = 'center';
	  }

	  switch( textValign ){
	    case 'top':
	      context.textBaseline = 'bottom';
	      break;

	    case 'bottom':
	      context.textBaseline = 'top';
	      break;

	    default: // e.g. center
	      context.textBaseline = 'middle';
	  }

	  this.drawText(context, node, rs.labelX, rs.labelY);
	};

	CRp.getFontCache = function(context){
	  var cache;

	  this.fontCaches = this.fontCaches || [];

	  for( var i = 0; i < this.fontCaches.length; i++ ){
	    cache = this.fontCaches[i];

	    if( cache.context === context ){
	      return cache;
	    }
	  }

	  cache = {
	    context: context
	  };
	  this.fontCaches.push(cache);

	  return cache;
	};

	// set up canvas context with font
	// returns transformed text string
	CRp.setupTextStyle = function( context, element ){
	  // Font style
	  var parentOpacity = element.effectiveOpacity();
	  var style = element._private.style;
	  var labelStyle = style['font-style'].strValue;
	  var labelSize = style['font-size'].pfValue + 'px';
	  var labelFamily = style['font-family'].strValue;
	  var labelWeight = style['font-weight'].strValue;
	  var opacity = style['text-opacity'].value * style['opacity'].value * parentOpacity;
	  var outlineOpacity = style['text-outline-opacity'].value * opacity;
	  var color = style['color'].value;
	  var outlineColor = style['text-outline-color'].value;
	  var shadowBlur = style['text-shadow-blur'].pfValue;
	  var shadowOpacity = style['text-shadow-opacity'].value;
	  var shadowColor = style['text-shadow-color'].value;
	  var shadowOffsetX = style['text-shadow-offset-x'].pfValue;
	  var shadowOffsetY = style['text-shadow-offset-y'].pfValue;

	  var fontCacheKey = element._private.fontKey;
	  var cache = this.getFontCache(context);

	  if( cache.key !== fontCacheKey ){
	    context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;

	    cache.key = fontCacheKey;
	  }

	  var text = this.getLabelText( element );

	  // Calculate text draw position based on text alignment

	  // so text outlines aren't jagged
	  context.lineJoin = 'round';

	  this.fillStyle(context, color[0], color[1], color[2], opacity);

	  this.strokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);

	  this.shadowStyle(context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);

	  return text;
	};

	function roundRect(ctx, x, y, width, height, radius) {
	  var radius = radius || 5;
	  ctx.beginPath();
	  ctx.moveTo(x + radius, y);
	  ctx.lineTo(x + width - radius, y);
	  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	  ctx.lineTo(x + width, y + height - radius);
	  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
	  ctx.lineTo(x + radius, y + height);
	  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
	  ctx.lineTo(x, y + radius);
	  ctx.quadraticCurveTo(x, y, x + radius, y);
	  ctx.closePath();
	  ctx.fill();
	}

	// Draw text
	CRp.drawText = function(context, element, textX, textY) {
	  var _p = element._private;
	  var style = _p.style;
	  var rstyle = _p.rstyle;
	  var rscratch = _p.rscratch;
	  var parentOpacity = element.effectiveOpacity();
	  if( parentOpacity === 0 || style['text-opacity'].value === 0){ return; }

	  var text = this.setupTextStyle( context, element );
	  var halign = style['text-halign'].value;
	  var valign = style['text-valign'].value;

	  if( element.isEdge() ){
	    halign = 'center';
	    valign = 'center';
	  }

	  if( element.isNode() ){
	    var pLeft = style['padding-left'].pfValue;
	    var pRight = style['padding-right'].pfValue;
	    var pTop = style['padding-top'].pfValue;
	    var pBottom = style['padding-bottom'].pfValue;

	    textX += pLeft/2;
	    textX -= pRight/2;

	    textY += pTop/2;
	    textY -= pBottom/2;
	  }

	  if ( text != null && !isNaN(textX) && !isNaN(textY)) {
	    var backgroundOpacity = style['text-background-opacity'].value;
	    var borderOpacity = style['text-border-opacity'].value;
	    var textBorderWidth = style['text-border-width'].pfValue;

	    if( backgroundOpacity > 0 || (textBorderWidth > 0 && borderOpacity > 0) ){
	      var margin = 4 + textBorderWidth/2;

	      if (element.isNode()) {
	        //Move textX, textY to include the background margins
	        if (valign === 'top') {
	          textY -= margin;
	        } else if (valign === 'bottom') {
	          textY += margin;
	        }
	        if (halign === 'left') {
	          textX -= margin;
	        } else if (halign === 'right') {
	          textX += margin;
	        }
	      }

	      var bgWidth = rstyle.labelWidth;
	      var bgHeight = rstyle.labelHeight;
	      var bgX = textX;

	      if (halign) {
	        if (halign == 'center') {
	          bgX = bgX - bgWidth / 2;
	        } else if (halign == 'left') {
	          bgX = bgX- bgWidth;
	        }
	      }

	      var bgY = textY;

	      if (element.isNode()) {
	        if (valign == 'top') {
	           bgY = bgY - bgHeight;
	        } else if (valign == 'center') {
	          bgY = bgY- bgHeight / 2;
	        }
	      } else {
	        bgY = bgY - bgHeight / 2;
	      }

	      if (style['edge-text-rotation'].strValue === 'autorotate') {
	        textY = 0;
	        bgWidth += 4;
	        bgX = textX - bgWidth / 2;
	        bgY = textY - bgHeight / 2;
	      } else {
	        // Adjust with border width & margin
	        bgX -= margin;
	        bgY -= margin;
	        bgHeight += margin*2;
	        bgWidth += margin*2;
	      }

	      if( backgroundOpacity > 0 ){
	        var textFill = context.fillStyle;
	        var textBackgroundColor = style['text-background-color'].value;

	        context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
	        var styleShape = style['text-background-shape'].strValue;
	        if (styleShape == 'roundrectangle') {
	          roundRect(context, bgX, bgY, bgWidth, bgHeight, 2);
	        } else {
	          context.fillRect(bgX,bgY,bgWidth,bgHeight);
	        }
	        context.fillStyle = textFill;
	      }

	      if( textBorderWidth > 0 && borderOpacity > 0 ){
	        var textStroke = context.strokeStyle;
	        var textLineWidth = context.lineWidth;
	        var textBorderColor = style['text-border-color'].value;
	        var textBorderStyle = style['text-border-style'].value;

	        context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
	        context.lineWidth = textBorderWidth;

	        if( context.setLineDash ){ // for very outofdate browsers
	          switch( textBorderStyle ){
	            case 'dotted':
	              context.setLineDash([ 1, 1 ]);
	              break;
	            case 'dashed':
	              context.setLineDash([ 4, 2 ]);
	              break;
	            case 'double':
	              context.lineWidth = textBorderWidth/4; // 50% reserved for white between the two borders
	              context.setLineDash([ ]);
	              break;
	            case 'solid':
	              context.setLineDash([ ]);
	              break;
	          }
	        }

	        context.strokeRect(bgX,bgY,bgWidth,bgHeight);

	        if( textBorderStyle === 'double' ){
	          var whiteWidth = textBorderWidth/2;

	          context.strokeRect(bgX+whiteWidth,bgY+whiteWidth,bgWidth-whiteWidth*2,bgHeight-whiteWidth*2);
	        }

	        if( context.setLineDash ){ // for very outofdate browsers
	          context.setLineDash([ ]);
	        }
	        context.lineWidth = textLineWidth;
	        context.strokeStyle = textStroke;
	      }

	    }

	    var lineWidth = 2  * style['text-outline-width'].pfValue; // *2 b/c the stroke is drawn centred on the middle

	    if( lineWidth > 0 ){
	      context.lineWidth = lineWidth;
	    }

	    if( style['text-wrap'].value === 'wrap' ){
	      var lines = rscratch.labelWrapCachedLines;
	      var lineHeight = rstyle.labelHeight / lines.length;

	      switch( valign ){
	        case 'top':
	          textY -= (lines.length - 1) * lineHeight;
	          break;

	        case 'bottom':
	          // nothing required
	          break;

	        default:
	        case 'center':
	          textY -= (lines.length - 1) * lineHeight / 2;
	      }

	      for( var l = 0; l < lines.length; l++ ){
	        if( lineWidth > 0 ){
	          context.strokeText( lines[l], textX, textY );
	        }

	        context.fillText( lines[l], textX, textY );

	        textY += lineHeight;
	      }

	    } else {
	      if( lineWidth > 0 ){
	        context.strokeText( text, textX, textY );
	      }

	      context.fillText( text, textX, textY );
	    }


	    this.shadowStyle(context, 'transparent', 0); // reset for next guy
	  }
	};


	module.exports = CRp;

	},{"../../../is":77}],66:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');

	var CRp = {};

	// Draw node
	CRp.drawNode = function(context, node, drawOverlayInstead) {

	  var r = this;
	  var nodeWidth, nodeHeight;
	  var style = node._private.style;
	  var rs = node._private.rscratch;
	  var _p = node._private;
	  var pos = _p.position;

	  if( !is.number(pos.x) || !is.number(pos.y) ){
	    return; // can't draw node with undefined position
	  }

	  var usePaths = this.usePaths();
	  var canvasContext = context;
	  var path;
	  var pathCacheHit = false;

	  var overlayPadding = style['overlay-padding'].pfValue;
	  var overlayOpacity = style['overlay-opacity'].value;
	  var overlayColor = style['overlay-color'].value;

	  if( drawOverlayInstead && overlayOpacity === 0 ){ // exit early if drawing overlay but none to draw
	    return;
	  }

	  var parentOpacity = node.effectiveOpacity();
	  if( parentOpacity === 0 ){ return; }

	  nodeWidth = node.width() + style['padding-left'].pfValue + style['padding-right'].pfValue;
	  nodeHeight = node.height() + style['padding-top'].pfValue + style['padding-bottom'].pfValue;

	  context.lineWidth = style['border-width'].pfValue;

	  if( drawOverlayInstead === undefined || !drawOverlayInstead ){

	    var url = style['background-image'].value[2] ||
	      style['background-image'].value[1];
	    var image;

	    if (url !== undefined) {

	      // get image, and if not loaded then ask to redraw when later loaded
	      image = this.getCachedImage(url, function(){
	        r.data.canvasNeedsRedraw[r.NODE] = true;
	        r.data.canvasNeedsRedraw[r.DRAG] = true;

	        r.drawingImage = true;

	        r.redraw();
	      });

	      var prevBging = _p.backgrounding;
	      _p.backgrounding = !image.complete;

	      if( prevBging !== _p.backgrounding ){ // update style b/c :backgrounding state changed
	        node.updateStyle( false );
	      }
	    }

	    // Node color & opacity

	    var bgColor = style['background-color'].value;
	    var borderColor = style['border-color'].value;
	    var borderStyle = style['border-style'].value;

	    this.fillStyle(context, bgColor[0], bgColor[1], bgColor[2], style['background-opacity'].value * parentOpacity);

	    this.strokeStyle(context, borderColor[0], borderColor[1], borderColor[2], style['border-opacity'].value * parentOpacity);

	    var shadowBlur = style['shadow-blur'].pfValue;
	    var shadowOpacity = style['shadow-opacity'].value;
	    var shadowColor = style['shadow-color'].value;
	    var shadowOffsetX = style['shadow-offset-x'].pfValue;
	    var shadowOffsetY = style['shadow-offset-y'].pfValue;

	    this.shadowStyle(context, shadowColor, shadowOpacity, shadowBlur, shadowOffsetX, shadowOffsetY);

	    context.lineJoin = 'miter'; // so borders are square with the node shape

	    if( context.setLineDash ){ // for very outofdate browsers
	      switch( borderStyle ){
	        case 'dotted':
	          context.setLineDash([ 1, 1 ]);
	          break;

	        case 'dashed':
	          context.setLineDash([ 4, 2 ]);
	          break;

	        case 'solid':
	        case 'double':
	          context.setLineDash([ ]);
	          break;
	      }
	    }


	    var styleShape = style['shape'].strValue;

	    if( usePaths ){
	      var pathCacheKey = styleShape + '$' + nodeWidth +'$' + nodeHeight;

	      context.translate( pos.x, pos.y );

	      if( rs.pathCacheKey === pathCacheKey ){
	        path = context = rs.pathCache;
	        pathCacheHit = true;
	      } else {
	        path = context = new Path2D();
	        rs.pathCacheKey = pathCacheKey;
	        rs.pathCache = path;
	      }
	    }

	    if( !pathCacheHit ){

	      var npos = pos;

	      if( usePaths ){
	        npos = {
	          x: 0,
	          y: 0
	        };
	      }

	      r.nodeShapes[this.getNodeShape(node)].draw(
	            context,
	            npos.x,
	            npos.y,
	            nodeWidth,
	            nodeHeight);
	    }

	    context = canvasContext;

	    if( usePaths ){
	      context.fill( path );
	    } else {
	      context.fill();
	    }

	    this.shadowStyle(context, 'transparent', 0); // reset for next guy

	    if (url !== undefined) {
	      if( image.complete ){
	        this.drawInscribedImage(context, image, node);
	      }
	    }

	    var darkness = style['background-blacken'].value;
	    var borderWidth = style['border-width'].pfValue;

	    if( this.hasPie(node) ){
	      this.drawPie( context, node, parentOpacity );

	      // redraw path for blacken and border
	      if( darkness !== 0 || borderWidth !== 0 ){

	        if( !usePaths ){
	          r.nodeShapes[this.getNodeShape(node)].draw(
	              context,
	              pos.x,
	              pos.y,
	              nodeWidth,
	              nodeHeight);
	        }
	      }
	    }

	    if( darkness > 0 ){
	      this.fillStyle(context, 0, 0, 0, darkness);

	      if( usePaths ){
	        context.fill( path );
	      } else {
	        context.fill();
	      }

	    } else if( darkness < 0 ){
	      this.fillStyle(context, 255, 255, 255, -darkness);

	      if( usePaths ){
	        context.fill( path );
	      } else {
	        context.fill();
	      }
	    }

	    // Border width, draw border
	    if (borderWidth > 0) {

	      if( usePaths ){
	        context.stroke( path );
	      } else {
	        context.stroke();
	      }

	      if( borderStyle === 'double' ){
	        context.lineWidth = style['border-width'].pfValue/3;

	        var gco = context.globalCompositeOperation;
	        context.globalCompositeOperation = 'destination-out';

	        if( usePaths ){
	          context.stroke( path );
	        } else {
	          context.stroke();
	        }

	        context.globalCompositeOperation = gco;
	      }

	    }

	    if( usePaths ){
	      context.translate( -pos.x, -pos.y );
	    }

	    // reset in case we changed the border style
	    if( context.setLineDash ){ // for very outofdate browsers
	      context.setLineDash([ ]);
	    }

	  // draw the overlay
	  } else {

	    if( overlayOpacity > 0 ){
	      this.fillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);

	      r.nodeShapes['roundrectangle'].draw(
	        context,
	        node._private.position.x,
	        node._private.position.y,
	        nodeWidth + overlayPadding * 2,
	        nodeHeight + overlayPadding * 2
	      );

	      context.fill();
	    }
	  }

	};

	// does the node have at least one pie piece?
	CRp.hasPie = function(node){
	  node = node[0]; // ensure ele ref

	  return node._private.hasPie;
	};

	CRp.drawPie = function( context, node, nodeOpacity ){
	  node = node[0]; // ensure ele ref

	  var _p = node._private;
	  var cyStyle = node.cy().style();
	  var style = _p.style;
	  var pieSize = style['pie-size'];
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var x = _p.position.x;
	  var y = _p.position.y;
	  var radius = Math.min( nodeW, nodeH ) / 2; // must fit in node
	  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]
	  var usePaths = this.usePaths();

	  if( usePaths ){
	    x = 0;
	    y = 0;
	  }

	  if( pieSize.units === '%' ){
	    radius = radius * pieSize.value / 100;
	  } else if( pieSize.pfValue !== undefined ){
	    radius = pieSize.pfValue / 2;
	  }

	  for( var i = 1; i <= cyStyle.pieBackgroundN; i++ ){ // 1..N
	    var size = style['pie-' + i + '-background-size'].value;
	    var color = style['pie-' + i + '-background-color'].value;
	    var opacity = style['pie-' + i + '-background-opacity'].value * nodeOpacity;
	    var percent = size / 100; // map integer range [0, 100] to [0, 1]

	    // percent can't push beyond 1
	    if( percent + lastPercent > 1 ){
	      percent = 1 - lastPercent;
	    }

	    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise
	    var angleDelta = 2 * Math.PI * percent;
	    var angleEnd = angleStart + angleDelta;

	    // ignore if
	    // - zero size
	    // - we're already beyond the full circle
	    // - adding the current slice would go beyond the full circle
	    if( size === 0 || lastPercent >= 1 || lastPercent + percent > 1 ){
	      continue;
	    }

	    context.beginPath();
	    context.moveTo(x, y);
	    context.arc( x, y, radius, angleStart, angleEnd );
	    context.closePath();

	    this.fillStyle(context, color[0], color[1], color[2], opacity);

	    context.fill();

	    lastPercent += percent;
	  }

	};


	module.exports = CRp;

	},{"../../../is":77}],67:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	var util = _dereq_('../../../util');
	var math = _dereq_('../../../math');

	var motionBlurDelay = 100;

	// var isFirefox = typeof InstallTrigger !== 'undefined';

	CRp.getPixelRatio = function(){
	  var context = this.data.contexts[0];

	  if( this.forcedPixelRatio != null ){
	    return this.forcedPixelRatio;
	  }

	  var backingStore = context.backingStorePixelRatio ||
	    context.webkitBackingStorePixelRatio ||
	    context.mozBackingStorePixelRatio ||
	    context.msBackingStorePixelRatio ||
	    context.oBackingStorePixelRatio ||
	    context.backingStorePixelRatio || 1;

	  return (window.devicePixelRatio || 1) / backingStore;
	};

	CRp.paintCache = function(context){
	  var caches = this.paintCaches = this.paintCaches || [];
	  var needToCreateCache = true;
	  var cache;

	  for(var i = 0; i < caches.length; i++ ){
	    cache = caches[i];

	    if( cache.context === context ){
	      needToCreateCache = false;
	      break;
	    }
	  }

	  if( needToCreateCache ){
	    cache = {
	      context: context
	    };
	    caches.push( cache );
	  }

	  return cache;
	};

	CRp.fillStyle = function(context, r, g, b, a){
	  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.fillStyle !== fillStyle ){
	  //   context.fillStyle = cache.fillStyle = fillStyle;
	  // }
	};

	CRp.strokeStyle = function(context, r, g, b, a){
	  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // turn off for now, seems context does its own caching

	  // var cache = this.paintCache(context);

	  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

	  // if( cache.strokeStyle !== strokeStyle ){
	  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
	  // }
	};

	CRp.shadowStyle = function(context, color, opacity, blur, offsetX, offsetY){
	  var zoom = this.cy.zoom();

	  var cache = this.paintCache(context);

	  // don't make expensive changes to the shadow style if it's not used
	  if( cache.shadowOpacity === 0 && opacity === 0 ){
	    return;
	  }

	  cache.shadowOpacity = opacity;

	  if (opacity > 0) {
	    context.shadowBlur = blur * zoom;
	    context.shadowColor = "rgba(" + color[0] + "," + color[1] + "," + color[2] + "," + opacity + ")";
	    context.shadowOffsetX = offsetX * zoom;
	    context.shadowOffsetY = offsetY * zoom;
	  } else {
	    context.shadowBlur = 0;
	    context.shadowColor = "transparent";
	  }
	};

	// Resize canvas
	CRp.matchCanvasSize = function(container) {
	  var r = this;
	  var data = r.data;
	  var width = container.clientWidth;
	  var height = container.clientHeight;
	  var pixelRatio = r.getPixelRatio();
	  var mbPxRatio = r.motionBlurPxRatio;

	  if(
	    container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] ||
	    container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]
	  ){
	    pixelRatio = mbPxRatio;
	  }

	  var canvasWidth = width * pixelRatio;
	  var canvasHeight = height * pixelRatio;
	  var canvas;

	  if( canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight ){
	    return; // save cycles if same
	  }

	  r.fontCaches = null; // resizing resets the style

	  var canvasContainer = data.canvasContainer;
	  canvasContainer.style.width = width + 'px';
	  canvasContainer.style.height = height + 'px';

	  for (var i = 0; i < r.CANVAS_LAYERS; i++) {

	    canvas = data.canvases[i];

	    if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {

	      canvas.width = canvasWidth;
	      canvas.height = canvasHeight;

	      canvas.style.width = width + 'px';
	      canvas.style.height = height + 'px';
	    }
	  }

	  for (var i = 0; i < r.BUFFER_COUNT; i++) {

	    canvas = data.bufferCanvases[i];

	    if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {

	      canvas.width = canvasWidth;
	      canvas.height = canvasHeight;

	      canvas.style.width = width + 'px';
	      canvas.style.height = height + 'px';
	    }
	  }

	  r.textureMult = 1;
	  if( pixelRatio <= 1 ){
	    canvas = data.bufferCanvases[ r.TEXTURE_BUFFER ];

	    r.textureMult = 2;
	    canvas.width = canvasWidth * r.textureMult;
	    canvas.height = canvasHeight * r.textureMult;
	  }

	  r.canvasWidth = canvasWidth;
	  r.canvasHeight = canvasHeight;

	};

	CRp.renderTo = function( cxt, zoom, pan, pxRatio ){
	  this.render({
	    forcedContext: cxt,
	    forcedZoom: zoom,
	    forcedPan: pan,
	    drawAllLayers: true,
	    forcedPxRatio: pxRatio
	  });
	};

	CRp.render = function( options ) {
	  options = options || util.staticEmptyObject();

	  var forcedContext = options.forcedContext;
	  var drawAllLayers = options.drawAllLayers;
	  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
	  var forcedZoom = options.forcedZoom;
	  var forcedPan = options.forcedPan;
	  var r = this;
	  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
	  var cy = r.cy; var data = r.data;
	  var needDraw = data.canvasNeedsRedraw;
	  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
	  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
	  var mbPxRatio = r.motionBlurPxRatio;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var inNodeDragGesture = r.hoverData.draggingEles;
	  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
	  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
	  var motionBlurFadeEffect = motionBlur;

	  if( !forcedContext ){
	    if( r.prevPxRatio !== pixelRatio ){
	      r.invalidateContainerClientCoordsCache();
	      r.matchCanvasSize( r.container );

	      r.redrawHint('eles', true);
	      r.redrawHint('drag', true);
	    }

	    r.prevPxRatio = pixelRatio;
	  }

	  if( !forcedContext && r.motionBlurTimeout ){
	    clearTimeout( r.motionBlurTimeout );
	  }

	  if( motionBlur ){
	    if( r.mbFrames == null ){
	      r.mbFrames = 0;
	    }

	    if( !r.drawingImage ){ // image loading frames don't count towards motion blur blurry frames
	      r.mbFrames++;
	    }

	    if( r.mbFrames < 3 ){ // need several frames before even high quality motionblur
	      motionBlurFadeEffect = false;
	    }

	    // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)
	    if( r.mbFrames > r.minMbLowQualFrames ){
	      //r.fullQualityMb = false;
	      r.motionBlurPxRatio = r.mbPxRBlurry;
	    }
	  }

	  if( r.clearingMotionBlur ){
	    r.motionBlurPxRatio = 1;
	  }

	  // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
	  // because a rogue async texture frame would clear needDraw
	  if( r.textureDrawLastFrame && !textureDraw ){
	    needDraw[r.NODE] = true;
	    needDraw[r.SELECT_BOX] = true;
	  }

	  var edges = r.getCachedEdges();
	  var coreStyle = cy.style()._private.coreStyle;

	  var zoom = cy.zoom();
	  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
	  var pan = cy.pan();
	  var effectivePan = {
	    x: pan.x,
	    y: pan.y
	  };

	  var vp = {
	    zoom: zoom,
	    pan: {
	      x: pan.x,
	      y: pan.y
	    }
	  };
	  var prevVp = r.prevViewport;
	  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;

	  // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)
	  if( !viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes) ){
	    r.motionBlurPxRatio = 1;
	  }

	  if( forcedPan ){
	    effectivePan = forcedPan;
	  }

	  // apply pixel ratio

	  effectiveZoom *= pixelRatio;
	  effectivePan.x *= pixelRatio;
	  effectivePan.y *= pixelRatio;

	  var eles = {
	    drag: {
	      nodes: [],
	      edges: [],
	      eles: []
	    },
	    nondrag: {
	      nodes: [],
	      edges: [],
	      eles: []
	    }
	  };

	  function mbclear( context, x, y, w, h ){
	    var gco = context.globalCompositeOperation;

	    context.globalCompositeOperation = 'destination-out';
	    r.fillStyle( context, 255, 255, 255, r.motionBlurTransparency );
	    context.fillRect(x, y, w, h);

	    context.globalCompositeOperation = gco;
	  }

	  function setContextTransform(context, clear){
	    var ePan, eZoom, w, h;

	    if( !r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG]) ){
	      ePan = {
	        x: pan.x * mbPxRatio,
	        y: pan.y * mbPxRatio
	      };

	      eZoom = zoom * mbPxRatio;

	      w = r.canvasWidth * mbPxRatio;
	      h = r.canvasHeight * mbPxRatio;
	    } else {
	      ePan = effectivePan;
	      eZoom = effectiveZoom;

	      w = r.canvasWidth;
	      h = r.canvasHeight;
	    }

	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if( clear === 'motionBlur' ){
	      mbclear(context, 0, 0, w, h);
	    } else if( !forcedContext && (clear === undefined || clear) ){
	      context.clearRect(0, 0, w, h);
	    }

	    if( !drawAllLayers ){
	      context.translate( ePan.x, ePan.y );
	      context.scale( eZoom, eZoom );
	    }
	    if( forcedPan ){
	      context.translate( forcedPan.x, forcedPan.y );
	    }
	    if( forcedZoom ){
	      context.scale( forcedZoom, forcedZoom );
	    }
	  }

	  if( !textureDraw ){
	    r.textureDrawLastFrame = false;
	  }

	  if( textureDraw ){
	    r.textureDrawLastFrame = true;

	    var bb;

	    if( !r.textureCache ){
	      r.textureCache = {};

	      bb = r.textureCache.bb = cy.elements().boundingBox();

	      r.textureCache.texture = r.data.bufferCanvases[ r.TEXTURE_BUFFER ];

	      var cxt = r.data.bufferContexts[ r.TEXTURE_BUFFER ];

	      cxt.setTransform(1, 0, 0, 1, 0, 0);
	      cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);

	      r.render({
	        forcedContext: cxt,
	        drawOnlyNodeLayer: true,
	        forcedPxRatio: pixelRatio * r.textureMult
	      });

	      var vp = r.textureCache.viewport = {
	        zoom: cy.zoom(),
	        pan: cy.pan(),
	        width: r.canvasWidth,
	        height: r.canvasHeight
	      };

	      vp.mpan = {
	        x: (0 - vp.pan.x)/vp.zoom,
	        y: (0 - vp.pan.y)/vp.zoom
	      };
	    }

	    needDraw[r.DRAG] = false;
	    needDraw[r.NODE] = false;

	    var context = data.contexts[r.NODE];

	    var texture = r.textureCache.texture;
	    var vp = r.textureCache.viewport;
	    bb = r.textureCache.bb;

	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if( motionBlur ){
	      mbclear(context, 0, 0, vp.width, vp.height);
	    } else {
	      context.clearRect(0, 0, vp.width, vp.height);
	    }

	    var outsideBgColor = coreStyle['outside-texture-bg-color'].value;
	    var outsideBgOpacity = coreStyle['outside-texture-bg-opacity'].value;
	    r.fillStyle( context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity );
	    context.fillRect( 0, 0, vp.width, vp.height );

	    var zoom = cy.zoom();

	    setContextTransform( context, false );

	    context.clearRect( vp.mpan.x, vp.mpan.y, vp.width/vp.zoom/pixelRatio, vp.height/vp.zoom/pixelRatio );
	    context.drawImage( texture, vp.mpan.x, vp.mpan.y, vp.width/vp.zoom/pixelRatio, vp.height/vp.zoom/pixelRatio );

	  } else if( r.textureOnViewport && !forcedContext ){ // clear the cache since we don't need it
	    r.textureCache = null;
	  }

	  var vpManip = (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles);
	  var hideEdges = r.hideEdgesOnViewport && vpManip;
	  var hideLabels = r.hideLabelsOnViewport && vpManip;

	  if (needDraw[r.DRAG] || needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer) {
	    if( hideEdges ){
	    } else {
	      r.findEdgeControlPoints(edges);
	    }

	    var zEles = r.getCachedZSortedEles();
	    var extent = cy.extent();

	    for (var i = 0; i < zEles.length; i++) {
	      var ele = zEles[i];
	      var list;
	      var bb = forcedContext ? null : ele.boundingBox();
	      var insideExtent = forcedContext ? true : math.boundingBoxesIntersect( extent, bb );

	      if( !insideExtent ){ continue; } // no need to render

	      if ( ele._private.rscratch.inDragLayer ) {
	        list = eles.drag;
	      } else {
	        list = eles.nondrag;
	      }

	      list.eles.push( ele );
	    }

	  }


	  function drawElements( list, context ){
	    var eles = list.eles;

	    for( var i = 0; i < eles.length; i++ ){
	      var ele = eles[i];

	      if( ele.isNode() ){
	        r.drawNode(context, ele);

	        if( !hideLabels ){
	          r.drawNodeText(context, ele);
	        }

	        r.drawNode(context, ele, true);
	      } else if( !hideEdges ) {
	        r.drawEdge(context, ele);

	        if( !hideLabels ){
	          r.drawEdgeText(context, ele);
	        }

	        r.drawEdge(context, ele, true);
	      }


	    }

	  }

	  var needMbClear = [];

	  needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;
	  if( needMbClear[r.NODE] ){ r.clearedForMotionBlur[r.NODE] = true; }

	  needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;
	  if( needMbClear[r.DRAG] ){ r.clearedForMotionBlur[r.DRAG] = true; }

	  if( needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE] ){
	    var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
	    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_NODE ] : data.contexts[r.NODE] );
	    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;

	    setContextTransform( context, clear );
	    drawElements(eles.nondrag, context);

	    if( !drawAllLayers && !motionBlur ){
	      needDraw[r.NODE] = false;
	    }
	  }

	  if ( !drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG]) ) {
	    var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
	    var context = forcedContext || ( useBuffer ? r.data.bufferContexts[ r.MOTIONBLUR_BUFFER_DRAG ] : data.contexts[r.DRAG] );

	    setContextTransform( context, motionBlur && !useBuffer ? 'motionBlur' : undefined );
	    drawElements(eles.drag, context);

	    if( !drawAllLayers && !motionBlur ){
	      needDraw[r.DRAG] = false;
	    }
	  }

	  if( r.showFps || (!drawOnlyNodeLayer && (needDraw[r.SELECT_BOX] && !drawAllLayers)) ) {
	    var context = forcedContext || data.contexts[r.SELECT_BOX];

	    setContextTransform( context );

	    if( r.selection[4] == 1 && ( r.hoverData.selecting || r.touchData.selecting ) ){
	      var zoom = r.cy.zoom();
	      var borderWidth = coreStyle['selection-box-border-width'].value / zoom;

	      context.lineWidth = borderWidth;
	      context.fillStyle = "rgba("
	        + coreStyle['selection-box-color'].value[0] + ","
	        + coreStyle['selection-box-color'].value[1] + ","
	        + coreStyle['selection-box-color'].value[2] + ","
	        + coreStyle['selection-box-opacity'].value + ")";

	      context.fillRect(
	        r.selection[0],
	        r.selection[1],
	        r.selection[2] - r.selection[0],
	        r.selection[3] - r.selection[1]);

	      if (borderWidth > 0) {
	        context.strokeStyle = "rgba("
	          + coreStyle['selection-box-border-color'].value[0] + ","
	          + coreStyle['selection-box-border-color'].value[1] + ","
	          + coreStyle['selection-box-border-color'].value[2] + ","
	          + coreStyle['selection-box-opacity'].value + ")";

	        context.strokeRect(
	          r.selection[0],
	          r.selection[1],
	          r.selection[2] - r.selection[0],
	          r.selection[3] - r.selection[1]);
	      }
	    }

	    if( data.bgActivePosistion && !r.hoverData.selecting ){
	      var zoom = r.cy.zoom();
	      var pos = data.bgActivePosistion;

	      context.fillStyle = "rgba("
	        + coreStyle['active-bg-color'].value[0] + ","
	        + coreStyle['active-bg-color'].value[1] + ","
	        + coreStyle['active-bg-color'].value[2] + ","
	        + coreStyle['active-bg-opacity'].value + ")";

	      context.beginPath();
	      context.arc(pos.x, pos.y, coreStyle['active-bg-size'].pfValue / zoom, 0, 2 * Math.PI);
	      context.fill();
	    }

	    var timeToRender = r.lastRedrawTime;
	    if( r.showFps && timeToRender ){
	      timeToRender = Math.round( timeToRender );
	      var fps = Math.round(1000/timeToRender);

	      context.setTransform(1, 0, 0, 1, 0, 0);

	      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
	      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
	      context.lineWidth = 1;
	      context.fillText( '1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);

	      var maxFps = 60;
	      context.strokeRect(0, 30, 250, 20);
	      context.fillRect(0, 30, 250 * Math.min(fps/maxFps, 1), 20);
	    }

	    if( !drawAllLayers ){
	      needDraw[r.SELECT_BOX] = false;
	    }
	  }

	  // motionblur: blit rendered blurry frames
	  if( motionBlur && mbPxRatio !== 1 ){
	    var cxtNode = data.contexts[r.NODE];
	    var txtNode = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_NODE ];

	    var cxtDrag = data.contexts[r.DRAG];
	    var txtDrag = r.data.bufferCanvases[ r.MOTIONBLUR_BUFFER_DRAG ];

	    var drawMotionBlur = function( cxt, txt, needClear ){
	      cxt.setTransform(1, 0, 0, 1, 0, 0);

	      if( needClear || !motionBlurFadeEffect ){
	        cxt.clearRect( 0, 0, r.canvasWidth, r.canvasHeight );
	      } else {
	        mbclear( cxt, 0, 0, r.canvasWidth, r.canvasHeight );
	      }

	      var pxr = mbPxRatio;

	      cxt.drawImage(
	        txt, // img
	        0, 0, // sx, sy
	        r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
	        0, 0, // x, y
	        r.canvasWidth, r.canvasHeight // w, h
	      );
	    };

	    if( needDraw[r.NODE] || needMbClear[r.NODE] ){
	      drawMotionBlur( cxtNode, txtNode, needMbClear[r.NODE] );
	      needDraw[r.NODE] = false;
	    }

	    if( needDraw[r.DRAG] || needMbClear[r.DRAG] ){
	      drawMotionBlur( cxtDrag, txtDrag, needMbClear[r.DRAG] );
	      needDraw[r.DRAG] = false;
	    }
	  }

	  r.prevViewport = vp;

	  if( r.clearingMotionBlur ){
	    r.clearingMotionBlur = false;
	    r.motionBlurCleared = true;
	    r.motionBlur = true;
	  }

	  if( motionBlur ){
	    r.motionBlurTimeout = setTimeout(function(){
	      r.motionBlurTimeout = null;

	      r.clearedForMotionBlur[r.NODE] = false;
	      r.clearedForMotionBlur[r.DRAG] = false;
	      r.motionBlur = false;
	      r.clearingMotionBlur = !textureDraw;
	      r.mbFrames = 0;

	      needDraw[r.NODE] = true;
	      needDraw[r.DRAG] = true;

	      r.redraw();
	    }, motionBlurDelay);
	  }

	  r.drawingImage = false;


	  if( !forcedContext && !r.initrender ){
	    r.initrender = true;
	    cy.trigger('initrender');
	  }

	  if( !forcedContext ){
	    cy.triggerOnRender();
	  }

	};

	module.exports = CRp;

	},{"../../../math":79,"../../../util":94}],68:[function(_dereq_,module,exports){
	'use strict';

	  var math = _dereq_('../../../math');

	  var CRp = {};

	  // @O Polygon drawing
	  CRp.drawPolygonPath = function(
	    context, x, y, width, height, points) {

	    var halfW = width / 2;
	    var halfH = height / 2;

	    if( context.beginPath ){ context.beginPath(); }

	    context.moveTo( x + halfW * points[0], y + halfH * points[1] );

	    for (var i = 1; i < points.length / 2; i++) {
	      context.lineTo( x + halfW * points[i * 2], y + halfH * points[i * 2 + 1] );
	    }

	    context.closePath();
	  };

	  // Round rectangle drawing
	  CRp.drawRoundRectanglePath = function(
	    context, x, y, width, height, radius) {

	    var halfWidth = width / 2;
	    var halfHeight = height / 2;
	    var cornerRadius = math.getRoundRectangleRadius(width, height);

	    if( context.beginPath ){ context.beginPath(); }

	    // Start at top middle
	    context.moveTo(x, y - halfHeight);
	    // Arc from middle top to right side
	    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);
	    // Arc from right side to bottom
	    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
	    // Arc from bottom to left side
	    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
	    // Arc from left side to topBorder
	    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);
	    // Join line
	    context.lineTo(x, y - halfHeight);


	    context.closePath();
	  };

	  var sin0 = Math.sin(0);
	  var cos0 = Math.cos(0);

	  var sin = {};
	  var cos = {};

	  var ellipseStepSize = Math.PI / 40;

	  for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ) {
	    sin[i] = Math.sin(i);
	    cos[i] = Math.cos(i);
	  }

	  CRp.drawEllipsePath = function(context, centerX, centerY, width, height){
	    if( context.beginPath ){ context.beginPath(); }

	    if( context.ellipse ){
	      context.ellipse( centerX, centerY, width/2, height/2, 0, 0, 2*Math.PI );
	    } else {
	      var xPos, yPos;
	      var rw = width/2;
	      var rh = height/2;
	      for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize ) {
	        xPos = centerX - (rw * sin[i]) * sin0 + (rw * cos[i]) * cos0;
	        yPos = centerY + (rh * cos[i]) * sin0 + (rh * sin[i]) * cos0;

	        if (i === 0) {
	          context.moveTo(xPos, yPos);
	        } else {
	          context.lineTo(xPos, yPos);
	        }
	      }
	    }

	    context.closePath();
	  };

	module.exports = CRp;

	},{"../../../math":79}],69:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../../../is');

	var CRp = {};

	CRp.createBuffer = function(w, h) {
	  var buffer = document.createElement('canvas');
	  buffer.width = w;
	  buffer.height = h;

	  return [buffer, buffer.getContext('2d')];
	};

	CRp.bufferCanvasImage = function( options ){
	  var cy = this.cy;
	  var bb = cy.elements().boundingBox();
	  var width = options.full ? Math.ceil(bb.w) : this.container.clientWidth;
	  var height = options.full ? Math.ceil(bb.h) : this.container.clientHeight;
	  var scale = 1;

	  if( options.scale !== undefined ){
	    width *= options.scale;
	    height *= options.scale;

	    scale = options.scale;
	  } else if( is.number(options.maxWidth) || is.number(options.maxHeight) ){
	    var maxScaleW = Infinity;
	    var maxScaleH = Infinity;

	    if( is.number(options.maxWidth) ){
	      maxScaleW = scale * options.maxWidth / width;
	    }

	    if( is.number(options.maxHeight) ){
	      maxScaleH = scale * options.maxHeight / height;
	    }

	    scale = Math.min( maxScaleW, maxScaleH );

	    width *= scale;
	    height *= scale;
	  }

	  var buffCanvas = document.createElement('canvas');

	  buffCanvas.width = width;
	  buffCanvas.height = height;

	  buffCanvas.style.width = width + 'px';
	  buffCanvas.style.height = height + 'px';

	  var buffCxt = buffCanvas.getContext('2d');

	  // Rasterize the layers, but only if container has nonzero size
	  if (width > 0 && height > 0) {

	    buffCxt.clearRect( 0, 0, width, height );

	    if( options.bg ){
	      buffCxt.fillStyle = options.bg;
	      buffCxt.rect( 0, 0, width, height );
	      buffCxt.fill();
	    }

	    buffCxt.globalCompositeOperation = 'source-over';

	    if( options.full ){ // draw the full bounds of the graph
	      this.render({
	        forcedContext: buffCxt,
	        drawAllLayers: true,
	        forcedZoom: scale,
	        forcedPan: { x: -bb.x1*scale, y: -bb.y1*scale },
	        forcedPxRatio: 1
	      });
	    } else { // draw the current view
	      var cyPan = cy.pan();
	      var pan = {
	        x: cyPan.x * scale,
	        y: cyPan.y * scale
	      };
	      var zoom = cy.zoom() * scale;

	      this.render({
	        forcedContext: buffCxt,
	        drawAllLayers: true,
	        forcedZoom: zoom,
	        forcedPan: pan,
	        forcedPxRatio: 1
	      });
	    }
	  }

	  return buffCanvas;
	};

	CRp.png = function( options ){
	  return this.bufferCanvasImage( options ).toDataURL('image/png');
	};

	CRp.jpg = function( options ){
	  return this.bufferCanvasImage( options ).toDataURL('image/jpeg');
	};

	module.exports = CRp;

	},{"../../../is":77}],70:[function(_dereq_,module,exports){
	/*
	The canvas renderer was written by Yue Dong.

	Modifications tracked on Github.
	*/

	'use strict';

	var util = _dereq_('../../../util');
	var is = _dereq_('../../../is');

	var CR = CanvasRenderer;
	var CRp = CanvasRenderer.prototype;

	CRp.CANVAS_LAYERS = 3;
	//
	CRp.SELECT_BOX = 0;
	CRp.DRAG = 1;
	CRp.NODE = 2;

	CRp.BUFFER_COUNT = 3;
	//
	CRp.TEXTURE_BUFFER = 0;
	CRp.MOTIONBLUR_BUFFER_NODE = 1;
	CRp.MOTIONBLUR_BUFFER_DRAG = 2;

	function CanvasRenderer(options) {
	  var r = this;

	  r.data = {
	    canvases: new Array(CRp.CANVAS_LAYERS),
	    contexts: new Array(CRp.CANVAS_LAYERS),
	    canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),

	    bufferCanvases: new Array(CRp.BUFFER_COUNT),
	    bufferContexts: new Array(CRp.CANVAS_LAYERS)
	  };

	  r.data.canvasContainer = document.createElement('div');
	  var containerStyle = r.data.canvasContainer.style;
	  r.data.canvasContainer.setAttribute('style', '-webkit-tap-highlight-color: rgba(0,0,0,0);');
	  containerStyle.position = 'relative';
	  containerStyle.zIndex = '0';
	  containerStyle.overflow = 'hidden';

	  var container = options.cy.container();
	  container.appendChild( r.data.canvasContainer );
	  container.setAttribute('style', ( container.getAttribute('style') || '' ) + '-webkit-tap-highlight-color: rgba(0,0,0,0);');

	  for (var i = 0; i < CRp.CANVAS_LAYERS; i++) {
	    var canvas = r.data.canvases[i] = document.createElement('canvas');
	    r.data.contexts[i] = canvas.getContext('2d');
	    canvas.setAttribute( 'style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + ( is.ms() ? ' -ms-touch-action: none; touch-action: none; ' : '' ) );
	    canvas.style.position = 'absolute';
	    canvas.setAttribute('data-id', 'layer' + i);
	    canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i);
	    r.data.canvasContainer.appendChild(canvas);

	    r.data.canvasNeedsRedraw[i] = false;
	  }
	  r.data.topCanvas = r.data.canvases[0];

	  r.data.canvases[CRp.NODE].setAttribute('data-id', 'layer' + CRp.NODE + '-node');
	  r.data.canvases[CRp.SELECT_BOX].setAttribute('data-id', 'layer' + CRp.SELECT_BOX + '-selectbox');
	  r.data.canvases[CRp.DRAG].setAttribute('data-id', 'layer' + CRp.DRAG + '-drag');

	  for (var i = 0; i < CRp.BUFFER_COUNT; i++) {
	    r.data.bufferCanvases[i] = document.createElement('canvas');
	    r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
	    r.data.bufferCanvases[i].style.position = 'absolute';
	    r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
	    r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
	    r.data.bufferCanvases[i].style.visibility = 'hidden';
	    //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
	  }

	  r.pathsEnabled = true;
	}

	CRp.redrawHint = function( group, bool ){
	  var r = this;

	  switch( group ){
	    case 'eles':
	      r.data.canvasNeedsRedraw[ CRp.NODE ] = bool;
	      break;
	    case 'drag':
	      r.data.canvasNeedsRedraw[ CRp.DRAG ] = bool;
	      break;
	    case 'select':
	      r.data.canvasNeedsRedraw[ CRp.SELECT_BOX ] = bool;
	      break;
	  }
	};

	// whether to use Path2D caching for drawing
	var pathsImpld = typeof Path2D !== 'undefined';

	CRp.path2dEnabled = function( on ){
	  if( on === undefined ){
	    return this.pathsEnabled;
	  }

	  this.pathsEnabled = on ? true : false;
	};

	CRp.usePaths = function(){
	  return pathsImpld && this.pathsEnabled;
	};

	[
	  _dereq_('./arrow-shapes'),
	  _dereq_('./drawing-edges'),
	  _dereq_('./drawing-images'),
	  _dereq_('./drawing-label-text'),
	  _dereq_('./drawing-nodes'),
	  _dereq_('./drawing-redraw'),
	  _dereq_('./drawing-shapes'),
	  _dereq_('./export-image'),
	  _dereq_('./node-shapes')
	].forEach(function( props ){
	  util.extend( CRp, props );
	});

	module.exports = CR;

	},{"../../../is":77,"../../../util":94,"./arrow-shapes":62,"./drawing-edges":63,"./drawing-images":64,"./drawing-label-text":65,"./drawing-nodes":66,"./drawing-redraw":67,"./drawing-shapes":68,"./export-image":69,"./node-shapes":71}],71:[function(_dereq_,module,exports){
	'use strict';

	var CRp = {};

	var impl;

	CRp.nodeShapeImpl = function( name ){
	  var self = this;

	  return ( impl || (impl = {
	    'ellipse': function( context, centerX, centerY, width, height ){
	      self.drawEllipsePath( context, centerX, centerY, width, height );
	    },

	    'polygon': function( context, centerX, centerY, width, height, points ){
	      self.drawPolygonPath( context, centerX, centerY, width, height, points );
	    },

	    'roundrectangle': function( context, centerX, centerY, width, height ){
	      self.drawRoundRectanglePath( context, centerX, centerY, width, height, 10 );
	    }
	  }) )[ name ];
	};

	module.exports = CRp;

	},{}],72:[function(_dereq_,module,exports){
	'use strict';

	module.exports = [
	  { name: 'null', impl: _dereq_('./null') },
	  { name: 'base', impl: _dereq_('./base') },
	  { name: 'canvas', impl: _dereq_('./canvas') }
	];

	},{"./base":58,"./canvas":70,"./null":73}],73:[function(_dereq_,module,exports){
	'use strict';

	function NullRenderer(options){
	  this.options = options;
	  this.notifications = 0; // for testing
	}

	var noop = function(){};

	NullRenderer.prototype = {
	  recalculateRenderedStyle: noop,
	  notify: function(){ this.notifications++; },
	  init: noop
	};

	module.exports = NullRenderer;

	},{}],74:[function(_dereq_,module,exports){
	/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

	'use strict';

	var is = _dereq_('./is');
	var util = _dereq_('./util');
	var Thread = _dereq_('./thread');
	var Promise = _dereq_('./promise');
	var define = _dereq_('./define');

	var Fabric = function( N ){
	  if( !(this instanceof Fabric) ){
	    return new Fabric( N );
	  }

	  this._private = {
	    pass: []
	  };

	  var defN = 4;

	  if( is.number(N) ){
	    // then use the specified number of threads
	  } if( typeof navigator !== 'undefined' && navigator.hardwareConcurrency != null ){
	    N = navigator.hardwareConcurrency;
	  } else {
	    try{
	      N = _dereq_('os').cpus().length;
	    } catch( err ){
	      N = defN;
	    }
	  } // TODO could use an estimation here but would the additional expense be worth it?

	  for( var i = 0; i < N; i++ ){
	    this[i] = new Thread();
	  }

	  this.length = N;
	};

	var fabfn = Fabric.prototype; // short alias

	util.extend(fabfn, {

	  instanceString: function(){ return 'fabric'; },

	  // require fn in all threads
	  require: function( fn, as ){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.require( fn, as );
	    }

	    return this;
	  },

	  // get a random thread
	  random: function(){
	    var i = Math.round( (this.length - 1) * Math.random() );
	    var thread = this[i];

	    return thread;
	  },

	  // run on random thread
	  run: function( fn ){
	    var pass = this._private.pass.shift();

	    return this.random().pass( pass ).run( fn );
	  },

	  // sends a random thread a message
	  message: function( m ){
	    return this.random().message( m );
	  },

	  // send all threads a message
	  broadcast: function( m ){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.message( m );
	    }

	    return this; // chaining
	  },

	  // stop all threads
	  stop: function(){
	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];

	      thread.stop();
	    }

	    return this; // chaining
	  },

	  // pass data to be used with .spread() etc.
	  pass: function( data ){
	    var pass = this._private.pass;

	    if( is.array(data) ){
	      pass.push( data );
	    } else {
	      throw 'Only arrays may be used with fabric.pass()';
	    }

	    return this; // chaining
	  },

	  spreadSize: function(){
	    var subsize =  Math.ceil( this._private.pass[0].length / this.length );

	    subsize = Math.max( 1, subsize ); // don't pass less than one ele to each thread

	    return subsize;
	  },

	  // split the data into slices to spread the data equally among threads
	  spread: function( fn ){
	    var self = this;
	    var _p = self._private;
	    var subsize = self.spreadSize(); // number of pass eles to handle in each thread
	    var pass = _p.pass.shift().concat([]); // keep a copy
	    var runPs = [];

	    for( var i = 0; i < this.length; i++ ){
	      var thread = this[i];
	      var slice = pass.splice( 0, subsize );

	      var runP = thread.pass( slice ).run( fn );

	      runPs.push( runP );

	      var doneEarly = pass.length === 0;
	      if( doneEarly ){ break; }
	    }

	    return Promise.all( runPs ).then(function( thens ){
	      var postpass = [];
	      var p = 0;

	      // fill postpass with the total result joined from all threads
	      for( var i = 0; i < thens.length; i++ ){
	        var then = thens[i]; // array result from thread i

	        for( var j = 0; j < then.length; j++ ){
	          var t = then[j]; // array element

	          postpass[ p++ ] = t;
	        }
	      }

	      return postpass;
	    });
	  },

	  // parallel version of array.map()
	  map: function( fn ){
	    var self = this;

	    self.require( fn, '_$_$_fabmap' );

	    return self.spread(function( split ){
	      var mapped = [];
	      var origResolve = resolve; // jshint ignore:line

	      resolve = function( val ){ // jshint ignore:line
	        mapped.push( val );
	      };

	      for( var i = 0; i < split.length; i++ ){
	        var oldLen = mapped.length;
	        var ret = _$_$_fabmap( split[i] ); // jshint ignore:line
	        var nothingInsdByResolve = oldLen === mapped.length;

	        if( nothingInsdByResolve ){
	          mapped.push( ret );
	        }
	      }

	      resolve = origResolve; // jshint ignore:line

	      return mapped;
	    });

	  },

	  // parallel version of array.filter()
	  filter: function( fn ){
	    var _p = this._private;
	    var pass = _p.pass[0];

	    return this.map( fn ).then(function( include ){
	      var ret = [];

	      for( var i = 0; i < pass.length; i++ ){
	        var datum = pass[i];
	        var incDatum = include[i];

	        if( incDatum ){
	          ret.push( datum );
	        }
	      }

	      return ret;
	    });
	  },

	  // sorts the passed array using a divide and conquer strategy
	  sort: function( cmp ){
	    var self = this;
	    var P = this._private.pass[0].length;
	    var subsize = this.spreadSize();

	    cmp = cmp || function( a, b ){ // default comparison function
	      if( a < b ){
	        return -1;
	      } else if( a > b ){
	        return 1;
	      }

	      return 0;
	    };

	    self.require( cmp, '_$_$_cmp' );

	    return self.spread(function( split ){ // sort each split normally
	      var sortedSplit = split.sort( _$_$_cmp ); // jshint ignore:line
	      resolve( sortedSplit ); // jshint ignore:line

	    }).then(function( joined ){
	      // do all the merging in the main thread to minimise data transfer

	      // TODO could do merging in separate threads but would incur add'l cost of data transfer
	      // for each level of the merge

	      var merge = function( i, j, max ){
	        // don't overflow array
	        j = Math.min( j, P );
	        max = Math.min( max, P );

	        // left and right sides of merge
	        var l = i;
	        var r = j;

	        var sorted = [];

	        for( var k = l; k < max; k++ ){

	          var eleI = joined[i];
	          var eleJ = joined[j];

	          if( i < r && ( j >= max || cmp(eleI, eleJ) <= 0 ) ){
	            sorted.push( eleI );
	            i++;
	          } else {
	            sorted.push( eleJ );
	            j++;
	          }

	        }

	        // in the array proper, put the sorted values
	        for( var k = 0; k < sorted.length; k++ ){ // kth sorted item
	          var index = l + k;

	          joined[ index ] = sorted[k];
	        }
	      };

	      for( var splitL = subsize; splitL < P; splitL *= 2 ){ // merge until array is "split" as 1

	        for( var i = 0; i < P; i += 2*splitL ){
	          merge( i, i + splitL, i + 2*splitL );
	        }

	      }

	      return joined;
	    });
	  }


	});

	var defineRandomPasser = function( opts ){
	  opts = opts || {};

	  return function( fn, arg1 ){
	    var pass = this._private.pass.shift();

	    return this.random().pass( pass )[ opts.threadFn ]( fn, arg1 );
	  };
	};

	util.extend(fabfn, {
	  randomMap: defineRandomPasser({ threadFn: 'map' }),

	  reduce: defineRandomPasser({ threadFn: 'reduce' }),

	  reduceRight: defineRandomPasser({ threadFn: 'reduceRight' })
	});

	// aliases
	var fn = fabfn;
	fn.promise = fn.run;
	fn.terminate = fn.halt = fn.stop;
	fn.include = fn.require;

	// pull in event apis
	util.extend(fabfn, {
	  on: define.on(),
	  one: define.on({ unbindSelfOnTrigger: true }),
	  off: define.off(),
	  trigger: define.trigger()
	});

	define.eventAliasesOn( fabfn );

	module.exports = Fabric;

	},{"./define":41,"./is":77,"./promise":80,"./thread":92,"./util":94,"os":undefined}],75:[function(_dereq_,module,exports){
	/*!
	Ported by Xueqiao Xu <xueqiaoxu@gmail.com>;

	PSF LICENSE AGREEMENT FOR PYTHON 2.7.2

	1. This LICENSE AGREEMENT is between the Python Software Foundation (“PSF”), and the Individual or Organization (“Licensee”) accessing and otherwise using Python 2.7.2 software in source or binary form and its associated documentation.
	2. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 2.7.2 alone or in any derivative version, provided, however, that PSF’s License Agreement and PSF’s notice of copyright, i.e., “Copyright © 2001-2012 Python Software Foundation; All Rights Reserved” are retained in Python 2.7.2 alone or in any derivative version prepared by Licensee.
	3. In the event Licensee prepares a derivative work that is based on or incorporates Python 2.7.2 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 2.7.2.
	4. PSF is making Python 2.7.2 available to Licensee on an “AS IS” basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.7.2 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.
	5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 2.7.2 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.7.2, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.
	6. This License Agreement will automatically terminate upon a material breach of its terms and conditions.
	7. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party.
	8. By copying, installing or otherwise using Python 2.7.2, Licensee agrees to be bound by the terms and conditions of this License Agreement.
	*/

	'use strict';
	/* jshint ignore:start */

	// Generated by CoffeeScript 1.8.0
	(function() {
	  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

	  floor = Math.floor, min = Math.min;


	  /*
	  Default comparison function to be used
	   */

	  defaultCmp = function(x, y) {
	    if (x < y) {
	      return -1;
	    }
	    if (x > y) {
	      return 1;
	    }
	    return 0;
	  };


	  /*
	  Insert item x in list a, and keep it sorted assuming a is sorted.

	  If x is already in a, insert it to the right of the rightmost x.

	  Optional args lo (default 0) and hi (default a.length) bound the slice
	  of a to be searched.
	   */

	  insort = function(a, x, lo, hi, cmp) {
	    var mid;
	    if (lo == null) {
	      lo = 0;
	    }
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (lo < 0) {
	      throw new Error('lo must be non-negative');
	    }
	    if (hi == null) {
	      hi = a.length;
	    }
	    while (lo < hi) {
	      mid = floor((lo + hi) / 2);
	      if (cmp(x, a[mid]) < 0) {
	        hi = mid;
	      } else {
	        lo = mid + 1;
	      }
	    }
	    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
	  };


	  /*
	  Push item onto heap, maintaining the heap invariant.
	   */

	  heappush = function(array, item, cmp) {
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    array.push(item);
	    return _siftdown(array, 0, array.length - 1, cmp);
	  };


	  /*
	  Pop the smallest item off the heap, maintaining the heap invariant.
	   */

	  heappop = function(array, cmp) {
	    var lastelt, returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    lastelt = array.pop();
	    if (array.length) {
	      returnitem = array[0];
	      array[0] = lastelt;
	      _siftup(array, 0, cmp);
	    } else {
	      returnitem = lastelt;
	    }
	    return returnitem;
	  };


	  /*
	  Pop and return the current smallest value, and add the new item.

	  This is more efficient than heappop() followed by heappush(), and can be
	  more appropriate when using a fixed size heap. Note that the value
	  returned may be larger than item! That constrains reasonable use of
	  this routine unless written as part of a conditional replacement:
	      if item > array[0]
	        item = heapreplace(array, item)
	   */

	  heapreplace = function(array, item, cmp) {
	    var returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    returnitem = array[0];
	    array[0] = item;
	    _siftup(array, 0, cmp);
	    return returnitem;
	  };


	  /*
	  Fast version of a heappush followed by a heappop.
	   */

	  heappushpop = function(array, item, cmp) {
	    var _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (array.length && cmp(array[0], item) < 0) {
	      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
	      _siftup(array, 0, cmp);
	    }
	    return item;
	  };


	  /*
	  Transform list into a heap, in-place, in O(array.length) time.
	   */

	  heapify = function(array, cmp) {
	    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    _ref1 = (function() {
	      _results1 = [];
	      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
	      return _results1;
	    }).apply(this).reverse();
	    _results = [];
	    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	      i = _ref1[_i];
	      _results.push(_siftup(array, i, cmp));
	    }
	    return _results;
	  };


	  /*
	  Update the position of the given item in the heap.
	  This function should be called every time the item is being modified.
	   */

	  updateItem = function(array, item, cmp) {
	    var pos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    pos = array.indexOf(item);
	    if (pos === -1) {
	      return;
	    }
	    _siftdown(array, 0, pos, cmp);
	    return _siftup(array, pos, cmp);
	  };


	  /*
	  Find the n largest elements in a dataset.
	   */

	  nlargest = function(array, n, cmp) {
	    var elem, result, _i, _len, _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    result = array.slice(0, n);
	    if (!result.length) {
	      return result;
	    }
	    heapify(result, cmp);
	    _ref = array.slice(n);
	    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	      elem = _ref[_i];
	      heappushpop(result, elem, cmp);
	    }
	    return result.sort(cmp).reverse();
	  };


	  /*
	  Find the n smallest elements in a dataset.
	   */

	  nsmallest = function(array, n, cmp) {
	    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (n * 10 <= array.length) {
	      result = array.slice(0, n).sort(cmp);
	      if (!result.length) {
	        return result;
	      }
	      los = result[result.length - 1];
	      _ref = array.slice(n);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        elem = _ref[_i];
	        if (cmp(elem, los) < 0) {
	          insort(result, elem, 0, null, cmp);
	          result.pop();
	          los = result[result.length - 1];
	        }
	      }
	      return result;
	    }
	    heapify(array, cmp);
	    _results = [];
	    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
	      _results.push(heappop(array, cmp));
	    }
	    return _results;
	  };

	  _siftdown = function(array, startpos, pos, cmp) {
	    var newitem, parent, parentpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    newitem = array[pos];
	    while (pos > startpos) {
	      parentpos = (pos - 1) >> 1;
	      parent = array[parentpos];
	      if (cmp(newitem, parent) < 0) {
	        array[pos] = parent;
	        pos = parentpos;
	        continue;
	      }
	      break;
	    }
	    return array[pos] = newitem;
	  };

	  _siftup = function(array, pos, cmp) {
	    var childpos, endpos, newitem, rightpos, startpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    endpos = array.length;
	    startpos = pos;
	    newitem = array[pos];
	    childpos = 2 * pos + 1;
	    while (childpos < endpos) {
	      rightpos = childpos + 1;
	      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
	        childpos = rightpos;
	      }
	      array[pos] = array[childpos];
	      pos = childpos;
	      childpos = 2 * pos + 1;
	    }
	    array[pos] = newitem;
	    return _siftdown(array, startpos, pos, cmp);
	  };

	  Heap = (function() {
	    Heap.push = heappush;

	    Heap.pop = heappop;

	    Heap.replace = heapreplace;

	    Heap.pushpop = heappushpop;

	    Heap.heapify = heapify;

	    Heap.updateItem = updateItem;

	    Heap.nlargest = nlargest;

	    Heap.nsmallest = nsmallest;

	    function Heap(cmp) {
	      this.cmp = cmp != null ? cmp : defaultCmp;
	      this.nodes = [];
	    }

	    Heap.prototype.push = function(x) {
	      return heappush(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pop = function() {
	      return heappop(this.nodes, this.cmp);
	    };

	    Heap.prototype.peek = function() {
	      return this.nodes[0];
	    };

	    Heap.prototype.contains = function(x) {
	      return this.nodes.indexOf(x) !== -1;
	    };

	    Heap.prototype.replace = function(x) {
	      return heapreplace(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pushpop = function(x) {
	      return heappushpop(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.heapify = function() {
	      return heapify(this.nodes, this.cmp);
	    };

	    Heap.prototype.updateItem = function(x) {
	      return updateItem(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.clear = function() {
	      return this.nodes = [];
	    };

	    Heap.prototype.empty = function() {
	      return this.nodes.length === 0;
	    };

	    Heap.prototype.size = function() {
	      return this.nodes.length;
	    };

	    Heap.prototype.clone = function() {
	      var heap;
	      heap = new Heap();
	      heap.nodes = this.nodes.slice(0);
	      return heap;
	    };

	    Heap.prototype.toArray = function() {
	      return this.nodes.slice(0);
	    };

	    Heap.prototype.insert = Heap.prototype.push;

	    Heap.prototype.top = Heap.prototype.peek;

	    Heap.prototype.front = Heap.prototype.peek;

	    Heap.prototype.has = Heap.prototype.contains;

	    Heap.prototype.copy = Heap.prototype.clone;

	    return Heap;

	  })();

	  (function(root, factory) {
	    if (typeof define === 'function' && define.amd) {
	      return define([], factory);
	    } else if (typeof exports === 'object') {
	      return module.exports = factory();
	    } else {
	      return root.Heap = factory();
	    }
	  })(this, function() {
	    return Heap;
	  });

	}).call(this);

	/* jshint ignore:end */

	},{}],76:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('./window');
	var is = _dereq_('./is');
	var Core = _dereq_('./core');
	var extension = _dereq_('./extension');
	var registerJquery = _dereq_('./jquery-plugin');
	var Stylesheet = _dereq_('./stylesheet');
	var Thread = _dereq_('./thread');
	var Fabric = _dereq_('./fabric');

	var cytoscape = function( options ){ // jshint ignore:line
	  // if no options specified, use default
	  if( options === undefined ){
	    options = {};
	  }

	  // create instance
	  if( is.plainObject( options ) ){
	    return new Core( options );
	  }

	  // allow for registration of extensions
	  else if( is.string( options ) ) {
	    return extension.apply(extension, arguments);
	  }
	};

	// replaced by build system
	cytoscape.version = '2.6.8';

	// try to register w/ jquery
	if( window && window.jQuery ){
	  registerJquery( window.jQuery, cytoscape );
	}

	// expose register api
	cytoscape.registerJquery = function( jQuery ){
	  registerJquery( jQuery, cytoscape );
	};

	// expose public apis (mostly for extensions)
	cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;
	cytoscape.thread = cytoscape.Thread = Thread;
	cytoscape.fabric = cytoscape.Fabric = Fabric;

	module.exports = cytoscape;

	},{"./core":34,"./extension":43,"./fabric":74,"./is":77,"./jquery-plugin":78,"./stylesheet":91,"./thread":92,"./window":100}],77:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('./window');
	var navigator = window ? window.navigator : null;

	var typeofstr = typeof '';
	var typeofobj = typeof {};
	var typeoffn = typeof function(){};
	var typeofhtmlele = typeof HTMLElement;

	var instanceStr = function( obj ){
	  return obj && obj.instanceString && is.fn( obj.instanceString ) ? obj.instanceString() : null;
	};

	var is = {
	  defined: function(obj){
	    return obj != null; // not undefined or null
	  },

	  string: function(obj){
	    return obj != null && typeof obj == typeofstr;
	  },

	  fn: function(obj){
	    return obj != null && typeof obj === typeoffn;
	  },

	  array: function(obj){
	    return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
	  },

	  plainObject: function(obj){
	    return obj != null && typeof obj === typeofobj && !is.array(obj) && obj.constructor === Object;
	  },

	  object: function(obj){
	    return obj != null && typeof obj === typeofobj;
	  },

	  number: function(obj){
	    return obj != null && typeof obj === typeof 1 && !isNaN(obj);
	  },

	  integer: function( obj ){
	    return is.number(obj) && Math.floor(obj) === obj;
	  },

	  bool: function(obj){
	    return obj != null && typeof obj === typeof true;
	  },

	  htmlElement: function(obj){
	    if( 'undefined' === typeofhtmlele ){
	      return undefined;
	    } else {
	      return null != obj && obj instanceof HTMLElement;
	    }
	  },

	  elementOrCollection: function(obj){
	    return is.element(obj) || is.collection(obj);
	  },

	  element: function(obj){
	    return instanceStr(obj) === 'collection' && obj._private.single;
	  },

	  collection: function(obj){
	    return instanceStr(obj) === 'collection' && !obj._private.single;
	  },

	  core: function(obj){
	    return instanceStr(obj) === 'core';
	  },

	  style: function(obj){
	    return instanceStr(obj) === 'style';
	  },

	  stylesheet: function(obj){
	    return instanceStr(obj) === 'stylesheet';
	  },

	  event: function(obj){
	    return instanceStr(obj) === 'event';
	  },

	  thread: function(obj){
	    return instanceStr(obj) === 'thread';
	  },

	  fabric: function(obj){
	    return instanceStr(obj) === 'fabric';
	  },

	  emptyString: function(obj){
	    if( !obj ){ // null is empty
	      return true;
	    } else if( is.string(obj) ){
	      if( obj === '' || obj.match(/^\s+$/) ){
	        return true; // empty string is empty
	      }
	    }

	    return false; // otherwise, we don't know what we've got
	  },

	  nonemptyString: function(obj){
	    if( obj && is.string(obj) && obj !== '' && !obj.match(/^\s+$/) ){
	      return true;
	    }

	    return false;
	  },

	  domElement: function(obj){
	    if( typeof HTMLElement === 'undefined' ){
	      return false; // we're not in a browser so it doesn't matter
	    } else {
	      return obj instanceof HTMLElement;
	    }
	  },

	  boundingBox: function(obj){
	    return is.plainObject(obj) &&
	      is.number(obj.x1) && is.number(obj.x2) &&
	      is.number(obj.y1) && is.number(obj.y2)
	    ;
	  },

	  promise: function(obj){
	    return is.object(obj) && is.fn(obj.then);
	  },

	  touch: function(){
	    return window && ( ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch );
	  },

	  gecko: function(){
	    return typeof InstallTrigger !== 'undefined' || ('MozAppearance' in document.documentElement.style);
	  },

	  webkit: function(){
	    return typeof webkitURL !== 'undefined' || ('WebkitAppearance' in document.documentElement.style);
	  },

	  chromium: function(){
	    return typeof chrome !== 'undefined';
	  },

	  khtml: function(){
	    return navigator && navigator.vendor.match(/kde/i); // probably a better way to detect this...
	  },

	  khtmlEtc: function(){
	    return is.khtml() || is.webkit() || is.chromium();
	  },

	  ms: function(){
	     return navigator && navigator.userAgent.match(/msie|trident|edge/i); // probably a better way to detect this...
	  },

	  windows: function(){
	    return navigator && navigator.appVersion.match(/Win/i);
	  },

	  mac: function(){
	    return navigator && navigator.appVersion.match(/Mac/i);
	  },

	  linux: function(){
	    return navigator && navigator.appVersion.match(/Linux/i);
	  },

	  unix: function(){
	    return navigator && navigator.appVersion.match(/X11/i);
	  }
	};

	module.exports = is;

	},{"./window":100}],78:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('./is');

	var cyReg = function( $ele ){
	  var d = $ele[0]._cyreg = $ele[0]._cyreg || {};

	  return d;
	};

	var registerJquery = function( $, cytoscape ){
	  if( !$ ){ return; } // no jquery => don't need this

	  if( $.fn.cytoscape ){ return; } // already registered

	  // allow calls on a jQuery selector by proxying calls to $.cytoscape
	  // e.g. $("#foo").cytoscape(options) => $.cytoscape(options) on #foo
	  $.fn.cytoscape = function(opts){
	    var $this = $(this);

	    // get object
	    if( opts === 'get' ){
	      return cyReg( $this ).cy;
	    }

	    // bind to ready
	    else if( is.fn(opts) ){

	      var ready = opts;
	      var cy = cyReg( $this ).cy;

	      if( cy && cy.isReady() ){ // already ready so just trigger now
	        cy.trigger('ready', [], ready);

	      } else { // not yet ready, so add to readies list
	        var data = cyReg( $this );
	        var readies = data.readies = data.readies || [];

	        readies.push( ready );
	      }

	    }

	    // proxy to create instance
	    else if( is.plainObject(opts) ){
	      return $this.each(function(){
	        var options = $.extend({}, opts, {
	          container: $(this)[0]
	        });

	        cytoscape(options);
	      });
	    }
	  };

	  // allow access to the global cytoscape object under jquery for legacy reasons
	  $.cytoscape = cytoscape;

	  // use short alias (cy) if not already defined
	  if( $.fn.cy == null && $.cy == null ){
	    $.fn.cy = $.fn.cytoscape;
	    $.cy = $.cytoscape;
	  }
	};

	module.exports = registerJquery;

	},{"./is":77}],79:[function(_dereq_,module,exports){
	'use strict';

	var math = {};

	math.signum = function(x){
	  if( x > 0 ){
	    return 1;
	  } else if( x < 0 ){
	    return -1;
	  } else {
	    return 0;
	  }
	};

	math.distance = function( p1, p2 ){
	  return Math.sqrt( math.sqDistance(p1, p2) );
	};

	math.sqDistance = function( p1, p2 ){
	  var dx = p2.x - p1.x;
	  var dy = p2.y - p1.y;

	  return dx*dx + dy*dy;
	};

	// from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves
	math.qbezierAt = function(p0, p1, p2, t){
	  return (1 - t)*(1 - t)*p0 + 2*(1 - t)*t*p1 + t*t*p2;
	};

	math.qbezierPtAt = function(p0, p1, p2, t){
	  return {
	    x: math.qbezierAt( p0.x, p1.x, p2.x, t ),
	    y: math.qbezierAt( p0.y, p1.y, p2.y, t )
	  };
	};

	// makes a full bb (x1, y1, x2, y2, w, h) from implicit params
	math.makeBoundingBox = function( bb ){
	  if( bb.x1 != null && bb.y1 != null ){
	    if( bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1 ){
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x2,
	        y2: bb.y2,
	        w: bb.x2 - bb.x1,
	        h: bb.y2 - bb.y1
	      };
	    } else if( bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0 ){
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x1 + bb.w,
	        y2: bb.y1 + bb.h,
	        w: bb.w,
	        h: bb.h
	      };
	    }
	  }
	};

	math.boundingBoxesIntersect = function( bb1, bb2 ){
	  // case: one bb to right of other
	  if( bb1.x1 > bb2.x2 ){ return false; }
	  if( bb2.x1 > bb1.x2 ){ return false; }

	  // case: one bb to left of other
	  if( bb1.x2 < bb2.x1 ){ return false; }
	  if( bb2.x2 < bb1.x1 ){ return false; }

	  // case: one bb above other
	  if( bb1.y2 < bb2.y1 ){ return false; }
	  if( bb2.y2 < bb1.y1 ){ return false; }

	  // case: one bb below other
	  if( bb1.y1 > bb2.y2 ){ return false; }
	  if( bb2.y1 > bb1.y2 ){ return false; }

	  // otherwise, must have some overlap
	  return true;
	};

	math.inBoundingBox = function( bb, x, y ){
	  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
	};

	math.pointInBoundingBox = function( bb, pt ){
	  return this.inBoundingBox( bb, pt.x, pt.y );
	};

	math.roundRectangleIntersectLine = function(
	  x, y, nodeX, nodeY, width, height, padding) {

	  var cornerRadius = this.getRoundRectangleRadius(width, height);

	  var halfWidth = width / 2;
	  var halfHeight = height / 2;

	  // Check intersections with straight line segments
	  var straightLineIntersections;

	  // Top segment, left to right
	  {
	    var topStartX = nodeX - halfWidth + cornerRadius - padding;
	    var topStartY = nodeY - halfHeight - padding;
	    var topEndX = nodeX + halfWidth - cornerRadius + padding;
	    var topEndY = topStartY;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Right segment, top to bottom
	  {
	    var rightStartX = nodeX + halfWidth + padding;
	    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
	    var rightEndX = rightStartX;
	    var rightEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Bottom segment, left to right
	  {
	    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
	    var bottomStartY = nodeY + halfHeight + padding;
	    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
	    var bottomEndY = bottomStartY;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Left segment, top to bottom
	  {
	    var leftStartX = nodeX - halfWidth - padding;
	    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
	    var leftEndX = leftStartX;
	    var leftEndY = nodeY + halfHeight - cornerRadius + padding;

	    straightLineIntersections = this.finiteLinesIntersect(
	      x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  }

	  // Check intersections with arc segments
	  var arcIntersections;

	  // Top Left
	  {
	    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      topLeftCenterX, topLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] <= topLeftCenterX
	      && arcIntersections[1] <= topLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Top Right
	  {
	    var topRightCenterX = nodeX + halfWidth - cornerRadius;
	    var topRightCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      topRightCenterX, topRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] >= topRightCenterX
	      && arcIntersections[1] <= topRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Right
	  {
	    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
	    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] >= bottomRightCenterX
	      && arcIntersections[1] >= bottomRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  // Bottom Left
	  {
	    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = this.intersectLineCircle(
	      x, y, nodeX, nodeY,
	      bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

	    // Ensure the intersection is on the desired quarter of the circle
	    if (arcIntersections.length > 0
	      && arcIntersections[0] <= bottomLeftCenterX
	      && arcIntersections[1] >= bottomLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }

	  return []; // if nothing
	};

	math.inLineVicinity = function(x, y, lx1, ly1, lx2, ly2, tolerance){
	  var t = tolerance;

	  var x1 = Math.min(lx1, lx2);
	  var x2 = Math.max(lx1, lx2);
	  var y1 = Math.min(ly1, ly2);
	  var y2 = Math.max(ly1, ly2);

	  return x1 - t <= x && x <= x2 + t
	    && y1 - t <= y && y <= y2 + t;
	};

	math.inBezierVicinity = function(
	  x, y, x1, y1, x2, y2, x3, y3, tolerance) {

	  var bb = {
	    x1: Math.min( x1, x3, x2 ) - tolerance,
	    x2: Math.max( x1, x3, x2 ) + tolerance,
	    y1: Math.min( y1, y3, y2 ) - tolerance,
	    y2: Math.max( y1, y3, y2 ) + tolerance
	  };

	  // if outside the rough bounding box for the bezier, then it can't be a hit
	  if( x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2 ){
	    // console.log('bezier out of rough bb')
	    return false;
	  } else {
	    // console.log('do more expensive check');
	    return true;
	  }

	};

	math.solveCubic = function(a, b, c, d, result) {

	  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
	  // r is the real component, i is the imaginary component

	  // An implementation of the Cardano method from the year 1545
	  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots

	  b /= a;
	  c /= a;
	  d /= a;

	  var discriminant, q, r, dum1, s, t, term1, r13;

	  q = (3.0 * c - (b * b)) / 9.0;
	  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
	  r /= 54.0;

	  discriminant = q * q * q + r * r;
	  result[1] = 0;
	  term1 = (b / 3.0);

	  if (discriminant > 0) {
	    s = r + Math.sqrt(discriminant);
	    s = ((s < 0) ? -Math.pow(-s, (1.0 / 3.0)) : Math.pow(s, (1.0 / 3.0)));
	    t = r - Math.sqrt(discriminant);
	    t = ((t < 0) ? -Math.pow(-t, (1.0 / 3.0)) : Math.pow(t, (1.0 / 3.0)));
	    result[0] = -term1 + s + t;
	    term1 += (s + t) / 2.0;
	    result[4] = result[2] = -term1;
	    term1 = Math.sqrt(3.0) * (-t + s) / 2;
	    result[3] = term1;
	    result[5] = -term1;
	    return;
	  }

	  result[5] = result[3] = 0;

	  if (discriminant === 0) {
	    r13 = ((r < 0) ? -Math.pow(-r, (1.0 / 3.0)) : Math.pow(r, (1.0 / 3.0)));
	    result[0] = -term1 + 2.0 * r13;
	    result[4] = result[2] = -(r13 + term1);
	    return;
	  }

	  q = -q;
	  dum1 = q * q * q;
	  dum1 = Math.acos(r / Math.sqrt(dum1));
	  r13 = 2.0 * Math.sqrt(q);
	  result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
	  result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
	  result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);

	  return;
	};

	math.sqDistanceToQuadraticBezier = function(
	  x, y, x1, y1, x2, y2, x3, y3) {

	  // Find minimum distance by using the minimum of the distance
	  // function between the given point and the curve

	  // This gives the coefficients of the resulting cubic equation
	  // whose roots tell us where a possible minimum is
	  // (Coefficients are divided by 4)

	  var a = 1.0 * x1*x1 - 4*x1*x2 + 2*x1*x3 + 4*x2*x2 - 4*x2*x3 + x3*x3
	    + y1*y1 - 4*y1*y2 + 2*y1*y3 + 4*y2*y2 - 4*y2*y3 + y3*y3;

	  var b = 1.0 * 9*x1*x2 - 3*x1*x1 - 3*x1*x3 - 6*x2*x2 + 3*x2*x3
	    + 9*y1*y2 - 3*y1*y1 - 3*y1*y3 - 6*y2*y2 + 3*y2*y3;

	  var c = 1.0 * 3*x1*x1 - 6*x1*x2 + x1*x3 - x1*x + 2*x2*x2 + 2*x2*x - x3*x
	    + 3*y1*y1 - 6*y1*y2 + y1*y3 - y1*y + 2*y2*y2 + 2*y2*y - y3*y;

	  var d = 1.0 * x1*x2 - x1*x1 + x1*x - x2*x
	    + y1*y2 - y1*y1 + y1*y - y2*y;

	  // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

	  var roots = [];

	  // Use the cubic solving algorithm
	  this.solveCubic(a, b, c, d, roots);

	  var zeroThreshold = 0.0000001;

	  var params = [];

	  for (var index = 0; index < 6; index += 2) {
	    if (Math.abs(roots[index + 1]) < zeroThreshold
	        && roots[index] >= 0
	        && roots[index] <= 1.0) {
	      params.push(roots[index]);
	    }
	  }

	  params.push(1.0);
	  params.push(0.0);

	  var minDistanceSquared = -1;
	  var closestParam;

	  var curX, curY, distSquared;
	  for (var i = 0; i < params.length; i++) {
	    curX = Math.pow(1.0 - params[i], 2.0) * x1
	      + 2.0 * (1 - params[i]) * params[i] * x2
	      + params[i] * params[i] * x3;

	    curY = Math.pow(1 - params[i], 2.0) * y1
	      + 2 * (1.0 - params[i]) * params[i] * y2
	      + params[i] * params[i] * y3;

	    distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);
	    // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));
	    if (minDistanceSquared >= 0) {
	      if (distSquared < minDistanceSquared) {
	        minDistanceSquared = distSquared;
	        closestParam = params[i];
	      }
	    } else {
	      minDistanceSquared = distSquared;
	      closestParam = params[i];
	    }
	  }

	  return minDistanceSquared;
	};

	math.sqDistanceToFiniteLine = function(x, y, x1, y1, x2, y2) {
	  var offset = [x - x1, y - y1];
	  var line = [x2 - x1, y2 - y1];

	  var lineSq = line[0] * line[0] + line[1] * line[1];
	  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];

	  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
	  var adjSq = dotProduct * dotProduct / lineSq;

	  if (dotProduct < 0) {
	    return hypSq;
	  }

	  if (adjSq > lineSq) {
	    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
	  }

	  return hypSq - adjSq;
	};

	math.pointInsidePolygonPoints = function(x, y, points){
	  var x1, y1, x2, y2;
	  var y3;

	  // Intersect with vertical line through (x, y)
	  var up = 0;
	  var down = 0;
	  for (var i = 0; i < points.length / 2; i++) {

	    x1 = points[i * 2];
	    y1 = points[i * 2 + 1];

	    if (i + 1 < points.length / 2) {
	      x2 = points[(i + 1) * 2];
	      y2 = points[(i + 1) * 2 + 1];
	    } else {
	      x2 = points[(i + 1 - points.length / 2) * 2];
	      y2 = points[(i + 1 - points.length / 2) * 2 + 1];
	    }

	    if (x1 == x && x2 == x) {

	    } else if ((x1 >= x && x >= x2)
	      || (x1 <= x && x <= x2)) {

	      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

	      if (y3 > y) {
	        up++;
	      }

	      if (y3 < y) {
	        down++;
	      }

	    } else {
	      continue;
	    }

	  }

	  if (up % 2 === 0) {
	    return false;
	  } else {
	    return true;
	  }
	};

	math.pointInsidePolygon = function(
	  x, y, basePoints, centerX, centerY, width, height, direction, padding) {

	  //var direction = arguments[6];
	  var transformedPoints = new Array(basePoints.length);

	  // Gives negative angle
	  var angle;

	  if( direction[0] != null ){
	    angle = Math.atan(direction[1] / direction[0]);

	    if (direction[0] < 0) {
	      angle = angle + Math.PI / 2;
	    } else {
	      angle = -angle - Math.PI / 2;
	    }
	  } else {
	    angle = direction;
	  }

	  var cos = Math.cos(-angle);
	  var sin = Math.sin(-angle);

	  //    console.log("base: " + basePoints);
	  for (var i = 0; i < transformedPoints.length / 2; i++) {
	    transformedPoints[i * 2] =
	      width / 2 * (basePoints[i * 2] * cos
	        - basePoints[i * 2 + 1] * sin);

	    transformedPoints[i * 2 + 1] =
	      height / 2 * (basePoints[i * 2 + 1] * cos
	        + basePoints[i * 2] * sin);

	    transformedPoints[i * 2] += centerX;
	    transformedPoints[i * 2 + 1] += centerY;
	  }

	  var points;

	  if (padding > 0) {
	    var expandedLineSet = this.expandPolygon(
	      transformedPoints,
	      -padding);

	    points = this.joinLines(expandedLineSet);
	  } else {
	    points = transformedPoints;
	  }

	  return math.pointInsidePolygonPoints( x, y, points );
	};

	math.joinLines = function(lineSet) {

	  var vertices = new Array(lineSet.length / 2);

	  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
	  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

	  for (var i = 0; i < lineSet.length / 4; i++) {
	    currentLineStartX = lineSet[i * 4];
	    currentLineStartY = lineSet[i * 4 + 1];
	    currentLineEndX = lineSet[i * 4 + 2];
	    currentLineEndY = lineSet[i * 4 + 3];

	    if (i < lineSet.length / 4 - 1) {
	      nextLineStartX = lineSet[(i + 1) * 4];
	      nextLineStartY = lineSet[(i + 1) * 4 + 1];
	      nextLineEndX = lineSet[(i + 1) * 4 + 2];
	      nextLineEndY = lineSet[(i + 1) * 4 + 3];
	    } else {
	      nextLineStartX = lineSet[0];
	      nextLineStartY = lineSet[1];
	      nextLineEndX = lineSet[2];
	      nextLineEndY = lineSet[3];
	    }

	    var intersection = this.finiteLinesIntersect(
	      currentLineStartX, currentLineStartY,
	      currentLineEndX, currentLineEndY,
	      nextLineStartX, nextLineStartY,
	      nextLineEndX, nextLineEndY,
	      true);

	    vertices[i * 2] = intersection[0];
	    vertices[i * 2 + 1] = intersection[1];
	  }

	  return vertices;
	};

	math.expandPolygon = function(points, pad) {

	  var expandedLineSet = new Array(points.length * 2);

	  var currentPointX, currentPointY, nextPointX, nextPointY;

	  for (var i = 0; i < points.length / 2; i++) {
	    currentPointX = points[i * 2];
	    currentPointY = points[i * 2 + 1];

	    if (i < points.length / 2 - 1) {
	      nextPointX = points[(i + 1) * 2];
	      nextPointY = points[(i + 1) * 2 + 1];
	    } else {
	      nextPointX = points[0];
	      nextPointY = points[1];
	    }

	    // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]

	    // Assume CCW polygon winding

	    var offsetX = (nextPointY - currentPointY);
	    var offsetY = -(nextPointX - currentPointX);

	    // Normalize
	    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
	    var normalizedOffsetX = offsetX / offsetLength;
	    var normalizedOffsetY = offsetY / offsetLength;

	    expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
	    expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
	  }

	  return expandedLineSet;
	};

	math.intersectLineEllipse = function(
	  x, y, centerX, centerY, ellipseWradius, ellipseHradius) {

	  var dispX = centerX - x;
	  var dispY = centerY - y;

	  dispX /= ellipseWradius;
	  dispY /= ellipseHradius;

	  var len = Math.sqrt(dispX * dispX + dispY * dispY);

	  var newLength = len - 1;

	  if (newLength < 0) {
	    return [];
	  }

	  var lenProportion = newLength / len;

	  return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
	};

	// Returns intersections of increasing distance from line's start point
	math.intersectLineCircle = function(
	  x1, y1, x2, y2, centerX, centerY, radius) {

	  // Calculate d, direction vector of line
	  var d = [x2 - x1, y2 - y1]; // Direction vector of line
	  var c = [centerX, centerY]; // Center of circle
	  var f = [x1 - centerX, y1 - centerY];

	  var a = d[0] * d[0] + d[1] * d[1];
	  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
	  var c = (f[0] * f[0] + f[1] * f[1]) - radius * radius ;

	  var discriminant = b*b-4*a*c;

	  if (discriminant < 0) {
	    return [];
	  }

	  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
	  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);

	  var tMin = Math.min(t1, t2);
	  var tMax = Math.max(t1, t2);
	  var inRangeParams = [];

	  if (tMin >= 0 && tMin <= 1) {
	    inRangeParams.push(tMin);
	  }

	  if (tMax >= 0 && tMax <= 1) {
	    inRangeParams.push(tMax);
	  }

	  if (inRangeParams.length === 0) {
	    return [];
	  }

	  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
	  var nearIntersectionY = inRangeParams[0] * d[1] + y1;

	  if (inRangeParams.length > 1) {

	    if (inRangeParams[0] == inRangeParams[1]) {
	      return [nearIntersectionX, nearIntersectionY];
	    } else {

	      var farIntersectionX = inRangeParams[1] * d[0] + x1;
	      var farIntersectionY = inRangeParams[1] * d[1] + y1;

	      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
	    }

	  } else {
	    return [nearIntersectionX, nearIntersectionY];
	  }

	};

	math.findCircleNearPoint = function(centerX, centerY,
	  radius, farX, farY) {

	  var displacementX = farX - centerX;
	  var displacementY = farY - centerY;
	  var distance = Math.sqrt(displacementX * displacementX
	    + displacementY * displacementY);

	  var unitDisplacementX = displacementX / distance;
	  var unitDisplacementY = displacementY / distance;

	  return [centerX + unitDisplacementX * radius,
	    centerY + unitDisplacementY * radius];
	};

	math.findMaxSqDistanceToOrigin = function(points) {
	  var maxSqDistance = 0.000001;
	  var sqDistance;

	  for (var i = 0; i < points.length / 2; i++) {

	    sqDistance = points[i * 2] * points[i * 2]
	      + points[i * 2 + 1] * points[i * 2 + 1];

	    if (sqDistance > maxSqDistance) {
	      maxSqDistance = sqDistance;
	    }
	  }

	  return maxSqDistance;
	};

	math.finiteLinesIntersect = function(
	  x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {

	  var ua_t = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
	  var ub_t = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
	  var u_b = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);

	  if (u_b !== 0) {
	    var ua = ua_t / u_b;
	    var ub = ub_t / u_b;

	    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
	      return [x1 + ua * (x2 - x1), y1 + ua * (y2 - y1)];

	    } else {
	      if (!infiniteLines) {
	        return [];
	      } else {
	        return [x1 + ua * (x2 - x1), y1 + ua * (y2 - y1)];
	      }
	    }
	  } else {
	    if (ua_t === 0 || ub_t === 0) {

	      // Parallel, coincident lines. Check if overlap

	      // Check endpoint of second line
	      if ([x1, x2, x4].sort()[1] === x4) {
	        return [x4, y4];
	      }

	      // Check start point of second line
	      if ([x1, x2, x3].sort()[1] === x3) {
	        return [x3, y3];
	      }

	      // Endpoint of first line
	      if ([x3, x4, x2].sort()[1] === x2) {
	        return [x2, y2];
	      }

	      return [];
	    } else {

	      // Parallel, non-coincident
	      return [];
	    }
	  }
	};

	math.polygonIntersectLine = function(
	  x, y, basePoints, centerX, centerY, width, height, padding) {

	  var intersections = [];
	  var intersection;

	  var transformedPoints = new Array(basePoints.length);

	  for (var i = 0; i < transformedPoints.length / 2; i++) {
	    transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
	    transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
	  }

	  var points;

	  if (padding > 0) {
	    var expandedLineSet = math.expandPolygon(
	      transformedPoints,
	      -padding);

	    points = math.joinLines(expandedLineSet);
	  } else {
	    points = transformedPoints;
	  }
	  // var points = transformedPoints;

	  var currentX, currentY, nextX, nextY;

	  for (var i = 0; i < points.length / 2; i++) {

	    currentX = points[i * 2];
	    currentY = points[i * 2 + 1];

	    if (i < points.length / 2 - 1) {
	      nextX = points[(i + 1) * 2];
	      nextY = points[(i + 1) * 2 + 1];
	    } else {
	      nextX = points[0];
	      nextY = points[1];
	    }

	    intersection = this.finiteLinesIntersect(
	      x, y, centerX, centerY,
	      currentX, currentY,
	      nextX, nextY);

	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }

	  return intersections;
	};

	math.shortenIntersection = function(
	  intersection, offset, amount) {

	  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];

	  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);

	  var lenRatio = (length - amount) / length;

	  if (lenRatio < 0) {
	    lenRatio = 0.00001;
	  }

	  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
	};

	math.generateUnitNgonPointsFitToSquare = function(sides, rotationRadians) {
	  var points = math.generateUnitNgonPoints(sides, rotationRadians);
	  points = math.fitPolygonToSquare(points);

	  return points;
	};

	math.fitPolygonToSquare = function(points){
	  var x, y;
	  var sides = points.length/2;
	  var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;

	  for (var i = 0; i < sides; i++) {
	    x = points[2 * i];
	    y = points[2 * i + 1];

	    minX = Math.min( minX, x );
	    maxX = Math.max( maxX, x );
	    minY = Math.min( minY, y );
	    maxY = Math.max( maxY, y );
	  }

	  // stretch factors
	  var sx = 2 / (maxX - minX);
	  var sy = 2 / (maxY - minY);

	  for (var i = 0; i < sides; i++){
	    x = points[2 * i] = points[2 * i] * sx;
	    y = points[2 * i + 1] = points[2 * i + 1] * sy;

	    minX = Math.min( minX, x );
	    maxX = Math.max( maxX, x );
	    minY = Math.min( minY, y );
	    maxY = Math.max( maxY, y );
	  }

	  if( minY < -1 ){
	    for (var i = 0; i < sides; i++){
	      y = points[2 * i + 1] = points[2 * i + 1] + (-1 -minY);
	    }
	  }

	  return points;
	};

	math.generateUnitNgonPoints = function(sides, rotationRadians) {

	  var increment = 1.0 / sides * 2 * Math.PI;
	  var startAngle = sides % 2 === 0 ?
	    Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
	    //    console.log(nodeShapes['square']);
	  startAngle += rotationRadians;

	  var points = new Array(sides * 2);

	  var currentAngle, x, y;
	  for (var i = 0; i < sides; i++) {
	    currentAngle = i * increment + startAngle;

	    x = points[2 * i] = Math.cos(currentAngle);// * (1 + i/2);
	    y = points[2 * i + 1] = Math.sin(-currentAngle);//  * (1 + i/2);
	  }

	  return points;
	};

	math.getRoundRectangleRadius = function(width, height) {

	  // Set the default radius, unless half of width or height is smaller than default
	  return Math.min(width / 4, height / 4, 8);
	};

	module.exports = math;

	},{}],80:[function(_dereq_,module,exports){
	/*!
	Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
	Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
	Licensed under The MIT License (http://opensource.org/licenses/MIT)
	*/

	'use strict';

	/*  promise states [Promises/A+ 2.1]  */
	var STATE_PENDING   = 0;                                         /*  [Promises/A+ 2.1.1]  */
	var STATE_FULFILLED = 1;                                         /*  [Promises/A+ 2.1.2]  */
	var STATE_REJECTED  = 2;                                         /*  [Promises/A+ 2.1.3]  */

	/*  promise object constructor  */
	var api = function (executor) {
	  /*  optionally support non-constructor/plain-function call  */
	  if (!(this instanceof api))
	    return new api(executor);

	  /*  initialize object  */
	  this.id           = "Thenable/1.0.7";
	  this.state        = STATE_PENDING; /*  initial state  */
	  this.fulfillValue = undefined;     /*  initial value  */     /*  [Promises/A+ 1.3, 2.1.2.2]  */
	  this.rejectReason = undefined;     /*  initial reason */     /*  [Promises/A+ 1.5, 2.1.3.2]  */
	  this.onFulfilled  = [];            /*  initial handlers  */
	  this.onRejected   = [];            /*  initial handlers  */

	  /*  provide optional information-hiding proxy  */
	  this.proxy = {
	    then: this.then.bind(this)
	  };

	  /*  support optional executor function  */
	  if (typeof executor === "function")
	    executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
	};

	/*  promise API methods  */
	api.prototype = {
	  /*  promise resolving methods  */
	  fulfill: function (value) { return deliver(this, STATE_FULFILLED, "fulfillValue", value); },
	  reject:  function (value) { return deliver(this, STATE_REJECTED,  "rejectReason", value); },

	  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
	  then: function (onFulfilled, onRejected) {
	    var curr = this;
	    var next = new api();                                    /*  [Promises/A+ 2.2.7]  */
	    curr.onFulfilled.push(
	      resolver(onFulfilled, next, "fulfill"));             /*  [Promises/A+ 2.2.2/2.2.6]  */
	    curr.onRejected.push(
	      resolver(onRejected,  next, "reject" ));             /*  [Promises/A+ 2.2.3/2.2.6]  */
	    execute(curr);
	    return next.proxy;                                       /*  [Promises/A+ 2.2.7, 3.3]  */
	  }
	};

	/*  deliver an action  */
	var deliver = function (curr, state, name, value) {
	  if (curr.state === STATE_PENDING) {
	    curr.state = state;                                      /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
	    curr[name] = value;                                      /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
	    execute(curr);
	  }
	  return curr;
	};

	/*  execute all handlers  */
	var execute = function (curr) {
	  if (curr.state === STATE_FULFILLED)
	    execute_handlers(curr, "onFulfilled", curr.fulfillValue);
	  else if (curr.state === STATE_REJECTED)
	    execute_handlers(curr, "onRejected",  curr.rejectReason);
	};

	/*  execute particular set of handlers  */
	var execute_handlers = function (curr, name, value) {
	  /* global setImmediate: true */
	  /* global setTimeout: true */

	  /*  short-circuit processing  */
	  if (curr[name].length === 0)
	    return;

	  /*  iterate over all handlers, exactly once  */
	  var handlers = curr[name];
	  curr[name] = [];                                             /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
	  var func = function () {
	    for (var i = 0; i < handlers.length; i++)
	      handlers[i](value);                                  /*  [Promises/A+ 2.2.5]  */
	  };

	  /*  execute procedure asynchronously  */                     /*  [Promises/A+ 2.2.4, 3.1]  */
	  if (typeof setImmediate === "function")
	    setImmediate(func);
	  else
	    setTimeout(func, 0);
	};

	/*  generate a resolver function  */
	var resolver = function (cb, next, method) {
	  return function (value) {
	    if (typeof cb !== "function")                            /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
	      next[method].call(next, value);                      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
	    else {
	      var result;
	      try { result = cb(value); }                          /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
	      catch (e) {
	        next.reject(e);                                  /*  [Promises/A+ 2.2.7.2]  */
	        return;
	      }
	      resolve(next, result);                               /*  [Promises/A+ 2.2.7.1]  */
	    }
	  };
	};

	/*  "Promise Resolution Procedure"  */                           /*  [Promises/A+ 2.3]  */
	var resolve = function (promise, x) {
	  /*  sanity check arguments  */                               /*  [Promises/A+ 2.3.1]  */
	  if (promise === x || promise.proxy === x) {
	    promise.reject(new TypeError("cannot resolve promise with itself"));
	    return;
	  }

	  /*  surgically check for a "then" method
	    (mainly to just call the "getter" of "then" only once)  */
	  var then;
	  if ((typeof x === "object" && x !== null) || typeof x === "function") {
	    try { then = x.then; }                                   /*  [Promises/A+ 2.3.3.1, 3.5]  */
	    catch (e) {
	      promise.reject(e);                                   /*  [Promises/A+ 2.3.3.2]  */
	      return;
	    }
	  }

	  /*  handle own Thenables    [Promises/A+ 2.3.2]
	    and similar "thenables" [Promises/A+ 2.3.3]  */
	  if (typeof then === "function") {
	    var resolved = false;
	    try {
	      /*  call retrieved "then" method */                  /*  [Promises/A+ 2.3.3.3]  */
	      then.call(x,
	        /*  resolvePromise  */                           /*  [Promises/A+ 2.3.3.3.1]  */
	        function (y) {
	          if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
	          if (y === x)                                 /*  [Promises/A+ 3.6]  */
	            promise.reject(new TypeError("circular thenable chain"));
	          else
	            resolve(promise, y);
	        },

	        /*  rejectPromise  */                            /*  [Promises/A+ 2.3.3.3.2]  */
	        function (r) {
	          if (resolved) return; resolved = true;       /*  [Promises/A+ 2.3.3.3.3]  */
	          promise.reject(r);
	        }
	      );
	    }
	    catch (e) {
	      if (!resolved)                                       /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject(e);                               /*  [Promises/A+ 2.3.3.3.4]  */
	    }
	    return;
	  }

	  /*  handle other values  */
	  promise.fulfill(x);                                          /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
	};

	// so we always have Promise.all()
	api.all = function( ps ){
	  return new api(function( resolveAll, rejectAll ){
	    var vals = new Array( ps.length );
	    var doneCount = 0;

	    var fulfill = function( i, val ){
	      vals[i] = val;
	      doneCount++;

	      if( doneCount === ps.length ){
	        resolveAll( vals );
	      }
	    };

	    for( var i = 0; i < ps.length; i++ ){
	      (function( i ){
	        var p = ps[i];
	        var isPromise = p != null && p.then != null;

	        if( isPromise ){
	          p.then(function( val ){
	            fulfill( i, val );
	          }, function( err ){
	            rejectAll( err );
	          });
	        } else {
	          var val = p;
	          fulfill( i, val );
	        }
	      })( i );
	    }

	  });
	};

	api.resolve = function( val ){
	  return new api(function( resolve, reject ){ resolve( val ); });
	};

	api.reject = function( val ){
	  return new api(function( resolve, reject ){ reject( val ); });
	};

	module.exports = typeof Promise !== 'undefined' ? Promise : api;

	},{}],81:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('./is');
	var util = _dereq_('./util');

	var Selector = function( onlyThisGroup, selector ){

	  if( !(this instanceof Selector) ){
	    return new Selector(onlyThisGroup, selector);
	  }

	  if( selector === undefined && onlyThisGroup !== undefined ){
	    selector = onlyThisGroup;
	    onlyThisGroup = undefined;
	  }

	  var self = this;

	  self._private = {
	    selectorText: null,
	    invalid: true
	  };

	  if( !selector || ( is.string(selector) && selector.match(/^\s*$/) ) ){

	    if( onlyThisGroup == null ){
	      // ignore
	      self.length = 0;
	    } else {
	      self[0] = newQuery();
	      self[0].group = onlyThisGroup;
	      self.length = 1;
	    }

	  } else if( is.elementOrCollection( selector ) ){
	    var collection = selector.collection();

	    self[0] = newQuery();
	    self[0].collection = collection;
	    self.length = 1;

	  } else if( is.fn( selector ) ) {
	    self[0] = newQuery();
	    self[0].filter = selector;
	    self.length = 1;

	  } else if( is.string( selector ) ){

	    // the current subject in the query
	    var currentSubject = null;

	    // storage for parsed queries
	    var newQuery = function(){
	      return {
	        classes: [],
	        colonSelectors: [],
	        data: [],
	        group: null,
	        ids: [],
	        meta: [],

	        // fake selectors
	        collection: null, // a collection to match against
	        filter: null, // filter function

	        // these are defined in the upward direction rather than down (e.g. child)
	        // because we need to go up in Selector.filter()
	        parent: null, // parent query obj
	        ancestor: null, // ancestor query obj
	        subject: null, // defines subject in compound query (subject query obj; points to self if subject)

	        // use these only when subject has been defined
	        child: null,
	        descendant: null
	      };
	    };

	    // tokens in the query language
	    var tokens = {
	      metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]', // chars we need to escape in var names, etc
	      comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=', // binary comparison op (used in data selectors)
	      boolOp: '\\?|\\!|\\^', // boolean (unary) operators (used in data selectors)
	      string: '"(?:\\\\"|[^"])+"' + '|' + "'(?:\\\\'|[^'])+'", // string literals (used in data selectors) -- doublequotes | singlequotes
	      number: util.regex.number, // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
	      meta: 'degree|indegree|outdegree', // allowed metadata fields (i.e. allowed functions to use from Collection)
	      separator: '\\s*,\\s*', // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
	      descendant: '\\s+',
	      child: '\\s+>\\s+',
	      subject: '\\$'
	    };
	    tokens.variable = '(?:[\\w-]|(?:\\\\'+ tokens.metaChar +'))+'; // a variable name
	    tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number
	    tokens.className = tokens.variable; // a class name (follows variable conventions)
	    tokens.id = tokens.variable; // an element id (follows variable conventions)

	    // when a token like a variable has escaped meta characters, we need to clean the backslashes out
	    // so that values get compared properly in Selector.filter()
	    var cleanMetaChars = function(str){
	      return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function(match, $1, offset, original){
	        return $1;
	      });
	    };

	    // add @ variants to comparatorOp
	    var ops = tokens.comparatorOp.split('|');
	    for( var i = 0; i < ops.length; i++ ){
	      var op = ops[i];
	      tokens.comparatorOp += '|@' + op;
	    }

	    // add ! variants to comparatorOp
	    var ops = tokens.comparatorOp.split('|');
	    for( var i = 0; i < ops.length; i++ ){
	      var op = ops[i];

	      if( op.indexOf('!') >= 0 ){ continue; } // skip ops that explicitly contain !
	      if( op === '=' ){ continue; } // skip = b/c != is explicitly defined

	      tokens.comparatorOp += '|\\!' + op;
	    }

	    // NOTE: add new expression syntax here to have it recognised by the parser;
	    // - a query contains all adjacent (i.e. no separator in between) expressions;
	    // - the current query is stored in self[i] --- you can use the reference to `this` in the populate function;
	    // - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward
	    // - when you add something here, also add to Selector.toString()
	    var exprs = [
	      {
	        name: 'group',
	        query: true,
	        regex: '(node|edge|\\*)',
	        populate: function( group ){
	          this.group = group == "*" ? group : group + 's';
	        }
	      },

	      {
	        name: 'state',
	        query: true,
	        // NB: if one colon selector is a substring of another from its start, place the longer one first
	        // e.g. :foobar|:foo
	        regex: '(:selected|:unselected|:locked|:unlocked|:visible|:hidden|:transparent|:grabbed|:free|:removed|:inside|:grabbable|:ungrabbable|:animated|:unanimated|:selectable|:unselectable|:orphan|:nonorphan|:parent|:child|:loop|:simple|:active|:inactive|:touch|:backgrounding|:nonbackgrounding)',
	        populate: function( state ){
	          this.colonSelectors.push( state );
	        }
	      },

	      {
	        name: 'id',
	        query: true,
	        regex: '\\#('+ tokens.id +')',
	        populate: function( id ){
	          this.ids.push( cleanMetaChars(id) );
	        }
	      },

	      {
	        name: 'className',
	        query: true,
	        regex: '\\.('+ tokens.className +')',
	        populate: function( className ){
	          this.classes.push( cleanMetaChars(className) );
	        }
	      },

	      {
	        name: 'dataExists',
	        query: true,
	        regex: '\\[\\s*('+ tokens.variable +')\\s*\\]',
	        populate: function( variable ){
	          this.data.push({
	            field: cleanMetaChars(variable)
	          });
	        }
	      },

	      {
	        name: 'dataCompare',
	        query: true,
	        regex: '\\[\\s*('+ tokens.variable +')\\s*('+ tokens.comparatorOp +')\\s*('+ tokens.value +')\\s*\\]',
	        populate: function( variable, comparatorOp, value ){
	          var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

	          if( valueIsString ){
	            value = value.substring(1, value.length - 1);
	          } else {
	            value = parseFloat(value);
	          }

	          this.data.push({
	            field: cleanMetaChars(variable),
	            operator: comparatorOp,
	            value: value
	          });
	        }
	      },

	      {
	        name: 'dataBool',
	        query: true,
	        regex: '\\[\\s*('+ tokens.boolOp +')\\s*('+ tokens.variable +')\\s*\\]',
	        populate: function( boolOp, variable ){
	          this.data.push({
	            field: cleanMetaChars(variable),
	            operator: boolOp
	          });
	        }
	      },

	      {
	        name: 'metaCompare',
	        query: true,
	        regex: '\\[\\[\\s*('+ tokens.meta +')\\s*('+ tokens.comparatorOp +')\\s*('+ tokens.number +')\\s*\\]\\]',
	        populate: function( meta, comparatorOp, number ){
	          this.meta.push({
	            field: cleanMetaChars(meta),
	            operator: comparatorOp,
	            value: parseFloat(number)
	          });
	        }
	      },

	      {
	        name: 'nextQuery',
	        separator: true,
	        regex: tokens.separator,
	        populate: function(){
	          // go on to next query
	          self[++i] = newQuery();
	          currentSubject = null;
	        }
	      },

	      {
	        name: 'child',
	        separator: true,
	        regex: tokens.child,
	        populate: function(){
	          // this query is the parent of the following query
	          var childQuery = newQuery();
	          childQuery.parent = this;
	          childQuery.subject = currentSubject;

	          // we're now populating the child query with expressions that follow
	          self[i] = childQuery;
	        }
	      },

	      {
	        name: 'descendant',
	        separator: true,
	        regex: tokens.descendant,
	        populate: function(){
	          // this query is the ancestor of the following query
	          var descendantQuery = newQuery();
	          descendantQuery.ancestor = this;
	          descendantQuery.subject = currentSubject;

	          // we're now populating the descendant query with expressions that follow
	          self[i] = descendantQuery;
	        }
	      },

	      {
	        name: 'subject',
	        modifier: true,
	        regex: tokens.subject,
	        populate: function(){
	          if( currentSubject != null && this.subject != this ){
	            util.error('Redefinition of subject in selector `' + selector + '`');
	            return false;
	          }

	          currentSubject = this;
	          this.subject = this;
	        }

	      }
	    ];

	    self._private.selectorText = selector;
	    var remaining = selector;
	    var i = 0;

	    // of all the expressions, find the first match in the remaining text
	    var consumeExpr = function( expectation ){
	      var expr;
	      var match;
	      var name;

	      for( var j = 0; j < exprs.length; j++ ){
	        var e = exprs[j];
	        var n = e.name;

	        // ignore this expression if it doesn't meet the expectation function
	        if( is.fn( expectation ) && !expectation(n, e) ){ continue; }

	        var m = remaining.match(new RegExp( '^' + e.regex ));

	        if( m != null ){
	          match = m;
	          expr = e;
	          name = n;

	          var consumed = m[0];
	          remaining = remaining.substring( consumed.length );

	          break; // we've consumed one expr, so we can return now
	        }
	      }

	      return {
	        expr: expr,
	        match: match,
	        name: name
	      };
	    };

	    // consume all leading whitespace
	    var consumeWhitespace = function(){
	      var match = remaining.match(/^\s+/);

	      if( match ){
	        var consumed = match[0];
	        remaining = remaining.substring( consumed.length );
	      }
	    };

	    self[0] = newQuery(); // get started

	    consumeWhitespace(); // get rid of leading whitespace
	    for(;;){
	      var check = consumeExpr();

	      if( check.expr == null ){
	        util.error('The selector `'+ selector +'`is invalid');
	        return;
	      } else {
	        var args = [];
	        for(var j = 1; j < check.match.length; j++){
	          args.push( check.match[j] );
	        }

	        // let the token populate the selector object (i.e. in self[i])
	        var ret = check.expr.populate.apply( self[i], args );

	        if( ret === false ){ return; } // exit if population failed
	      }

	      // we're done when there's nothing left to parse
	      if( remaining.match(/^\s*$/) ){
	        break;
	      }
	    }

	    self.length = i + 1;

	    // adjust references for subject
	    for(var j = 0; j < self.length; j++){
	      var query = self[j];

	      if( query.subject != null ){
	        // go up the tree until we reach the subject
	        for(;;){
	          if( query.subject == query ){ break; } // done if subject is self

	          if( query.parent != null ){ // swap parent/child reference
	            var parent = query.parent;
	            var child = query;

	            child.parent = null;
	            parent.child = child;

	            query = parent; // go up the tree
	          } else if( query.ancestor != null ){ // swap ancestor/descendant
	            var ancestor = query.ancestor;
	            var descendant = query;

	            descendant.ancestor = null;
	            ancestor.descendant = descendant;

	            query = ancestor; // go up the tree
	          } else {
	            util.error('When adjusting references for the selector `'+ query +'`, neither parent nor ancestor was found');
	            break;
	          }
	        } // for

	        self[j] = query.subject; // subject should be the root query
	      } // if
	    } // for

	    // make sure for each query that the subject group matches the implicit group if any
	    if( onlyThisGroup != null ){
	      for(var j = 0; j < self.length; j++){
	        if( self[j].group != null && self[j].group != onlyThisGroup ){
	          util.error('Group `'+ self[j].group +'` conflicts with implicit group `'+ onlyThisGroup +'` in selector `'+ selector +'`');
	          return;
	        }

	        self[j].group = onlyThisGroup; // set to implicit group
	      }
	    }

	  } else {
	    util.error('A selector must be created from a string; found ' + selector);
	    return;
	  }

	  self._private.invalid = false;

	};

	var selfn = Selector.prototype;

	selfn.size = function(){
	  return this.length;
	};

	selfn.eq = function(i){
	  return this[i];
	};

	var queryMatches = function(query, element){
	  // check group
	  if( query.group != null && query.group != '*' && query.group != element._private.group ){
	    return false;
	  }

	  var cy = element.cy();

	  // check colon selectors
	  var allColonSelectorsMatch = true;
	  for(var k = 0; k < query.colonSelectors.length; k++){
	    var sel = query.colonSelectors[k];

	    switch(sel){
	    case ':selected':
	      allColonSelectorsMatch = element.selected();
	      break;
	    case ':unselected':
	      allColonSelectorsMatch = !element.selected();
	      break;
	    case ':selectable':
	      allColonSelectorsMatch = element.selectable();
	      break;
	    case ':unselectable':
	      allColonSelectorsMatch = !element.selectable();
	      break;
	    case ':locked':
	      allColonSelectorsMatch = element.locked();
	      break;
	    case ':unlocked':
	      allColonSelectorsMatch = !element.locked();
	      break;
	    case ':visible':
	      allColonSelectorsMatch = element.visible();
	      break;
	    case ':hidden':
	      allColonSelectorsMatch = !element.visible();
	      break;
	    case ':transparent':
	      allColonSelectorsMatch = element.transparent();
	      break;
	    case ':grabbed':
	      allColonSelectorsMatch = element.grabbed();
	      break;
	    case ':free':
	      allColonSelectorsMatch = !element.grabbed();
	      break;
	    case ':removed':
	      allColonSelectorsMatch = element.removed();
	      break;
	    case ':inside':
	      allColonSelectorsMatch = !element.removed();
	      break;
	    case ':grabbable':
	      allColonSelectorsMatch = element.grabbable();
	      break;
	    case ':ungrabbable':
	      allColonSelectorsMatch = !element.grabbable();
	      break;
	    case ':animated':
	      allColonSelectorsMatch = element.animated();
	      break;
	    case ':unanimated':
	      allColonSelectorsMatch = !element.animated();
	      break;
	    case ':parent':
	      allColonSelectorsMatch = element.isNode() && element.children().nonempty();
	      break;
	    case ':child':
	    case ':nonorphan':
	      allColonSelectorsMatch = element.isNode() && element.parent().nonempty();
	      break;
	    case ':orphan':
	      allColonSelectorsMatch = element.isNode() && element.parent().empty();
	      break;
	    case ':loop':
	      allColonSelectorsMatch = element.isEdge() && element.data('source') === element.data('target');
	      break;
	    case ':simple':
	      allColonSelectorsMatch = element.isEdge() && element.data('source') !== element.data('target');
	      break;
	    case ':active':
	      allColonSelectorsMatch = element.active();
	      break;
	    case ':inactive':
	      allColonSelectorsMatch = !element.active();
	      break;
	    case ':touch':
	      allColonSelectorsMatch = is.touch();
	      break;
	    case ':backgrounding':
	      allColonSelectorsMatch = element.backgrounding();
	      break;
	    case ':nonbackgrounding':
	      allColonSelectorsMatch = !element.backgrounding();
	      break;
	    }

	    if( !allColonSelectorsMatch ) break;
	  }
	  if( !allColonSelectorsMatch ) return false;

	  // check id
	  var allIdsMatch = true;
	  for(var k = 0; k < query.ids.length; k++){
	    var id = query.ids[k];
	    var actualId = element._private.data.id;

	    allIdsMatch = allIdsMatch && (id == actualId);

	    if( !allIdsMatch ) break;
	  }
	  if( !allIdsMatch ) return false;

	  // check classes
	  var allClassesMatch = true;
	  for(var k = 0; k < query.classes.length; k++){
	    var cls = query.classes[k];

	    allClassesMatch = allClassesMatch && element.hasClass(cls);

	    if( !allClassesMatch ) break;
	  }
	  if( !allClassesMatch ) return false;

	  // generic checking for data/metadata
	  var operandsMatch = function(params){
	    var allDataMatches = true;
	    for(var k = 0; k < query[params.name].length; k++){
	      var data = query[params.name][k];
	      var operator = data.operator;
	      var value = data.value;
	      var field = data.field;
	      var matches;

	      if( operator != null && value != null ){

	        var fieldVal = params.fieldValue(field);
	        var fieldStr = !is.string(fieldVal) && !is.number(fieldVal) ? '' : '' + fieldVal;
	        var valStr = '' + value;

	        var caseInsensitive = false;
	        if( operator.indexOf('@') >= 0 ){
	          fieldStr = fieldStr.toLowerCase();
	          valStr = valStr.toLowerCase();

	          operator = operator.replace('@', '');
	          caseInsensitive = true;
	        }

	        var notExpr = false;
	        var handledNotExpr = false;
	        if( operator.indexOf('!') >= 0 ){
	          operator = operator.replace('!', '');
	          notExpr = true;
	        }

	        // if we're doing a case insensitive comparison, then we're using a STRING comparison
	        // even if we're comparing numbers
	        if( caseInsensitive ){
	          value = valStr.toLowerCase();
	          fieldVal = fieldStr.toLowerCase();
	        }

	        switch(operator){
	        case '*=':
	          matches = fieldStr.search(valStr) >= 0;
	          break;
	        case '$=':
	          matches = new RegExp(valStr + '$').exec(fieldStr) != null;
	          break;
	        case '^=':
	          matches = new RegExp('^' + valStr).exec(fieldStr) != null;
	          break;
	        case '=':
	          matches = fieldVal === value;
	          break;
	        case '!=':
	          matches = fieldVal !== value;
	          break;
	        case '>':
	          matches = !notExpr ? fieldVal > value : fieldVal <= value;
	          handledNotExpr = true;
	          break;
	        case '>=':
	          matches = !notExpr ? fieldVal >= value : fieldVal < value;
	          handledNotExpr = true;
	          break;
	        case '<':
	          matches = !notExpr ? fieldVal < value : fieldVal >= value;
	          handledNotExpr = true;
	          break;
	        case '<=':
	          matches = !notExpr ? fieldVal <= value : fieldVal > value;
	          handledNotExpr = true;
	          break;
	        default:
	          matches = false;
	          break;

	        }
	      } else if( operator != null ){
	        switch(operator){
	        case '?':
	          matches = params.fieldTruthy(field);
	          break;
	        case '!':
	          matches = !params.fieldTruthy(field);
	          break;
	        case '^':
	          matches = params.fieldUndefined(field);
	          break;
	        }
	      } else {
	        matches = !params.fieldUndefined(field);
	      }

	      if( notExpr && !handledNotExpr ){
	        matches = !matches;
	        handledNotExpr = true;
	      }

	      if( !matches ){
	        allDataMatches = false;
	        break;
	      }
	    } // for

	    return allDataMatches;
	  }; // operandsMatch

	  // check data matches
	  var allDataMatches = operandsMatch({
	    name: 'data',
	    fieldValue: function(field){
	      return element._private.data[field];
	    },
	    fieldRef: function(field){
	      return 'element._private.data.' + field;
	    },
	    fieldUndefined: function(field){
	      return element._private.data[field] === undefined;
	    },
	    fieldTruthy: function(field){
	      if( element._private.data[field] ){
	        return true;
	      }
	      return false;
	    }
	  });

	  if( !allDataMatches ){
	    return false;
	  }

	  // check metadata matches
	  var allMetaMatches = operandsMatch({
	    name: 'meta',
	    fieldValue: function(field){
	      return element[field]();
	    },
	    fieldRef: function(field){
	      return 'element.' + field + '()';
	    },
	    fieldUndefined: function(field){
	      return element[field]() == null;
	    },
	    fieldTruthy: function(field){
	      if( element[field]() ){
	        return true;
	      }
	      return false;
	    }
	  });

	  if( !allMetaMatches ){
	    return false;
	  }

	  // check collection
	  if( query.collection != null ){
	    var matchesAny = query.collection._private.ids[ element.id() ] != null;

	    if( !matchesAny ){
	      return false;
	    }
	  }

	  // check filter function
	  if( query.filter != null && element.collection().filter( query.filter ).size() === 0 ){
	    return false;
	  }


	  // check parent/child relations
	  var confirmRelations = function( query, elements ){
	    if( query != null ){
	      var matches = false;

	      if( !cy.hasCompoundNodes() ){
	        return false;
	      }

	      elements = elements(); // make elements functional so we save cycles if query == null

	      // query must match for at least one element (may be recursive)
	      for(var i = 0; i < elements.length; i++){
	        if( queryMatches( query, elements[i] ) ){
	          matches = true;
	          break;
	        }
	      }

	      return matches;
	    } else {
	      return true;
	    }
	  };

	  if (! confirmRelations(query.parent, function(){
	    return element.parent();
	  }) ){ return false; }

	  if (! confirmRelations(query.ancestor, function(){
	    return element.parents();
	  }) ){ return false; }

	  if (! confirmRelations(query.child, function(){
	    return element.children();
	  }) ){ return false; }

	  if (! confirmRelations(query.descendant, function(){
	    return element.descendants();
	  }) ){ return false; }

	  // we've reached the end, so we've matched everything for this query
	  return true;
	}; // queryMatches

	// filter an existing collection
	selfn.filter = function(collection){
	  var self = this;
	  var cy = collection.cy();

	  // don't bother trying if it's invalid
	  if( self._private.invalid ){
	    return cy.collection();
	  }

	  var selectorFunction = function(i, element){
	    for(var j = 0; j < self.length; j++){
	      var query = self[j];

	      if( queryMatches(query, element) ){
	        return true;
	      }
	    }

	    return false;
	  };

	  if( self._private.selectorText == null ){
	    selectorFunction = function(){ return true; };
	  }

	  var filteredCollection = collection.filter( selectorFunction );

	  return filteredCollection;
	}; // filter

	// does selector match a single element?
	selfn.matches = function(ele){
	  var self = this;

	  // don't bother trying if it's invalid
	  if( self._private.invalid ){
	    return false;
	  }

	  for(var j = 0; j < self.length; j++){
	    var query = self[j];

	    if( queryMatches(query, ele) ){
	      return true;
	    }
	  }

	  return false;
	}; // filter

	// ith query to string
	selfn.toString = selfn.selector = function(){

	  var str = '';

	  var clean = function(obj, isValue){
	    if( is.string(obj) ){
	      return isValue ? '"' + obj + '"' : obj;
	    }
	    return '';
	  };

	  var queryToString = function(query){
	    var str = '';

	    if( query.subject === query ){
	      str += '$';
	    }

	    var group = clean(query.group);
	    str += group.substring(0, group.length - 1);

	    for(var j = 0; j < query.data.length; j++){
	      var data = query.data[j];

	      if( data.value ){
	        str += '[' + data.field + clean(data.operator) + clean(data.value, true) + ']';
	      } else {
	        str += '[' + clean(data.operator) + data.field + ']';
	      }
	    }

	    for(var j = 0; j < query.meta.length; j++){
	      var meta = query.meta[j];
	      str += '[[' + meta.field + clean(meta.operator) + clean(meta.value, true) + ']]';
	    }

	    for(var j = 0; j < query.colonSelectors.length; j++){
	      var sel = query.colonSelectors[i];
	      str += sel;
	    }

	    for(var j = 0; j < query.ids.length; j++){
	      var sel = '#' + query.ids[i];
	      str += sel;
	    }

	    for(var j = 0; j < query.classes.length; j++){
	      var sel = '.' + query.classes[j];
	      str += sel;
	    }

	    if( query.parent != null ){
	      str = queryToString( query.parent ) + ' > ' + str;
	    }

	    if( query.ancestor != null ){
	      str = queryToString( query.ancestor ) + ' ' + str;
	    }

	    if( query.child != null ){
	      str += ' > ' + queryToString( query.child );
	    }

	    if( query.descendant != null ){
	      str += ' ' + queryToString( query.descendant );
	    }

	    return str;
	  };

	  for(var i = 0; i < this.length; i++){
	    var query = this[i];

	    str += queryToString( query );

	    if( this.length > 1 && i < this.length - 1 ){
	      str += ', ';
	    }
	  }

	  return str;
	};

	module.exports = Selector;

	},{"./is":77,"./util":94}],82:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var styfn = {};

	// (potentially expensive calculation)
	// apply the style to the element based on
	// - its bypass
	// - what selectors match it
	styfn.apply = function( eles ){
	  var self = this;

	  if( self._private.newStyle ){ // clear style caches
	    this._private.contextStyles = {};
	    this._private.propDiffs = {};
	  }

	  for( var ie = 0; ie < eles.length; ie++ ){
	    var ele = eles[ie];
	    var cxtMeta = self.getContextMeta( ele );
	    var cxtStyle = self.getContextStyle( cxtMeta );
	    var app = self.applyContextStyle( cxtMeta, cxtStyle, ele );

	    self.updateTransitions( ele, app.diffProps );
	    self.updateStyleHints( ele );

	  } // for elements

	  self._private.newStyle = false;
	};

	styfn.getPropertiesDiff = function( oldCxtKey, newCxtKey ){
	  var self = this;
	  var cache = self._private.propDiffs = self._private.propDiffs || {};
	  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
	  var cachedVal = cache[dualCxtKey];

	  if( cachedVal ){
	    return cachedVal;
	  }

	  var diffProps = [];
	  var addedProp = {};

	  for( var i = 0; i < self.length; i++ ){
	    var cxt = self[i];
	    var oldHasCxt = oldCxtKey[i] === 't';
	    var newHasCxt = newCxtKey[i] === 't';
	    var cxtHasDiffed = oldHasCxt !== newHasCxt;
	    var cxtHasMappedProps = cxt.mappedProperties.length > 0;

	    if( cxtHasDiffed || cxtHasMappedProps ){
	      var props;

	      if( cxtHasDiffed && cxtHasMappedProps ){
	        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
	      } else if( cxtHasDiffed ){
	        props = cxt.properties; // need to check them all
	      } else if( cxtHasMappedProps ){
	        props = cxt.mappedProperties; // only need to check mapped
	      }

	      for( var j = 0; j < props.length; j++ ){
	        var prop = props[j];
	        var name = prop.name;

	        // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
	        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
	        // is cached)
	        var laterCxtOverrides = false;
	        for( var k = i + 1; k < self.length; k++ ){
	          var laterCxt = self[k];
	          var hasLaterCxt = newCxtKey[k] === 't';

	          if( !hasLaterCxt ){ continue; } // can't override unless the context is active

	          laterCxtOverrides = laterCxt.properties[ prop.name ] != null;

	          if( laterCxtOverrides ){ break; } // exit early as long as one later context overrides
	        }

	        if( !addedProp[name] && !laterCxtOverrides ){
	          addedProp[name] = true;
	          diffProps.push( name );
	        }
	      } // for props
	    } // if

	  } // for contexts

	  cache[ dualCxtKey ] = diffProps;
	  return diffProps;
	};

	styfn.getContextMeta = function( ele ){
	  var self = this;
	  var cxtKey = '';
	  var diffProps;
	  var prevKey = ele._private.styleCxtKey || '';

	  if( self._private.newStyle ){
	    prevKey = ''; // since we need to apply all style if a fresh stylesheet
	  }

	  // get the cxt key
	  for( var i = 0; i < self.length; i++ ){
	    var context = self[i];
	    var contextSelectorMatches = context.selector && context.selector.matches( ele ); // NB: context.selector may be null for 'core'

	    if( contextSelectorMatches ){
	      cxtKey += 't';
	    } else {
	      cxtKey += 'f';
	    }
	  } // for context

	  diffProps = self.getPropertiesDiff( prevKey, cxtKey );

	  ele._private.styleCxtKey = cxtKey;

	  return {
	    key: cxtKey,
	    diffPropNames: diffProps
	  };
	};

	// gets a computed ele style object based on matched contexts
	styfn.getContextStyle = function( cxtMeta ){
	  var cxtKey = cxtMeta.key;
	  var self = this;
	  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};

	  // if already computed style, returned cached copy
	  if( cxtStyles[cxtKey] ){ return cxtStyles[cxtKey]; }

	  var style = {
	    _private: {
	      key: cxtKey
	    }
	  };

	  for( var i = 0; i < self.length; i++ ){
	    var cxt = self[i];
	    var hasCxt = cxtKey[i] === 't';

	    if( !hasCxt ){ continue; }

	    for( var j = 0; j < cxt.properties.length; j++ ){
	      var prop = cxt.properties[j];
	      var styProp = style[ prop.name ] = prop;

	      styProp.context = cxt;
	    }
	  }

	  cxtStyles[cxtKey] = style;
	  return style;
	};

	styfn.applyContextStyle = function( cxtMeta, cxtStyle, ele ){
	  var self = this;
	  var diffProps = cxtMeta.diffPropNames;
	  var retDiffProps = {};

	  for( var i = 0; i < diffProps.length; i++ ){
	    var diffPropName = diffProps[i];
	    var cxtProp = cxtStyle[ diffPropName ];
	    var eleProp = ele._private.style[ diffPropName ];

	    // save cycles when the context prop doesn't need to be applied
	    if( !cxtProp || eleProp === cxtProp ){ continue; }

	    var retDiffProp = retDiffProps[ diffPropName ] = {
	      prev: eleProp
	    };

	    self.applyParsedProperty( ele, cxtProp );

	    retDiffProp.next = ele._private.style[ diffPropName ];

	    if( retDiffProp.next && retDiffProp.next.bypass ){
	      retDiffProp.next = retDiffProp.next.bypassed;
	    }
	  }

	  return {
	    diffProps: retDiffProps
	  };
	};

	styfn.updateStyleHints = function(ele){
	  var _p = ele._private;
	  var self = this;
	  var style = _p.style;

	  if( ele.removed() ){ return; }

	  // set whether has pie or not; for greater efficiency
	  var hasPie = false;
	  if( _p.group === 'nodes' && self._private.hasPie ){
	    for( var i = 1; i <= self.pieBackgroundN; i++ ){ // 1..N
	      var size = _p.style['pie-' + i + '-background-size'].value;

	      if( size > 0 ){
	        hasPie = true;
	        break;
	      }
	    }
	  }

	  _p.hasPie = hasPie;

	  var transform = style['text-transform'].strValue;
	  var content = style['label'].strValue;
	  var fStyle = style['font-style'].strValue;
	  var size = style['font-size'].pfValue + 'px';
	  var family = style['font-family'].strValue;
	  // var variant = style['font-variant'].strValue;
	  var weight = style['font-weight'].strValue;
	  var valign = style['text-valign'].strValue;
	  var halign = style['text-valign'].strValue;
	  var oWidth = style['text-outline-width'].pfValue;
	  var wrap = style['text-wrap'].strValue;
	  var wrapW = style['text-max-width'].pfValue;
	  _p.labelKey = fStyle +'$'+ size +'$'+ family +'$'+ weight +'$'+ content +'$'+ transform +'$'+ valign +'$'+ halign +'$'+ oWidth + '$' + wrap + '$' + wrapW;
	  _p.fontKey = fStyle +'$'+ weight +'$'+ size +'$'+ family;

	  var width = style['width'].pfValue;
	  var height = style['height'].pfValue;
	  var borderW = style['border-width'].pfValue;
	  _p.boundingBoxKey = width +'$'+ height +'$'+ borderW;

	  if( ele._private.group === 'edges' ){
	    var cpss = style['control-point-step-size'].pfValue;
	    var cpd = style['control-point-distances'] ? style['control-point-distances'].pfValue.join('_') : undefined;
	    var cpw = style['control-point-weights'].value.join('_');
	    var curve = style['curve-style'].strValue;
	    var sd = style['segment-distances'] ? style['segment-distances'].pfValue.join('_') : undefined;
	    var sw = style['segment-weights'].value.join('_');

	    _p.boundingBoxKey += '$'+ cpss +'$'+ cpd +'$'+ cpw +'$'+ sd +'$'+ sw +'$'+ curve;
	  }

	  _p.styleKey = Date.now();
	};

	// apply a property to the style (for internal use)
	// returns whether application was successful
	//
	// now, this function flattens the property, and here's how:
	//
	// for parsedProp:{ bypass: true, deleteBypass: true }
	// no property is generated, instead the bypass property in the
	// element's style is replaced by what's pointed to by the `bypassed`
	// field in the bypass property (i.e. restoring the property the
	// bypass was overriding)
	//
	// for parsedProp:{ mapped: truthy }
	// the generated flattenedProp:{ mapping: prop }
	//
	// for parsedProp:{ bypass: true }
	// the generated flattenedProp:{ bypassed: parsedProp }
	styfn.applyParsedProperty = function( ele, parsedProp ){
	  var self = this;
	  var prop = parsedProp;
	  var style = ele._private.style;
	  var fieldVal, flatProp;
	  var types = self.types;
	  var type = self.properties[ prop.name ].type;
	  var propIsBypass = prop.bypass;
	  var origProp = style[ prop.name ];
	  var origPropIsBypass = origProp && origProp.bypass;
	  var _p = ele._private;

	  // can't apply auto to width or height unless it's a parent node
	  if( (parsedProp.name === 'height' || parsedProp.name === 'width') && ele.isNode() ){
	    if( parsedProp.value === 'auto' && !ele.isParent() ){
	      return false;
	    } else if( parsedProp.value !== 'auto' && ele.isParent() ){
	      prop = parsedProp = this.parse( parsedProp.name, 'auto', propIsBypass );
	    }
	  }

	  // check if we need to delete the current bypass
	  if( propIsBypass && prop.deleteBypass ){ // then this property is just here to indicate we need to delete
	    var currentProp = style[ prop.name ];

	    // can only delete if the current prop is a bypass and it points to the property it was overriding
	    if( !currentProp ){
	      return true; // property is already not defined
	    } else if( currentProp.bypass && currentProp.bypassed ){ // then replace the bypass property with the original

	      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
	      style[ prop.name ] = currentProp.bypassed;
	      return true;

	    } else {
	      return false; // we're unsuccessful deleting the bypass
	    }
	  }

	  var printMappingErr = function(){
	    util.error('Do not assign mappings to elements without corresponding data (e.g. ele `'+ ele.id() +'` for property `'+ prop.name +'` with data field `'+ prop.field +'`); try a `['+ prop.field +']` selector to limit scope to elements with `'+ prop.field +'` defined');
	  };

	  // put the property in the style objects
	  switch( prop.mapped ){ // flatten the property if mapped
	  case types.mapData:
	  case types.mapLayoutData:
	  case types.mapScratch:

	    var isLayout = prop.mapped === types.mapLayoutData;
	    var isScratch = prop.mapped === types.mapScratch;

	    // flatten the field (e.g. data.foo.bar)
	    var fields = prop.field.split(".");
	    var fieldVal;

	    if( isScratch || isLayout ){
	      fieldVal = _p.scratch;
	    } else {
	      fieldVal = _p.data;
	    }

	    for( var i = 0; i < fields.length && fieldVal; i++ ){
	      var field = fields[i];
	      fieldVal = fieldVal[ field ];
	    }

	    var percent;
	    if( !is.number(fieldVal) ){ // then keep the mapping but assume 0% for now
	      percent = 0;
	    } else {
	      percent = (fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);
	    }

	    // make sure to bound percent value
	    if( percent < 0 ){
	      percent = 0;
	    } else if( percent > 1 ){
	      percent = 1;
	    }

	    if( type.color ){
	      var r1 = prop.valueMin[0];
	      var r2 = prop.valueMax[0];
	      var g1 = prop.valueMin[1];
	      var g2 = prop.valueMax[1];
	      var b1 = prop.valueMin[2];
	      var b2 = prop.valueMax[2];
	      var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
	      var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];

	      var clr = [
	        Math.round( r1 + (r2 - r1)*percent ),
	        Math.round( g1 + (g2 - g1)*percent ),
	        Math.round( b1 + (b2 - b1)*percent ),
	        Math.round( a1 + (a2 - a1)*percent )
	      ];

	      flatProp = { // colours are simple, so just create the flat property instead of expensive string parsing
	        bypass: prop.bypass, // we're a bypass if the mapping property is a bypass
	        name: prop.name,
	        value: clr,
	        strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
	      };

	    } else if( type.number ){
	      var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
	      flatProp = this.parse( prop.name, calcValue, prop.bypass, true );

	    } else {
	      return false; // can only map to colours and numbers
	    }

	    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	      flatProp = this.parse( prop.name, origProp.strValue, prop.bypass, true );
	    }

	    if( !flatProp ){ printMappingErr(); }
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  // direct mapping
	  case types.data:
	  case types.layoutData:
	  case types.scratch:
	    var isLayout = prop.mapped === types.layoutData;
	    var isScratch = prop.mapped === types.scratch;

	    // flatten the field (e.g. data.foo.bar)
	    var fields = prop.field.split(".");
	    var fieldVal;

	    if( isScratch || isLayout ){
	      fieldVal = _p.scratch;
	    } else {
	      fieldVal = _p.data;
	    }

	    if( fieldVal ){ for( var i = 0; i < fields.length; i++ ){
	      var field = fields[i];
	      fieldVal = fieldVal[ field ];
	    } }

	    flatProp = this.parse( prop.name, fieldVal, prop.bypass, true );

	    if( !flatProp ){ // if we can't flatten the property, then use the origProp so we still keep the mapping itself
	      var flatPropVal = origProp ? origProp.strValue : '';

	      flatProp = this.parse( prop.name, flatPropVal, prop.bypass, true );
	    }

	    if( !flatProp ){ printMappingErr(); }
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  case types.fn:
	    var fn = prop.value;
	    var fnRetVal = fn( ele );

	    flatProp = this.parse( prop.name, fnRetVal, prop.bypass, true );
	    flatProp.mapping = prop; // keep a reference to the mapping
	    prop = flatProp; // the flattened (mapped) property is the one we want

	    break;

	  case undefined:
	    break; // just set the property

	  default:
	    return false; // not a valid mapping
	  }

	  // if the property is a bypass property, then link the resultant property to the original one
	  if( propIsBypass ){
	    if( origPropIsBypass ){ // then this bypass overrides the existing one
	      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
	    } else { // then link the orig prop to the new bypass
	      prop.bypassed = origProp;
	    }

	    style[ prop.name ] = prop; // and set

	  } else { // prop is not bypass
	    if( origPropIsBypass ){ // then keep the orig prop (since it's a bypass) and link to the new prop
	      origProp.bypassed = prop;
	    } else { // then just replace the old prop with the new one
	      style[ prop.name ] = prop;
	    }
	  }

	  return true;
	};

	// updates the visual style for all elements (useful for manual style modification after init)
	styfn.update = function(){
	  var cy = this._private.cy;
	  var eles = cy.elements();

	  eles.updateStyle();
	};

	// just update the functional properties (i.e. mappings) in the elements'
	// styles (less expensive than recalculation)
	styfn.updateMappers = function( eles ){
	  var self = this;

	  for( var i = 0; i < eles.length; i++ ){ // for each ele
	    var ele = eles[i];
	    var style = ele._private.style;

	    for( var j = 0; j < self.properties.length; j++ ){ // for each prop
	      var prop = self.properties[j];
	      var propInStyle = style[ prop.name ];

	      if( propInStyle && propInStyle.mapping ){
	        var mapping = propInStyle.mapping;
	        this.applyParsedProperty( ele, mapping ); // reapply the mapping property
	      }
	    }

	    this.updateStyleHints( ele );
	  }
	};

	// diffProps : { name => { prev, next } }
	styfn.updateTransitions = function( ele, diffProps, isBypass ){
	  var self = this;
	  var _p = ele._private;
	  var style = _p.style;
	  var props = style['transition-property'].value;
	  var duration = style['transition-duration'].pfValue;
	  var delay = style['transition-delay'].pfValue;
	  var css = {};

	  if( props.length > 0 && duration > 0 ){

	    // build up the style to animate towards
	    var anyPrev = false;
	    for( var i = 0; i < props.length; i++ ){
	      var prop = props[i];
	      var styProp = style[ prop ];
	      var diffProp = diffProps[ prop ];

	      if( !diffProp ){ continue; }

	      var prevProp = diffProp.prev;
	      var fromProp = prevProp;
	      var toProp = diffProp.next != null ? diffProp.next : styProp;
	      var diff = false;
	      var initVal;
	      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

	      if( !fromProp ){ continue; }

	      // consider px values
	      if( is.number( fromProp.pfValue ) && is.number( toProp.pfValue ) ){
	        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy
	        initVal = fromProp.pfValue + initDt * diff;

	      // consider numerical values
	      } else if( is.number( fromProp.value ) && is.number( toProp.value ) ){
	        diff = toProp.value - fromProp.value; // nonzero is truthy
	        initVal = fromProp.value + initDt * diff;

	      // consider colour values
	      } else if( is.array( fromProp.value ) && is.array( toProp.value ) ){
	        diff = fromProp.value[0] !== toProp.value[0]
	          || fromProp.value[1] !== toProp.value[1]
	          || fromProp.value[2] !== toProp.value[2]
	        ;

	        initVal = fromProp.strValue;
	      }

	      // the previous value is good for an animation only if it's different
	      if( diff ){
	        css[ prop ] = toProp.strValue; // to val
	        this.applyBypass( ele, prop, initVal ); // from val
	        anyPrev = true;
	      }

	    } // end if props allow ani

	    // can't transition if there's nothing previous to transition from
	    if( !anyPrev ){ return; }

	    _p.transitioning = true;

	    ele.stop();

	    if( delay > 0 ){
	      ele.delay( delay );
	    }

	    ele.animate({
	      css: css
	    }, {
	      duration: duration,
	      easing: style['transition-timing-function'].value,
	      queue: false,
	      complete: function(){
	        if( !isBypass ){
	          self.removeBypasses( ele, props );
	        }

	        _p.transitioning = false;
	      }
	    });

	  } else if( _p.transitioning ){
	    ele.stop();

	    this.removeBypasses( ele, props );

	    _p.transitioning = false;
	  }
	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],83:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');

	var styfn = {};

	// bypasses are applied to an existing style on an element, and just tacked on temporarily
	// returns true iff application was successful for at least 1 specified property
	styfn.applyBypass = function( eles, name, value, updateTransitions ){
	  var self = this;
	  var props = [];
	  var isBypass = true;

	  // put all the properties (can specify one or many) in an array after parsing them
	  if( name === "*" || name === "**" ){ // apply to all property names

	    if( value !== undefined ){
	      for( var i = 0; i < self.properties.length; i++ ){
	        var prop = self.properties[i];
	        var name = prop.name;

	        var parsedProp = this.parse(name, value, true);

	        if( parsedProp ){
	          props.push( parsedProp );
	        }
	      }
	    }

	  } else if( is.string(name) ){ // then parse the single property
	    var parsedProp = this.parse(name, value, true);

	    if( parsedProp ){
	      props.push( parsedProp );
	    }
	  } else if( is.plainObject(name) ){ // then parse each property
	    var specifiedProps = name;
	    updateTransitions = value;

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var name = prop.name;
	      var value = specifiedProps[ name ];

	      if( value === undefined ){ // try camel case name too
	        value = specifiedProps[ util.dash2camel(name) ];
	      }

	      if( value !== undefined ){
	        var parsedProp = this.parse(name, value, true);

	        if( parsedProp ){
	          props.push( parsedProp );
	        }
	      }
	    }
	  } else { // can't do anything without well defined properties
	    return false;
	  }

	  // we've failed if there are no valid properties
	  if( props.length === 0 ){ return false; }

	  // now, apply the bypass properties on the elements
	  var ret = false; // return true if at least one succesful bypass applied
	  for( var i = 0; i < eles.length; i++ ){ // for each ele
	    var ele = eles[i];
	    var style = ele._private.style;
	    var diffProps = {};
	    var diffProp;

	    for( var j = 0; j < props.length; j++ ){ // for each prop
	      var prop = props[j];

	      if( updateTransitions ){
	        var prevProp = style[ prop.name ];
	        diffProp = diffProps[ prop.name ] = { prev: prevProp };
	      }

	      ret = this.applyParsedProperty( ele, prop ) || ret;

	      if( updateTransitions ){
	        diffProp.next = style[ prop.name ];
	      }

	    } // for props

	    if( ret ){
	      this.updateStyleHints( ele );
	    }

	    if( updateTransitions ){
	      this.updateTransitions( ele, diffProps, isBypass );
	    }
	  } // for eles

	  return ret;
	};

	// only useful in specific cases like animation
	styfn.overrideBypass = function( eles, name, value ){
	  name = util.camel2dash(name);

	  for( var i = 0; i < eles.length; i++ ){
	    var ele = eles[i];
	    var prop = ele._private.style[ name ];
	    var type = this.properties[ name ].type;
	    var isColor = type.color;
	    var isMulti = type.mutiple;

	    if( !prop.bypass ){ // need a bypass if one doesn't exist
	      this.applyBypass( ele, name, value );
	      continue;
	    }

	    prop.value = value;

	    if( prop.pfValue != null ){
	      prop.pfValue = value;
	    }

	    if( isColor ){
	      prop.strValue = 'rgb(' + value.join(',') + ')';
	    } else if( isMulti ){
	      prop.strValue = value.join(' ');
	    } else {
	      prop.strValue = '' + value;
	    }
	  }
	};

	styfn.removeAllBypasses = function( eles, updateTransitions ){
	  return this.removeBypasses( eles, this.propertyNames, updateTransitions );
	};

	styfn.removeBypasses = function( eles, props, updateTransitions ){
	  var isBypass = true;

	  for( var j = 0; j < eles.length; j++ ){
	    var ele = eles[j];
	    var diffProps = {};
	    var style = ele._private.style;

	    for( var i = 0; i < props.length; i++ ){
	      var name = props[i];
	      var prop = this.properties[ name ];
	      var value = ''; // empty => remove bypass
	      var parsedProp = this.parse(name, value, true);
	      var prevProp = style[ prop.name ];
	      var diffProp = diffProps[ prop.name ] = { prev: prevProp };

	      this.applyParsedProperty(ele, parsedProp);

	      diffProp.next = style[ prop.name ];
	    } // for props

	    this.updateStyleHints( ele );

	    if( updateTransitions ){
	      this.updateTransitions( ele, diffProps, isBypass );
	    }
	  } // for eles
	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],84:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('../window');

	var styfn = {};

	// gets what an em size corresponds to in pixels relative to a dom element
	styfn.getEmSizeInPixels = function(){
	  var px = this.containerCss('font-size');

	  if( px != null ){
	    return parseFloat( px );
	  } else {
	    return 1; // for headless
	  }
	};

	// gets css property from the core container
	styfn.containerCss = function( propName ){
	  var cy = this._private.cy;
	  var domElement = cy.container();

	  if( window && domElement && window.getComputedStyle ){
	    return window.getComputedStyle(domElement).getPropertyValue( propName );
	  }
	};

	module.exports = styfn;

	},{"../window":100}],85:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var styfn = {};

	// gets the rendered style for an element
	styfn.getRenderedStyle = function( ele ){
	  return this.getRawStyle( ele, true );
	};

	// gets the raw style for an element
	styfn.getRawStyle = function( ele, isRenderedVal ){
	  var self = this;
	  var ele = ele[0]; // insure it's an element

	  if( ele ){
	    var rstyle = {};

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var val = self.getStylePropertyValue( ele, prop.name, isRenderedVal );

	      if( val ){
	        rstyle[ prop.name ] = val;
	        rstyle[ util.dash2camel(prop.name) ] = val;
	      }
	    }

	    return rstyle;
	  }
	};

	styfn.getStylePropertyValue = function( ele, propName, isRenderedVal ){
	  var self = this;
	  var ele = ele[0]; // insure it's an element

	  if( ele ){
	    var style = ele._private.style;
	    var prop = self.properties[ propName ];
	    var type = prop.type;
	    var styleProp = style[ prop.name ];
	    var zoom = ele.cy().zoom();

	    if( styleProp ){
	      var units = styleProp.units ? type.implicitUnits || 'px' : null;
	      var val = units ? [].concat( styleProp.pfValue ).map(function( pfValue ){
	        return ( pfValue * (isRenderedVal ? zoom : 1) ) + units;
	      }).join(' ') : styleProp.strValue;

	      return val;
	    }
	  }
	};

	// gets the value style for an element (useful for things like animations)
	styfn.getValueStyle = function( ele ){
	  var self = this;
	  var rstyle = {};
	  var style;
	  var isEle = is.element(ele);

	  if( isEle ){
	    style = ele._private.style;
	  } else {
	    style = ele; // just passed the style itself
	  }

	  if( style ){
	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var styleProp = style[ prop.name ] || style[ util.dash2camel(prop.name) ];

	      if( styleProp !== undefined ){ // then make a prop of it
	        if( is.plainObject( styleProp ) ){
	          styleProp = this.parse( prop.name, styleProp.strValue );
	        } else {
	          styleProp = this.parse( prop.name, styleProp );
	        }
	      }

	      if( styleProp ){
	        rstyle[ prop.name ] = styleProp;
	        rstyle[ util.dash2camel(prop.name) ] = styleProp;
	      }
	    }
	  }

	  return rstyle;
	};

	styfn.getPropsList = function( propsObj ){
	  var self = this;
	  var rstyle = [];
	  var style = propsObj;
	  var props = self.properties;

	  if( style ){
	    for( var name in style ){
	      var val = style[name];
	      var prop = props[name] || props[ util.camel2dash(name) ];
	      var styleProp = this.parse( prop.name, val );

	      rstyle.push( styleProp );
	    }
	  }

	  return rstyle;
	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],86:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var util = _dereq_('../util');
	var Selector = _dereq_('../selector');

	var Style = function( cy ){

	  if( !(this instanceof Style) ){
	    return new Style(cy);
	  }

	  if( !is.core(cy) ){
	    util.error('A style must have a core reference');
	    return;
	  }

	  this._private = {
	    cy: cy,
	    coreStyle: {},
	    newStyle: true
	  };

	  this.length = 0;

	  this.addDefaultStylesheet();
	};

	var styfn = Style.prototype;

	styfn.instanceString = function(){
	  return 'style';
	};

	// remove all contexts
	styfn.clear = function(){
	  for( var i = 0; i < this.length; i++ ){
	    this[i] = undefined;
	  }
	  this.length = 0;
	  this._private.newStyle = true;

	  return this; // chaining
	};

	styfn.resetToDefault = function(){
	  this.clear();
	  this.addDefaultStylesheet();

	  return this;
	};

	// builds a style object for the 'core' selector
	styfn.core = function(){
	  return this._private.coreStyle;
	};

	// create a new context from the specified selector string and switch to that context
	styfn.selector = function( selectorStr ){
	  // 'core' is a special case and does not need a selector
	  var selector = selectorStr === 'core' ? null : new Selector( selectorStr );

	  var i = this.length++; // new context means new index
	  this[i] = {
	    selector: selector,
	    properties: [],
	    mappedProperties: [],
	    index: i
	  };

	  return this; // chaining
	};

	// add one or many css rules to the current context
	styfn.css = function(){
	  var self = this;
	  var args = arguments;

	  switch( args.length ){
	  case 1:
	    var map = args[0];

	    for( var i = 0; i < self.properties.length; i++ ){
	      var prop = self.properties[i];
	      var mapVal = map[ prop.name ];

	      if( mapVal === undefined ){
	        mapVal = map[ util.dash2camel(prop.name) ];
	      }

	      if( mapVal !== undefined ){
	        this.cssRule( prop.name, mapVal );
	      }
	    }

	    break;

	  case 2:
	    this.cssRule( args[0], args[1] );
	    break;

	  default:
	    break; // do nothing if args are invalid
	  }

	  return this; // chaining
	};
	styfn.style = styfn.css;

	// add a single css rule to the current context
	styfn.cssRule = function( name, value ){
	  // name-value pair
	  var property = this.parse( name, value );

	  // add property to current context if valid
	  if( property ){
	    var i = this.length - 1;
	    this[i].properties.push( property );
	    this[i].properties[ property.name ] = property; // allow access by name as well

	    if( property.name.match(/pie-(\d+)-background-size/) && property.value ){
	      this._private.hasPie = true;
	    }

	    if( property.mapped ){
	      this[i].mappedProperties.push( property );
	    }

	    // add to core style if necessary
	    var currentSelectorIsCore = !this[i].selector;
	    if( currentSelectorIsCore ){
	      this._private.coreStyle[ property.name ] = property;
	    }
	  }

	  return this; // chaining
	};

	// static function
	Style.fromJson = function( cy, json ){
	  var style = new Style( cy );

	  style.fromJson( json );

	  return style;
	};

	Style.fromString = function( cy, string ){
	  return new Style( cy ).fromString( string );
	};

	[
	  _dereq_('./apply'),
	  _dereq_('./bypass'),
	  _dereq_('./container'),
	  _dereq_('./get-for-ele'),
	  _dereq_('./json'),
	  _dereq_('./string-sheet'),
	  _dereq_('./properties'),
	  _dereq_('./parse')
	].forEach(function( props ){
	  util.extend( styfn, props );
	});


	Style.types = styfn.types;
	Style.properties = styfn.properties;

	module.exports = Style;

	},{"../is":77,"../selector":81,"../util":94,"./apply":82,"./bypass":83,"./container":84,"./get-for-ele":85,"./json":87,"./parse":88,"./properties":89,"./string-sheet":90}],87:[function(_dereq_,module,exports){
	'use strict';

	var styfn = {};

	styfn.applyFromJson = function( json ){
	  var style = this;

	  for( var i = 0; i < json.length; i++ ){
	    var context = json[i];
	    var selector = context.selector;
	    var props = context.style || context.css;

	    style.selector( selector ); // apply selector

	    for( var name in props ){
	      var value = props[name];

	      style.css( name, value ); // apply property
	    }
	  }

	  return style;
	};

	// accessible cy.style() function
	styfn.fromJson = function( json ){
	  var style = this;

	  style.resetToDefault();
	  style.applyFromJson( json );

	  return style;
	};

	// get json from cy.style() api
	styfn.json = function(){
	  var json = [];

	  for( var i = this.defaultLength; i < this.length; i++ ){
	    var cxt = this[i];
	    var selector = cxt.selector;
	    var props = cxt.properties;
	    var css = {};

	    for( var j = 0; j < props.length; j++ ){
	      var prop = props[j];
	      css[ prop.name ] = prop.strValue;
	    }

	    json.push({
	      selector: !selector ? 'core' : selector.toString(),
	      style: css
	    });
	  }

	  return json;
	};

	module.exports = styfn;

	},{}],88:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var is = _dereq_('../is');

	var styfn = {};

	// a caching layer for property parsing
	styfn.parse = function( name, value, propIsBypass, propIsFlat ){
	  var argHash = [ name, value, propIsBypass, propIsFlat ].join('$');
	  var propCache = this.propCache = this.propCache || {};
	  var ret;
	  var impl = parseImpl.bind( this );

	  if( !(ret = propCache[argHash]) ){
	    ret = propCache[argHash] = impl( name, value, propIsBypass, propIsFlat );
	  }

	  // always need a copy since props are mutated later in their lifecycles
	  ret = util.copy( ret );

	  if( ret ){
	    ret.value = util.copy( ret.value ); // because it could be an array, e.g. colour
	  }

	  return ret;
	};

	// parse a property; return null on invalid; return parsed property otherwise
	// fields :
	// - name : the name of the property
	// - value : the parsed, native-typed value of the property
	// - strValue : a string value that represents the property value in valid css
	// - bypass : true iff the property is a bypass property
	var parseImpl = function( name, value, propIsBypass, propIsFlat ){
	  var self = this;

	  name = util.camel2dash( name ); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

	  var property = self.properties[ name ];
	  var passedValue = value;
	  var types = self.types;

	  if( !property ){ return null; } // return null on property of unknown name
	  if( value === undefined || value === null ){ return null; } // can't assign null

	  // the property may be an alias
	  if( property.alias ){
	    property = property.pointsTo;
	    name = property.name;
	  }

	  var valueIsString = is.string(value);
	  if( valueIsString ){ // trim the value to make parsing easier
	    value = value.trim();
	  }

	  var type = property.type;
	  if( !type ){ return null; } // no type, no luck

	  // check if bypass is null or empty string (i.e. indication to delete bypass property)
	  if( propIsBypass && (value === '' || value === null) ){
	    return {
	      name: name,
	      value: value,
	      bypass: true,
	      deleteBypass: true
	    };
	  }

	  // check if value is a function used as a mapper
	  if( is.fn(value) ){
	    return {
	      name: name,
	      value: value,
	      strValue: 'fn',
	      mapped: types.fn,
	      bypass: propIsBypass
	    };
	  }

	  // check if value is mapped
	  var data, mapData, layoutData, mapLayoutData, scratch, mapScratch;
	  if( !valueIsString || propIsFlat ){
	    // then don't bother to do the expensive regex checks

	  } else if(
	    ( data = new RegExp( types.data.regex ).exec( value ) ) ||
	    ( layoutData = new RegExp( types.layoutData.regex ).exec( value ) ) ||
	    ( scratch = new RegExp( types.scratch.regex ).exec( value ) )
	  ){
	    if( propIsBypass ){ return false; } // mappers not allowed in bypass

	    var mapped;
	    if( data ){
	      mapped = types.data;
	    } else if( layoutData ){
	      mapped = types.layoutData;
	    } else {
	      mapped = types.scratch;
	    }

	    data = data || layoutData || scratch;

	    return {
	      name: name,
	      value: data,
	      strValue: '' + value,
	      mapped: mapped,
	      field: data[1],
	      bypass: propIsBypass
	    };

	  } else if(
	    ( mapData = new RegExp( types.mapData.regex ).exec( value ) ) ||
	    ( mapLayoutData = new RegExp( types.mapLayoutData.regex ).exec( value ) ) ||
	    ( mapScratch = new RegExp( types.mapScratch.regex ).exec( value ) )
	  ){
	    if( propIsBypass ){ return false; } // mappers not allowed in bypass
	    if( type.multiple ){ return false; } // impossible to map to num

	    var mapped;
	    if( mapData ){
	      mapped = types.mapData;
	    } else if( mapLayoutData ){
	      mapped = types.mapLayoutData;
	    } else {
	      mapped = types.mapScratch;
	    }

	    mapData = mapData || mapLayoutData || mapScratch;

	    // we can map only if the type is a colour or a number
	    if( !(type.color || type.number) ){ return false; }

	    var valueMin = this.parse( name, mapData[4] ); // parse to validate
	    if( !valueMin || valueMin.mapped ){ return false; } // can't be invalid or mapped

	    var valueMax = this.parse( name, mapData[5] ); // parse to validate
	    if( !valueMax || valueMax.mapped ){ return false; } // can't be invalid or mapped

	    // check if valueMin and valueMax are the same
	    if( valueMin.value === valueMax.value ){
	      return false; // can't make much of a mapper without a range

	    } else if( type.color ){
	      var c1 = valueMin.value;
	      var c2 = valueMax.value;

	      var same = c1[0] === c2[0] // red
	        && c1[1] === c2[1] // green
	        && c1[2] === c2[2] // blue
	        && ( // optional alpha
	          c1[3] === c2[3] // same alpha outright
	          || (
	            (c1[3] == null || c1[3] === 1) // full opacity for colour 1?
	            &&
	            (c2[3] == null || c2[3] === 1) // full opacity for colour 2?
	          )
	        )
	      ;

	      if( same ){ return false; } // can't make a mapper without a range
	    }

	    return {
	      name: name,
	      value: mapData,
	      strValue: '' + value,
	      mapped: mapped,
	      field: mapData[1],
	      fieldMin: parseFloat( mapData[2] ), // min & max are numeric
	      fieldMax: parseFloat( mapData[3] ),
	      valueMin: valueMin.value,
	      valueMax: valueMax.value,
	      bypass: propIsBypass
	    };
	  }

	  if( type.multiple && propIsFlat !== 'multiple' ){
	    var vals;

	    if( valueIsString ){
	      vals = value.split(/\s+/);
	    } else if( is.array(value) ){
	      vals = value;
	    } else {
	      vals = [ value ];
	    }

	    if( type.evenMultiple && vals.length % 2 !== 0 ){ return null; }

	    var valArr = vals.map(function( v ){
	      var p = self.parse( name, v, propIsBypass, 'multiple' );

	      if( p.pfValue != null ){
	        return p.pfValue;
	      } else {
	        return p.value;
	      }
	    });

	    return {
	      name: name,
	      value: valArr,
	      pfValue: valArr,
	      strValue: valArr.join(' '),
	      bypass: propIsBypass,
	      units: type.number && !type.unitless ? type.implicitUnits || 'px' : undefined
	    };
	  }

	  // several types also allow enums
	  var checkEnums = function(){
	    for( var i = 0; i < type.enums.length; i++ ){
	      var en = type.enums[i];

	      if( en === value ){
	        return {
	          name: name,
	          value: value,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }

	    return null;
	  };

	  // check the type and return the appropriate object
	  if( type.number ){
	    var units;
	    var implicitUnits = 'px'; // not set => px

	    if( type.units ){ // use specified units if set
	      units = type.units;
	    }

	    if( type.implicitUnits ){
	      implicitUnits = type.implicitUnits;
	    }

	    if( !type.unitless ){
	      if( valueIsString ){
	        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');
	        if( units ){ unitsRegex = units; } // only allow explicit units if so set
	        var match = value.match( '^(' + util.regex.number + ')(' + unitsRegex + ')?' + '$' );

	        if( match ){
	          value = match[1];
	          units = match[2] || implicitUnits;
	        }

	      } else if( !units || type.implicitUnits ) {
	        units = implicitUnits; // implicitly px if unspecified
	      }
	    }

	    value = parseFloat( value );

	    // if not a number and enums not allowed, then the value is invalid
	    if( isNaN(value) && type.enums === undefined ){
	      return null;
	    }

	    // check if this number type also accepts special keywords in place of numbers
	    // (i.e. `left`, `auto`, etc)
	    if( isNaN(value) && type.enums !== undefined ){
	      value = passedValue;

	      return checkEnums();
	    }

	    // check if value must be an integer
	    if( type.integer && !is.integer(value) ){
	      return null;
	    }

	    // check value is within range
	    if( (type.min !== undefined && value < type.min)
	    || (type.max !== undefined && value > type.max)
	    ){
	      return null;
	    }

	    var ret = {
	      name: name,
	      value: value,
	      strValue: '' + value + (units ? units : ''),
	      units: units,
	      bypass: propIsBypass
	    };

	    // normalise value in pixels
	    if( type.unitless || (units !== 'px' && units !== 'em') ){
	      ret.pfValue = value;
	    } else {
	      ret.pfValue = ( units === 'px' || !units ? (value) : (this.getEmSizeInPixels() * value) );
	    }

	    // normalise value in ms
	    if( units === 'ms' || units === 's' ){
	      ret.pfValue = units === 'ms' ? value : 1000 * value;
	    }

	    // normalise value in rad
	    if( units === 'deg' || units === 'rad' ){
	      ret.pfValue = units === 'rad' ? value : value * Math.PI/180;
	    }

	    return ret;

	  } else if( type.propList ) {

	    var props = [];
	    var propsStr = '' + value;

	    if( propsStr === 'none' ){
	      // leave empty

	    } else { // go over each prop

	      var propsSplit = propsStr.split(',');
	      for( var i = 0; i < propsSplit.length; i++ ){
	        var propName = propsSplit[i].trim();

	        if( self.properties[propName] ){
	          props.push( propName );
	        }
	      }

	      if( props.length === 0 ){ return null; }
	    }

	    return {
	      name: name,
	      value: props,
	      strValue: props.length === 0 ? 'none' : props.join(', '),
	      bypass: propIsBypass
	    };

	  } else if( type.color ){
	    var tuple = util.color2tuple( value );

	    if( !tuple ){ return null; }

	    return {
	      name: name,
	      value: tuple,
	      strValue: '' + value,
	      bypass: propIsBypass,
	      roundValue: true
	    };

	  } else if( type.regex || type.regexes ){

	    // first check enums
	    if( type.enums ){
	      var enumProp = checkEnums();

	      if( enumProp ){ return enumProp; }
	    }

	    var regexes = type.regexes ? type.regexes : [ type.regex ];

	    for( var i = 0; i < regexes.length; i++ ){
	      var regex = new RegExp( regexes[i] ); // make a regex from the type string
	      var m = regex.exec( value );

	      if( m ){ // regex matches
	        return {
	          name: name,
	          value: m,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };

	      }
	    }

	    return null; // didn't match any

	  } else if( type.string ){
	    // just return
	    return {
	      name: name,
	      value: value,
	      strValue: '' + value,
	      bypass: propIsBypass
	    };

	  } else if( type.enums ){ // check enums last because it's a combo type in others
	    return checkEnums();

	  } else {
	    return null; // not a type we can handle
	  }

	};

	module.exports = styfn;

	},{"../is":77,"../util":94}],89:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');

	var styfn = {};

	(function(){
	  var number = util.regex.number;
	  var rgba = util.regex.rgbaNoBackRefs;
	  var hsla = util.regex.hslaNoBackRefs;
	  var hex3 = util.regex.hex3;
	  var hex6 = util.regex.hex6;
	  var data = function( prefix ){ return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$'; };
	  var mapData = function( prefix ){
	    var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6;
	    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
	  };

	  // each visual style property has a type and needs to be validated according to it
	  styfn.types = {
	    time: { number: true, min: 0, units: 's|ms', implicitUnits: 'ms' },
	    percent: { number: true, min: 0, max: 100, units: '%', implicitUnits: '%' },
	    zeroOneNumber: { number: true, min: 0, max: 1, unitless: true },
	    nOneOneNumber: { number: true, min: -1, max: 1, unitless: true },
	    nonNegativeInt: { number: true, min: 0, integer: true, unitless: true },
	    position: { enums: ['parent', 'origin'] },
	    nodeSize: { number: true, min: 0, enums: ['auto', 'label'] },
	    number: { number: true, unitless: true },
	    numbers: { number: true, unitless: true, multiple: true },
	    size: { number: true, min: 0 },
	    bidirectionalSize: { number: true }, // allows negative
	    bidirectionalSizes: { number: true, multiple: true }, // allows negative
	    bgSize: { number: true, min: 0, allowPercent: true },
	    bgWH: { number: true, min: 0, allowPercent: true, enums: ['auto'] },
	    bgPos: { number: true, allowPercent: true },
	    bgRepeat: { enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'] },
	    bgFit: { enums: ['none', 'contain', 'cover'] },
	    bgClip: { enums: ['none', 'node'] },
	    color: { color: true },
	    bool: { enums: ['yes', 'no'] },
	    lineStyle: { enums: ['solid', 'dotted', 'dashed'] },
	    borderStyle: { enums: ['solid', 'dotted', 'dashed', 'double'] },
	    curveStyle: { enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments'] },
	    fontFamily: { regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$' },
	    fontVariant: { enums: ['small-caps', 'normal'] },
	    fontStyle: { enums: ['italic', 'normal', 'oblique'] },
	    fontWeight: { enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900] },
	    textDecoration: { enums: ['none', 'underline', 'overline', 'line-through'] },
	    textTransform: { enums: ['none', 'uppercase', 'lowercase'] },
	    textWrap: { enums: ['none', 'wrap'] },
	    textBackgroundShape: { enums: ['rectangle', 'roundrectangle']},
	    nodeShape: { enums: ['rectangle', 'roundrectangle', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'heptagon', 'octagon', 'star', 'diamond', 'vee', 'rhomboid', 'polygon'] },
	    compoundIncludeLabels: { enums: ['include', 'exclude'] },
	    arrowShape: { enums: ['tee', 'triangle', 'triangle-tee', 'triangle-backcurve', 'half-triangle-overshot', 'vee', 'square', 'circle', 'diamond', 'none'] },
	    arrowFill: { enums: ['filled', 'hollow'] },
	    display: { enums: ['element', 'none'] },
	    visibility: { enums: ['hidden', 'visible'] },
	    valign: { enums: ['top', 'center', 'bottom'] },
	    halign: { enums: ['left', 'center', 'right'] },
	    text: { string: true },
	    data: { mapping: true, regex: data('data') },
	    layoutData: { mapping: true, regex: data('layoutData') },
	    scratch: { mapping: true, regex: data('scratch') },
	    mapData: { mapping: true, regex: mapData('mapData') },
	    mapLayoutData: { mapping: true, regex: mapData('mapLayoutData') },
	    mapScratch: { mapping: true, regex: mapData('mapScratch') },
	    fn: { mapping: true, fn: true },
	    url: { regex: '^url\\s*\\(\\s*([^\\s]+)\\s*\\s*\\)|none|(.+)$' },
	    propList: { propList: true },
	    angle: { number: true, units: 'deg|rad', implicitUnits: 'rad' },
	    textRotation: { enums: ['none', 'autorotate'] },
	    polygonPointList: { number: true, multiple: true, evenMultiple: true, min: -1, max: 1, unitless: true },
	    easing: {
	      regexes: [
	        '^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$',
	        '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'
	      ],
	      enums: [
	        'linear',
	        'ease', 'ease-in', 'ease-out', 'ease-in-out',
	        'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine',
	        'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad',
	        'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic',
	        'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart',
	        'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint',
	        'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo',
	        'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ'
	      ]
	    }
	  };

	  // define visual style properties
	  var t = styfn.types;
	  var props = styfn.properties = [
	    // labels
	    { name: 'text-valign', type: t.valign },
	    { name: 'text-halign', type: t.halign },
	    { name: 'color', type: t.color },
	    { name: 'label', type: t.text },
	    { name: 'text-outline-color', type: t.color },
	    { name: 'text-outline-width', type: t.size },
	    { name: 'text-outline-opacity', type: t.zeroOneNumber },
	    { name: 'text-opacity', type: t.zeroOneNumber },
	    { name: 'text-background-color', type: t.color },
	    { name: 'text-background-opacity', type: t.zeroOneNumber },
	    { name: 'text-border-opacity', type: t.zeroOneNumber },
	    { name: 'text-border-color', type: t.color },
	    { name: 'text-border-width', type: t.size },
	    { name: 'text-border-style', type: t.borderStyle },
	    { name: 'text-background-shape', type: t.textBackgroundShape},
	    // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas
	    { name: 'text-transform', type: t.textTransform },
	    { name: 'text-wrap', type: t.textWrap },
	    { name: 'text-max-width', type: t.size },
	    { name: 'text-events', type: t.bool },

	    // { name: 'text-rotation', type: t.angle }, // TODO disabled b/c rotation breaks bounding boxes
	    { name: 'font-family', type: t.fontFamily },
	    { name: 'font-style', type: t.fontStyle },
	    // { name: 'font-variant', type: t.fontVariant }, // not useful
	    { name: 'font-weight', type: t.fontWeight },
	    { name: 'font-size', type: t.size },
	    { name: 'min-zoomed-font-size', type: t.size },
	    { name: 'edge-text-rotation', type: t.textRotation },

	    // behaviour
	    { name: 'events', type: t.bool },

	    // visibility
	    { name: 'display', type: t.display },
	    { name: 'visibility', type: t.visibility },
	    { name: 'opacity', type: t.zeroOneNumber },
	    { name: 'z-index', type: t.nonNegativeInt },

	    // overlays
	    { name: 'overlay-padding', type: t.size },
	    { name: 'overlay-color', type: t.color },
	    { name: 'overlay-opacity', type: t.zeroOneNumber },

	    // shadows
	    { name: 'shadow-blur', type: t.size },
	    { name: 'shadow-color', type: t.color },
	    { name: 'shadow-opacity', type: t.zeroOneNumber },
	    { name: 'shadow-offset-x', type: t.bidirectionalSize },
	    { name: 'shadow-offset-y', type: t.bidirectionalSize },

	    // label shadows
	    { name: 'text-shadow-blur', type: t.size },
	    { name: 'text-shadow-color', type: t.color },
	    { name: 'text-shadow-opacity', type: t.zeroOneNumber },
	    { name: 'text-shadow-offset-x', type: t.bidirectionalSize },
	    { name: 'text-shadow-offset-y', type: t.bidirectionalSize },

	    // transition anis
	    { name: 'transition-property', type: t.propList },
	    { name: 'transition-duration', type: t.time },
	    { name: 'transition-delay', type: t.time },
	    { name: 'transition-timing-function', type: t.easing },

	    // node body
	    { name: 'height', type: t.nodeSize },
	    { name: 'width', type: t.nodeSize },
	    { name: 'shape', type: t.nodeShape },
	    { name: 'shape-polygon-points', type: t.polygonPointList },
	    { name: 'background-color', type: t.color },
	    { name: 'background-opacity', type: t.zeroOneNumber },
	    { name: 'background-blacken', type: t.nOneOneNumber },
	    { name: 'padding-left', type: t.size },
	    { name: 'padding-right', type: t.size },
	    { name: 'padding-top', type: t.size },
	    { name: 'padding-bottom', type: t.size },

	    // node border
	    { name: 'border-color', type: t.color },
	    { name: 'border-opacity', type: t.zeroOneNumber },
	    { name: 'border-width', type: t.size },
	    { name: 'border-style', type: t.borderStyle },

	    // node background images
	    { name: 'background-image', type: t.url },
	    { name: 'background-image-opacity', type: t.zeroOneNumber },
	    { name: 'background-position-x', type: t.bgPos },
	    { name: 'background-position-y', type: t.bgPos },
	    { name: 'background-repeat', type: t.bgRepeat },
	    { name: 'background-fit', type: t.bgFit },
	    { name: 'background-clip', type: t.bgClip },
	    { name: 'background-width', type: t.bgWH },
	    { name: 'background-height', type: t.bgWH },

	    // compound props
	    { name: 'position', type: t.position },
	    { name: 'compound-sizing-wrt-labels', type: t.compoundIncludeLabels },

	    // edge line
	    { name: 'line-style', type: t.lineStyle },
	    { name: 'line-color', type: t.color },
	    { name: 'curve-style', type: t.curveStyle },
	    { name: 'haystack-radius', type: t.zeroOneNumber },
	    { name: 'control-point-step-size', type: t.size },
	    { name: 'control-point-distances', type: t.bidirectionalSizes },
	    { name: 'control-point-weights', type: t.numbers },
	    { name: 'segment-distances', type: t.bidirectionalSizes },
	    { name: 'segment-weights', type: t.numbers },

	    // these are just for the core
	    { name: 'selection-box-color', type: t.color },
	    { name: 'selection-box-opacity', type: t.zeroOneNumber },
	    { name: 'selection-box-border-color', type: t.color },
	    { name: 'selection-box-border-width', type: t.size },
	    { name: 'active-bg-color', type: t.color },
	    { name: 'active-bg-opacity', type: t.zeroOneNumber },
	    { name: 'active-bg-size', type: t.size },
	    { name: 'outside-texture-bg-color', type: t.color },
	    { name: 'outside-texture-bg-opacity', type: t.zeroOneNumber }
	  ];

	  // define aliases
	  var aliases = styfn.aliases = [
	    { name: 'content', pointsTo: 'label' },
	    { name: 'control-point-distance', pointsTo: 'control-point-distances' },
	    { name: 'control-point-weight', pointsTo: 'control-point-weights' }
	  ];

	  // pie backgrounds for nodes
	  styfn.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)
	  props.push({ name: 'pie-size', type: t.bgSize });
	  for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
	    props.push({ name: 'pie-'+i+'-background-color', type: t.color });
	    props.push({ name: 'pie-'+i+'-background-size', type: t.percent });
	    props.push({ name: 'pie-'+i+'-background-opacity', type: t.zeroOneNumber });
	  }

	  // edge arrows
	  var arrowPrefixes = styfn.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
	  [
	    { name: 'arrow-shape', type: t.arrowShape },
	    { name: 'arrow-color', type: t.color },
	    { name: 'arrow-fill', type: t.arrowFill }
	  ].forEach(function( prop ){
	    arrowPrefixes.forEach(function( prefix ){
	      var name = prefix + '-' + prop.name;
	      var type = prop.type;

	      props.push({ name: name, type: type });
	    });
	  }, {});

	  // list of property names
	  styfn.propertyNames = props.map(function(p){ return p.name; });

	  // allow access of properties by name ( e.g. style.properties.height )
	  for( var i = 0; i < props.length; i++ ){
	    var prop = props[i];

	    props[ prop.name ] = prop; // allow lookup by name
	  }

	  // map aliases
	  for( var i = 0; i < aliases.length; i++ ){
	    var alias = aliases[i];
	    var pointsToProp = props[ alias.pointsTo ];
	    var aliasProp = {
	      name: alias.name,
	      alias: true,
	      pointsTo: pointsToProp
	    };

	    // add alias prop for parsing
	    props.push( aliasProp );

	    props[ alias.name ] = aliasProp; // allow lookup by name
	  }
	})();

	// adds the default stylesheet to the current style
	styfn.addDefaultStylesheet = function(){
	  // fill the style with the default stylesheet
	  this
	    .selector('node, edge') // common properties
	      .css( util.extend( {
	        'events': 'yes',
	        'text-events': 'no',
	        'text-valign': 'top',
	        'text-halign': 'center',
	        'color': '#000',
	        'text-outline-color': '#000',
	        'text-outline-width': 0,
	        'text-outline-opacity': 1,
	        'text-opacity': 1,
	        'text-decoration': 'none',
	        'text-transform': 'none',
	        'text-wrap': 'none',
	        'text-max-width': 9999,
	        'text-background-color': '#000',
	        'text-background-opacity': 0,
	        'text-border-opacity': 0,
	        'text-border-width': 0,
	        'text-border-style': 'solid',
	        'text-border-color':'#000',
	        'text-background-shape':'rectangle',
	        'font-family': 'Helvetica Neue, Helvetica, sans-serif',
	        'font-style': 'normal',
	        // 'font-variant': fontVariant,
	        'font-weight': 'normal',
	        'font-size': 16,
	        'min-zoomed-font-size': 0,
	        'edge-text-rotation': 'none',
	        'visibility': 'visible',
	        'display': 'element',
	        'opacity': 1,
	        'z-index': 0,
	        'label': '',
	        'overlay-opacity': 0,
	        'overlay-color': '#000',
	        'overlay-padding': 10,
	        'shadow-opacity': 0,
	        'shadow-color': '#000',
	        'shadow-blur': 10,
	        'shadow-offset-x': 0,
	        'shadow-offset-y': 0,
	        'text-shadow-opacity': 0,
	        'text-shadow-color': '#000',
	        'text-shadow-blur': 5,
	        'text-shadow-offset-x': 0,
	        'text-shadow-offset-y': 0,
	        'transition-property': 'none',
	        'transition-duration': 0,
	        'transition-delay': 0,
	        'transition-timing-function': 'linear',

	        // node props
	        'background-blacken': 0,
	        'background-color': '#888',
	        'background-opacity': 1,
	        'background-image': 'none',
	        'background-image-opacity': 1,
	        'background-position-x': '50%',
	        'background-position-y': '50%',
	        'background-repeat': 'no-repeat',
	        'background-fit': 'none',
	        'background-clip': 'node',
	        'background-width': 'auto',
	        'background-height': 'auto',
	        'border-color': '#000',
	        'border-opacity': 1,
	        'border-width': 0,
	        'border-style': 'solid',
	        'height': 30,
	        'width': 30,
	        'shape': 'ellipse',
	        'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',

	        // compound props
	        'padding-top': 0,
	        'padding-bottom': 0,
	        'padding-left': 0,
	        'padding-right': 0,
	        'position': 'origin',
	        'compound-sizing-wrt-labels': 'include'
	      }, {
	        // node pie bg
	        'pie-size': '100%'
	      }, [
	        { name: 'pie-{{i}}-background-color', value: 'black' },
	        { name: 'pie-{{i}}-background-size', value: '0%' },
	        { name: 'pie-{{i}}-background-opacity', value: 1 }
	      ].reduce(function( css, prop ){
	        for( var i = 1; i <= styfn.pieBackgroundN; i++ ){
	          var name = prop.name.replace('{{i}}', i);
	          var val = prop.value;

	          css[ name ] = val;
	        }

	        return css;
	      }, {}), {
	        // edge props
	        'line-style': 'solid',
	        'line-color': '#ddd',
	        'control-point-step-size': 40,
	        'control-point-weights': 0.5,
	        'segment-weights': 0.5,
	        'segment-distances': 20,
	        'curve-style': 'bezier',
	        'haystack-radius': 0.8
	      }, [
	        { name: 'arrow-shape', value: 'none' },
	        { name: 'arrow-color', value: '#ddd' },
	        { name: 'arrow-fill', value: 'filled' }
	      ].reduce(function( css, prop ){
	        styfn.arrowPrefixes.forEach(function( prefix ){
	          var name = prefix + '-' + prop.name;
	          var val = prop.value;

	          css[ name ] = val;
	        });

	        return css;
	      }, {}) ) )
	    .selector('$node > node') // compound (parent) node properties
	      .css({
	        'width': 'auto',
	        'height': 'auto',
	        'shape': 'rectangle',
	        'padding-top': 10,
	        'padding-right': 10,
	        'padding-left': 10,
	        'padding-bottom': 10
	      })
	    .selector('edge') // just edge properties
	      .css({
	        'width': 1
	      })
	    .selector(':active')
	      .css({
	        'overlay-color': 'black',
	        'overlay-padding': 10,
	        'overlay-opacity': 0.25
	      })
	    .selector('core') // just core properties
	      .css({
	        'selection-box-color': '#ddd',
	        'selection-box-opacity': 0.65,
	        'selection-box-border-color': '#aaa',
	        'selection-box-border-width': 1,
	        'active-bg-color': 'black',
	        'active-bg-opacity': 0.15,
	        'active-bg-size': 30,
	        'outside-texture-bg-color': '#000',
	        'outside-texture-bg-opacity': 0.125
	      })
	  ;

	  this.defaultLength = this.length;
	};

	module.exports = styfn;

	},{"../util":94}],90:[function(_dereq_,module,exports){
	'use strict';

	var util = _dereq_('../util');
	var Selector = _dereq_('../selector');

	var styfn = {};

	styfn.applyFromString = function( string ){
	  var self = this;
	  var style = this;
	  var remaining = '' + string;
	  var selAndBlockStr;
	  var blockRem;
	  var propAndValStr;

	  // remove comments from the style string
	  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

	  function removeSelAndBlockFromRemaining(){
	    // remove the parsed selector and block from the remaining text to parse
	    if( remaining.length > selAndBlockStr.length ){
	      remaining = remaining.substr( selAndBlockStr.length );
	    } else {
	      remaining = '';
	    }
	  }

	  function removePropAndValFromRem(){
	    // remove the parsed property and value from the remaining block text to parse
	    if( blockRem.length > propAndValStr.length ){
	      blockRem = blockRem.substr( propAndValStr.length );
	    } else {
	      blockRem = '';
	    }
	  }

	  while(true){
	    var nothingLeftToParse = remaining.match(/^\s*$/);
	    if( nothingLeftToParse ){ break; }

	    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

	    if( !selAndBlock ){
	      util.error('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
	      break;
	    }

	    selAndBlockStr = selAndBlock[0];

	    // parse the selector
	    var selectorStr = selAndBlock[1];
	    if( selectorStr !== 'core' ){
	      var selector = new Selector( selectorStr );
	      if( selector._private.invalid ){
	        util.error('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr);

	        // skip this selector and block
	        removeSelAndBlockFromRemaining();
	        continue;
	      }
	    }

	    // parse the block of properties and values
	    var blockStr = selAndBlock[2];
	    var invalidBlock = false;
	    blockRem = blockStr;
	    var props = [];

	    while(true){
	      var nothingLeftToParse = blockRem.match(/^\s*$/);
	      if( nothingLeftToParse ){ break; }

	      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

	      if( !propAndVal ){
	        util.error('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
	        invalidBlock = true;
	        break;
	      }

	      propAndValStr = propAndVal[0];
	      var propStr = propAndVal[1];
	      var valStr = propAndVal[2];

	      var prop = self.properties[ propStr ];
	      if( !prop ){
	        util.error('Skipping property: Invalid property name in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      var parsedProp = style.parse( propStr, valStr );

	      if( !parsedProp ){
	        util.error('Skipping property: Invalid property definition in: ' + propAndValStr);

	        // skip this property in the block
	        removePropAndValFromRem();
	        continue;
	      }

	      props.push({
	        name: propStr,
	        val: valStr
	      });
	      removePropAndValFromRem();
	    }

	    if( invalidBlock ){
	      removeSelAndBlockFromRemaining();
	      break;
	    }

	    // put the parsed block in the style
	    style.selector( selectorStr );
	    for( var i = 0; i < props.length; i++ ){
	      var prop = props[i];
	      style.css( prop.name, prop.val );
	    }

	    removeSelAndBlockFromRemaining();
	  }

	  return style;
	};

	styfn.fromString = function( string ){
	  var style = this;

	  style.resetToDefault();
	  style.applyFromString( string );

	  return style;
	};

	module.exports = styfn;

	},{"../selector":81,"../util":94}],91:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('./is');
	var util = _dereq_('./util');
	var Style = _dereq_('./style');

	// a dummy stylesheet object that doesn't need a reference to the core
	// (useful for init)
	var Stylesheet = function(){
	  if( !(this instanceof Stylesheet) ){
	    return new Stylesheet();
	  }

	  this.length = 0;
	};

	var sheetfn = Stylesheet.prototype;

	sheetfn.instanceString = function(){
	  return 'stylesheet';
	};

	// just store the selector to be parsed later
	sheetfn.selector = function( selector ){
	  var i = this.length++;

	  this[i] = {
	    selector: selector,
	    properties: []
	  };

	  return this; // chaining
	};

	// just store the property to be parsed later
	sheetfn.css = function( name, value ){
	  var i = this.length - 1;

	  if( is.string(name) ){
	    this[i].properties.push({
	      name: name,
	      value: value
	    });
	  } else if( is.plainObject(name) ){
	    var map = name;

	    for( var j = 0; j < Style.properties.length; j++ ){
	      var prop = Style.properties[j];
	      var mapVal = map[ prop.name ];

	      if( mapVal === undefined ){ // also try camel case name
	        mapVal = map[ util.dash2camel(prop.name) ];
	      }

	      if( mapVal !== undefined ){
	        var name = prop.name;
	        var value = mapVal;

	        this[i].properties.push({
	          name: name,
	          value: value
	        });
	      }
	    }
	  }

	  return this; // chaining
	};

	sheetfn.style = sheetfn.css;

	// generate a real style object from the dummy stylesheet
	sheetfn.generateStyle = function( cy ){
	  var style = new Style(cy);

	  for( var i = 0; i < this.length; i++ ){
	    var context = this[i];
	    var selector = context.selector;
	    var props = context.properties;

	    style.selector(selector); // apply selector

	    for( var j = 0; j < props.length; j++ ){
	      var prop = props[j];

	      style.css( prop.name, prop.value ); // apply property
	    }
	  }

	  return style;
	};

	module.exports = Stylesheet;

	},{"./is":77,"./style":86,"./util":94}],92:[function(_dereq_,module,exports){
	/*! Weaver licensed under MIT (https://tldrlegal.com/license/mit-license), copyright Max Franz */

	// cross-env thread/worker
	// NB : uses (heavyweight) processes on nodejs so best not to create too many threads

	'use strict';

	var window = _dereq_('./window');
	var util = _dereq_('./util');
	var Promise = _dereq_('./promise');
	var Event = _dereq_('./event');
	var define = _dereq_('./define');
	var is = _dereq_('./is');

	var Thread = function( opts ){
	  if( !(this instanceof Thread) ){
	    return new Thread( opts );
	  }

	  var _p = this._private = {
	    requires: [],
	    files: [],
	    queue: null,
	    pass: [],
	    disabled: false
	  };

	  if( is.plainObject(opts) ){
	    if( opts.disabled != null ){
	      _p.disabled = !!opts.disabled;
	    }
	  }

	};

	var thdfn = Thread.prototype; // short alias

	var stringifyFieldVal = function( val ){
	  var valStr = is.fn( val ) ? val.toString() : "JSON.parse('" + JSON.stringify(val) + "')";

	  return valStr;
	};

	// allows for requires with prototypes and subobjs etc
	var fnAsRequire = function( fn ){
	  var req;
	  var fnName;

	  if( is.object(fn) && fn.fn ){ // manual fn
	    req = fnAs( fn.fn, fn.name );
	    fnName = fn.name;
	    fn = fn.fn;
	  } else if( is.fn(fn) ){ // auto fn
	    req = fn.toString();
	    fnName = fn.name;
	  } else if( is.string(fn) ){ // stringified fn
	    req = fn;
	  } else if( is.object(fn) ){ // plain object
	    if( fn.proto ){
	      req = '';
	    } else {
	      req = fn.name + ' = {};';
	    }

	    fnName = fn.name;
	    fn = fn.obj;
	  }

	  req += '\n';

	  var protoreq = function( val, subname ){
	    if( val.prototype ){
	      var protoNonempty = false;
	      for( var prop in val.prototype ){ protoNonempty = true; break; } // jshint ignore:line

	      if( protoNonempty ){
	        req += fnAsRequire( {
	          name: subname,
	          obj: val,
	          proto: true
	        }, val );
	      }
	    }
	  };

	  // pull in prototype
	  if( fn.prototype && fnName != null ){

	    for( var name in fn.prototype ){
	      var protoStr = '';

	      var val = fn.prototype[ name ];
	      var valStr = stringifyFieldVal( val );
	      var subname = fnName + '.prototype.' + name;

	      protoStr += subname + ' = ' + valStr + ';\n';

	      if( protoStr ){
	        req += protoStr;
	      }

	      protoreq( val, subname ); // subobject with prototype
	    }

	  }

	  // pull in properties for obj/fns
	  if( !is.string(fn) ){ for( var name in fn ){
	    var propsStr = '';

	    if( fn.hasOwnProperty(name) ){
	      var val = fn[ name ];
	      var valStr = stringifyFieldVal( val );
	      var subname = fnName + '["' + name + '"]';

	      propsStr += subname + ' = ' + valStr + ';\n';
	    }

	    if( propsStr ){
	      req += propsStr;
	    }

	    protoreq( val, subname ); // subobject with prototype
	  } }

	  return req;
	};

	var isPathStr = function( str ){
	  return is.string(str) && str.match(/\.js$/);
	};

	util.extend(thdfn, {

	  instanceString: function(){ return 'thread'; },

	  require: function( fn, as ){
	    var requires = this._private.requires;

	    if( isPathStr(fn) ){
	      this._private.files.push( fn );

	      return this;
	    }

	    if( as ){
	      if( is.fn(fn) ){
	        fn = { name: as, fn: fn };
	      } else {
	        fn = { name: as, obj: fn };
	      }
	    } else {
	      if( is.fn(fn) ){
	        if( !fn.name ){
	          throw 'The function name could not be automatically determined.  Use thread.require( someFunction, "someFunction" )';
	        }

	        fn = { name: fn.name, fn: fn };
	      }
	    }

	    requires.push( fn );

	    return this; // chaining
	  },

	  pass: function( data ){
	    this._private.pass.push( data );

	    return this; // chaining
	  },

	  run: function( fn, pass ){ // fn used like main()
	    var self = this;
	    var _p = this._private;
	    pass = pass || _p.pass.shift();

	    if( _p.stopped ){
	      throw 'Attempted to run a stopped thread!  Start a new thread or do not stop the existing thread and reuse it.';
	    }

	    if( _p.running ){
	      return ( _p.queue = _p.queue.then(function(){ // inductive step
	        return self.run( fn, pass );
	      }) );
	    }

	    var useWW = window != null && !_p.disabled;
	    var useNode = !window && typeof module !== 'undefined' && !_p.disabled;

	    self.trigger('run');

	    var runP = new Promise(function( resolve, reject ){

	      _p.running = true;

	      var threadTechAlreadyExists = _p.ran;

	      var fnImplStr = is.string( fn ) ? fn : fn.toString();

	      // worker code to exec
	      var fnStr = '\n' + ( _p.requires.map(function( r ){
	        return fnAsRequire( r );
	      }) ).concat( _p.files.map(function( f ){
	        if( useWW ){
	          var wwifyFile = function( file ){
	            if( file.match(/^\.\//) || file.match(/^\.\./) ){
	              return window.location.origin + window.location.pathname + file;
	            } else if( file.match(/^\//) ){
	              return window.location.origin + '/' + file;
	            }
	            return file;
	          };

	          return 'importScripts("' + wwifyFile(f) + '");';
	        } else if( useNode ) {
	          return 'eval( require("fs").readFileSync("' + f + '", { encoding: "utf8" }) );';
	        } else {
	          throw 'External file `' + f + '` can not be required without any threading technology.';
	        }
	      }) ).concat([
	        '( function(){',
	          'var ret = (' + fnImplStr + ')(' + JSON.stringify(pass) + ');',
	          'if( ret !== undefined ){ resolve(ret); }', // assume if ran fn returns defined value (incl. null), that we want to resolve to it
	        '} )()\n'
	      ]).join('\n');

	      // because we've now consumed the requires, empty the list so we don't dupe on next run()
	      _p.requires = [];
	      _p.files = [];

	      if( useWW ){
	        var fnBlob, fnUrl;

	        // add normalised thread api functions
	        if( !threadTechAlreadyExists ){
	          var fnPre = fnStr + '';

	          fnStr = [
	            'function _ref_(o){ return eval(o); };',
	            'function broadcast(m){ return message(m); };', // alias
	            'function message(m){ postMessage(m); };',
	            'function listen(fn){',
	            '  self.addEventListener("message", function(m){ ',
	            '    if( typeof m === "object" && (m.data.$$eval || m.data === "$$start") ){',
	            '    } else { ',
	            '      fn( m.data );',
	            '    }',
	            '  });',
	            '};',
	            'self.addEventListener("message", function(m){  if( m.data.$$eval ){ eval( m.data.$$eval ); }  });',
	            'function resolve(v){ postMessage({ $$resolve: v }); };',
	            'function reject(v){ postMessage({ $$reject: v }); };'
	          ].join('\n');

	          fnStr += fnPre;

	          fnBlob = new Blob([ fnStr ], {
	            type: 'application/javascript'
	          });
	          fnUrl = window.URL.createObjectURL( fnBlob );
	        }
	        // create webworker and let it exec the serialised code
	        var ww = _p.webworker = _p.webworker || new Worker( fnUrl );

	        if( threadTechAlreadyExists ){ // then just exec new run() code
	          ww.postMessage({
	            $$eval: fnStr
	          });
	        }

	        // worker messages => events
	        var cb;
	        ww.addEventListener('message', cb = function( m ){
	          var isObject = is.object(m) && is.object( m.data );

	          if( isObject && ('$$resolve' in m.data) ){
	            ww.removeEventListener('message', cb); // done listening b/c resolve()

	            resolve( m.data.$$resolve );
	          } else if( isObject && ('$$reject' in m.data) ){
	            ww.removeEventListener('message', cb); // done listening b/c reject()

	            reject( m.data.$$reject );
	          } else {
	            self.trigger( new Event(m, { type: 'message', message: m.data }) );
	          }
	        }, false);

	        if( !threadTechAlreadyExists ){
	          ww.postMessage('$$start'); // start up the worker
	        }

	      } else if( useNode ){
	        // create a new process

	        if( !_p.child ){
	          _p.child = ( _dereq_('child_process').fork( _dereq_('path').join(__dirname, 'thread-node-fork') ) );
	        }

	        var child = _p.child;

	        // child process messages => events
	        var cb;
	        child.on('message', cb = function( m ){
	          if( is.object(m) && ('$$resolve' in m) ){
	            child.removeListener('message', cb); // done listening b/c resolve()

	            resolve( m.$$resolve );
	          } else if( is.object(m) && ('$$reject' in m) ){
	            child.removeListener('message', cb); // done listening b/c reject()

	            reject( m.$$reject );
	          } else {
	            self.trigger( new Event({}, { type: 'message', message: m }) );
	          }
	        });

	        // ask the child process to eval the worker code
	        child.send({
	          $$eval: fnStr
	        });

	      } else { // use a fallback mechanism using a timeout

	        var promiseResolve = resolve;
	        var promiseReject = reject;

	        var timer = _p.timer = _p.timer || {

	          listeners: [],

	          exec: function(){
	            // as a string so it can't be mangled by minifiers and processors
	            fnStr = [
	              'function _ref_(o){ return eval(o); };',
	              'function broadcast(m){ return message(m); };',
	              'function message(m){ self.trigger( new Event({}, { type: "message", message: m }) ); };',
	              'function listen(fn){ timer.listeners.push( fn ); };',
	              'function resolve(v){ promiseResolve(v); };',
	              'function reject(v){ promiseReject(v); };'
	            ].join('\n') + fnStr;

	            // the .run() code
	            eval( fnStr ); // jshint ignore:line
	          },

	          message: function( m ){
	            var ls = timer.listeners;

	            for( var i = 0; i < ls.length; i++ ){
	              var fn = ls[i];

	              fn( m );
	            }
	          }

	        };

	        timer.exec();
	      }

	    }).then(function( v ){
	      _p.running = false;
	      _p.ran = true;

	      self.trigger('ran');

	      return v;
	    });

	    if( _p.queue == null ){
	      _p.queue = runP; // i.e. first step of inductive promise chain (for queue)
	    }

	    return runP;
	  },

	  // send the thread a message
	  message: function( m ){
	    var _p = this._private;

	    if( _p.webworker ){
	      _p.webworker.postMessage( m );
	    }

	    if( _p.child ){
	      _p.child.send( m );
	    }

	    if( _p.timer ){
	      _p.timer.message( m );
	    }

	    return this; // chaining
	  },

	  stop: function(){
	    var _p = this._private;

	    if( _p.webworker ){
	      _p.webworker.terminate();
	    }

	    if( _p.child ){
	      _p.child.kill();
	    }

	    if( _p.timer ){
	      // nothing we can do if we've run a timeout
	    }

	    _p.stopped = true;

	    return this.trigger('stop'); // chaining
	  },

	  stopped: function(){
	    return this._private.stopped;
	  }

	});

	// turns a stringified function into a (re)named function
	var fnAs = function( fn, name ){
	  var fnStr = fn.toString();
	  fnStr = fnStr.replace(/function\s*?\S*?\s*?\(/, 'function ' + name + '(');

	  return fnStr;
	};

	var defineFnal = function( opts ){
	  opts = opts || {};

	  return function fnalImpl( fn, arg1 ){
	    var fnStr = fnAs( fn, '_$_$_' + opts.name );

	    this.require( fnStr );

	    return this.run( [
	      'function( data ){',
	      '  var origResolve = resolve;',
	      '  var res = [];',
	      '  ',
	      '  resolve = function( val ){',
	      '    res.push( val );',
	      '  };',
	      '  ',
	      '  var ret = data.' + opts.name + '( _$_$_' + opts.name + ( arguments.length > 1 ? ', ' + JSON.stringify(arg1) : '' ) + ' );',
	      '  ',
	      '  resolve = origResolve;',
	      '  resolve( res.length > 0 ? res : ret );',
	      '}'
	    ].join('\n') );
	  };
	};

	util.extend(thdfn, {
	  reduce: defineFnal({ name: 'reduce' }),

	  reduceRight: defineFnal({ name: 'reduceRight' }),

	  map: defineFnal({ name: 'map' })
	});

	// aliases
	var fn = thdfn;
	fn.promise = fn.run;
	fn.terminate = fn.halt = fn.stop;
	fn.include = fn.require;

	// pull in event apis
	util.extend(thdfn, {
	  on: define.on(),
	  one: define.on({ unbindSelfOnTrigger: true }),
	  off: define.off(),
	  trigger: define.trigger()
	});

	define.eventAliasesOn( thdfn );

	module.exports = Thread;

	},{"./define":41,"./event":42,"./is":77,"./promise":80,"./util":94,"./window":100,"child_process":undefined,"path":undefined}],93:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	module.exports = {
	  // get [r, g, b] from #abc or #aabbcc
	  hex2tuple: function( hex ){
	    if( !(hex.length === 4 || hex.length === 7) || hex[0] !== "#" ){ return; }

	    var shortHex = hex.length === 4;
	    var r, g, b;
	    var base = 16;

	    if( shortHex ){
	      r = parseInt( hex[1] + hex[1], base );
	      g = parseInt( hex[2] + hex[2], base );
	      b = parseInt( hex[3] + hex[3], base );
	    } else {
	      r = parseInt( hex[1] + hex[2], base );
	      g = parseInt( hex[3] + hex[4], base );
	      b = parseInt( hex[5] + hex[6], base );
	    }

	    return [r, g, b];
	  },

	  // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)
	  hsl2tuple: function( hsl ){
	    var ret;
	    var h, s, l, a, r, g, b;
	    function hue2rgb(p, q, t){
	      if(t < 0) t += 1;
	      if(t > 1) t -= 1;
	      if(t < 1/6) return p + (q - p) * 6 * t;
	      if(t < 1/2) return q;
	      if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
	      return p;
	    }

	    var m = new RegExp("^" + this.regex.hsla + "$").exec(hsl);
	    if( m ){

	      // get hue
	      h = parseInt( m[1] );
	      if( h < 0 ){
	        h = ( 360 - (-1*h % 360) ) % 360;
	      } else if( h > 360 ){
	        h = h % 360;
	      }
	      h /= 360; // normalise on [0, 1]

	      s = parseFloat( m[2] );
	      if( s < 0 || s > 100 ){ return; } // saturation is [0, 100]
	      s = s/100; // normalise on [0, 1]

	      l = parseFloat( m[3] );
	      if( l < 0 || l > 100 ){ return; } // lightness is [0, 100]
	      l = l/100; // normalise on [0, 1]

	      a = m[4];
	      if( a !== undefined ){
	        a = parseFloat( a );

	        if( a < 0 || a > 1 ){ return; } // alpha is [0, 1]
	      }

	      // now, convert to rgb
	      // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
	      if( s === 0 ){
	        r = g = b = Math.round(l * 255); // achromatic
	      } else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = Math.round( 255 * hue2rgb(p, q, h + 1/3) );
	        g = Math.round( 255 * hue2rgb(p, q, h) );
	        b = Math.round( 255 * hue2rgb(p, q, h - 1/3) );
	      }

	      ret = [r, g, b, a];
	    }

	    return ret;
	  },

	  // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)
	  rgb2tuple: function( rgb ){
	    var ret;

	    var m = new RegExp("^" + this.regex.rgba + "$").exec(rgb);
	    if( m ){
	      ret = [];

	      var isPct = [];
	      for( var i = 1; i <= 3; i++ ){
	        var channel = m[i];

	        if( channel[ channel.length - 1 ] === "%" ){
	          isPct[i] = true;
	        }
	        channel = parseFloat( channel );

	        if( isPct[i] ){
	          channel = channel/100 * 255; // normalise to [0, 255]
	        }

	        if( channel < 0 || channel > 255 ){ return; } // invalid channel value

	        ret.push( Math.floor(channel) );
	      }

	      var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
	      var allArePct = isPct[1] && isPct[2] && isPct[3];
	      if( atLeastOneIsPct && !allArePct ){ return; } // must all be percent values if one is

	      var alpha = m[4];
	      if( alpha !== undefined ){
	        alpha = parseFloat( alpha );

	        if( alpha < 0 || alpha > 1 ){ return; } // invalid alpha value

	        ret.push( alpha );
	      }
	    }

	    return ret;
	  },

	  colorname2tuple: function( color ){
	    return this.colors[ color.toLowerCase() ];
	  },

	  color2tuple: function( color ){
	    return ( is.array(color) ? color : null )
	      || this.colorname2tuple(color)
	      || this.hex2tuple(color)
	      || this.rgb2tuple(color)
	      || this.hsl2tuple(color);
	  },

	  colors: {
	    // special colour names
	    transparent: [0, 0, 0, 0], // NB alpha === 0

	    // regular colours
	    aliceblue: [240, 248, 255],
	    antiquewhite: [250, 235, 215],
	    aqua: [0, 255, 255],
	    aquamarine: [127, 255, 212],
	    azure: [240, 255, 255],
	    beige: [245, 245, 220],
	    bisque: [255, 228, 196],
	    black: [0, 0, 0],
	    blanchedalmond: [255, 235, 205],
	    blue: [0, 0, 255],
	    blueviolet: [138, 43, 226],
	    brown: [165, 42, 42],
	    burlywood: [222, 184, 135],
	    cadetblue: [95, 158, 160],
	    chartreuse: [127, 255, 0],
	    chocolate: [210, 105, 30],
	    coral: [255, 127, 80],
	    cornflowerblue: [100, 149, 237],
	    cornsilk: [255, 248, 220],
	    crimson: [220, 20, 60],
	    cyan: [0, 255, 255],
	    darkblue: [0, 0, 139],
	    darkcyan: [0, 139, 139],
	    darkgoldenrod: [184, 134, 11],
	    darkgray: [169, 169, 169],
	    darkgreen: [0, 100, 0],
	    darkgrey: [169, 169, 169],
	    darkkhaki: [189, 183, 107],
	    darkmagenta: [139, 0, 139],
	    darkolivegreen: [85, 107, 47],
	    darkorange: [255, 140, 0],
	    darkorchid: [153, 50, 204],
	    darkred: [139, 0, 0],
	    darksalmon: [233, 150, 122],
	    darkseagreen: [143, 188, 143],
	    darkslateblue: [72, 61, 139],
	    darkslategray: [47, 79, 79],
	    darkslategrey: [47, 79, 79],
	    darkturquoise: [0, 206, 209],
	    darkviolet: [148, 0, 211],
	    deeppink: [255, 20, 147],
	    deepskyblue: [0, 191, 255],
	    dimgray: [105, 105, 105],
	    dimgrey: [105, 105, 105],
	    dodgerblue: [30, 144, 255],
	    firebrick: [178, 34, 34],
	    floralwhite: [255, 250, 240],
	    forestgreen: [34, 139, 34],
	    fuchsia: [255, 0, 255],
	    gainsboro: [220, 220, 220],
	    ghostwhite: [248, 248, 255],
	    gold: [255, 215, 0],
	    goldenrod: [218, 165, 32],
	    gray: [128, 128, 128],
	    grey: [128, 128, 128],
	    green: [0, 128, 0],
	    greenyellow: [173, 255, 47],
	    honeydew: [240, 255, 240],
	    hotpink: [255, 105, 180],
	    indianred: [205, 92, 92],
	    indigo: [75, 0, 130],
	    ivory: [255, 255, 240],
	    khaki: [240, 230, 140],
	    lavender: [230, 230, 250],
	    lavenderblush: [255, 240, 245],
	    lawngreen: [124, 252, 0],
	    lemonchiffon: [255, 250, 205],
	    lightblue: [173, 216, 230],
	    lightcoral: [240, 128, 128],
	    lightcyan: [224, 255, 255],
	    lightgoldenrodyellow: [250, 250, 210],
	    lightgray: [211, 211, 211],
	    lightgreen: [144, 238, 144],
	    lightgrey: [211, 211, 211],
	    lightpink: [255, 182, 193],
	    lightsalmon: [255, 160, 122],
	    lightseagreen: [32, 178, 170],
	    lightskyblue: [135, 206, 250],
	    lightslategray: [119, 136, 153],
	    lightslategrey: [119, 136, 153],
	    lightsteelblue: [176, 196, 222],
	    lightyellow: [255, 255, 224],
	    lime: [0, 255, 0],
	    limegreen: [50, 205, 50],
	    linen: [250, 240, 230],
	    magenta: [255, 0, 255],
	    maroon: [128, 0, 0],
	    mediumaquamarine: [102, 205, 170],
	    mediumblue: [0, 0, 205],
	    mediumorchid: [186, 85, 211],
	    mediumpurple: [147, 112, 219],
	    mediumseagreen: [60, 179, 113],
	    mediumslateblue: [123, 104, 238],
	    mediumspringgreen: [0, 250, 154],
	    mediumturquoise: [72, 209, 204],
	    mediumvioletred: [199, 21, 133],
	    midnightblue: [25, 25, 112],
	    mintcream: [245, 255, 250],
	    mistyrose: [255, 228, 225],
	    moccasin: [255, 228, 181],
	    navajowhite: [255, 222, 173],
	    navy: [0, 0, 128],
	    oldlace: [253, 245, 230],
	    olive: [128, 128, 0],
	    olivedrab: [107, 142, 35],
	    orange: [255, 165, 0],
	    orangered: [255, 69, 0],
	    orchid: [218, 112, 214],
	    palegoldenrod: [238, 232, 170],
	    palegreen: [152, 251, 152],
	    paleturquoise: [175, 238, 238],
	    palevioletred: [219, 112, 147],
	    papayawhip: [255, 239, 213],
	    peachpuff: [255, 218, 185],
	    peru: [205, 133, 63],
	    pink: [255, 192, 203],
	    plum: [221, 160, 221],
	    powderblue: [176, 224, 230],
	    purple: [128, 0, 128],
	    red: [255, 0, 0],
	    rosybrown: [188, 143, 143],
	    royalblue: [65, 105, 225],
	    saddlebrown: [139, 69, 19],
	    salmon: [250, 128, 114],
	    sandybrown: [244, 164, 96],
	    seagreen: [46, 139, 87],
	    seashell: [255, 245, 238],
	    sienna: [160, 82, 45],
	    silver: [192, 192, 192],
	    skyblue: [135, 206, 235],
	    slateblue: [106, 90, 205],
	    slategray: [112, 128, 144],
	    slategrey: [112, 128, 144],
	    snow: [255, 250, 250],
	    springgreen: [0, 255, 127],
	    steelblue: [70, 130, 180],
	    tan: [210, 180, 140],
	    teal: [0, 128, 128],
	    thistle: [216, 191, 216],
	    tomato: [255, 99, 71],
	    turquoise: [64, 224, 208],
	    violet: [238, 130, 238],
	    wheat: [245, 222, 179],
	    white: [255, 255, 255],
	    whitesmoke: [245, 245, 245],
	    yellow: [255, 255, 0],
	    yellowgreen: [154, 205, 50]
	  }
	};

	},{"../is":77}],94:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');
	var math = _dereq_('../math');

	var util = {

	  falsify: function(){ return false; },

	  zeroify: function(){ return 0; },

	  noop: function(){},

	  /* jshint ignore:start */
	  error: function( msg ){
	    if( console.error ){
	      console.error.apply( console, arguments );

	      if( console.trace ){ console.trace(); }
	    } else {
	      console.log.apply( console, arguments );

	      if( console.trace ){ console.trace(); }
	    }
	  },
	  /* jshint ignore:end */

	  clone: function( obj ){
	    return this.extend( {}, obj );
	  },

	  // gets a shallow copy of the argument
	  copy: function( obj ){
	    if( obj == null ){
	      return obj;
	    } if( is.array(obj) ){
	      return obj.slice();
	    } else if( is.plainObject(obj) ){
	      return this.clone( obj );
	    } else {
	      return obj;
	    }
	  }

	};

	util.makeBoundingBox = math.makeBoundingBox.bind( math );

	util._staticEmptyObject = {};

	util.staticEmptyObject = function(){
	  return util._staticEmptyObject;
	};

	util.extend = Object.assign != null ? Object.assign : function( tgt ){
	  var args = arguments;

	  for( var i = 1; i < args.length; i++ ){
	    var obj = args[i];

	    for( var k in obj ){
	      tgt[k] = obj[k];
	    }
	  }

	  return tgt;
	};

	[
	  _dereq_('./colors'),
	  _dereq_('./maps'),
	  { memoize: _dereq_('./memoize') },
	  _dereq_('./regex'),
	  _dereq_('./strings'),
	  _dereq_('./timing')
	].forEach(function( req ){
	  util.extend( util, req );
	});

	module.exports = util;

	},{"../is":77,"../math":79,"./colors":93,"./maps":95,"./memoize":96,"./regex":97,"./strings":98,"./timing":99}],95:[function(_dereq_,module,exports){
	'use strict';

	var is = _dereq_('../is');

	module.exports = {
	  // has anything been set in the map
	  mapEmpty: function( map ){
	    var empty = true;

	    if( map != null ){
	      for(var i in map){ // jshint ignore:line
	        empty = false;
	        break;
	      }
	    }

	    return empty;
	  },

	  // pushes to the array at the end of a map (map may not be built)
	  pushMap: function( options ){
	    var array = this.getMap(options);

	    if( array == null ){ // if empty, put initial array
	      this.setMap( this.extend({}, options, {
	        value: [ options.value ]
	      }) );
	    } else {
	      array.push( options.value );
	    }
	  },

	  // sets the value in a map (map may not be built)
	  setMap: function( options ){
	    var obj = options.map;
	    var key;
	    var keys = options.keys;
	    var l = keys.length;

	    for(var i = 0; i < l; i++){
	      var key = keys[i];

	      if( is.plainObject( key ) ){
	        this.error('Tried to set map with object key');
	      }

	      if( i < keys.length - 1 ){

	        // extend the map if necessary
	        if( obj[key] == null ){
	          obj[key] = {};
	        }

	        obj = obj[key];
	      } else {
	        // set the value
	        obj[key] = options.value;
	      }
	    }
	  },

	  // gets the value in a map even if it's not built in places
	  getMap: function( options ){
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;

	    for(var i = 0; i < l; i++){
	      var key = keys[i];

	      if( is.plainObject( key ) ){
	        this.error('Tried to get map with object key');
	      }

	      obj = obj[key];

	      if( obj == null ){
	        return obj;
	      }
	    }

	    return obj;
	  },

	  // deletes the entry in the map
	  deleteMap: function( options ){
	    var obj = options.map;
	    var keys = options.keys;
	    var l = keys.length;
	    var keepChildren = options.keepChildren;

	    for(var i = 0; i < l; i++){
	      var key = keys[i];

	      if( is.plainObject( key ) ){
	        this.error('Tried to delete map with object key');
	      }

	      var lastKey = i === options.keys.length - 1;
	      if( lastKey ){

	        if( keepChildren ){ // then only delete child fields not in keepChildren
	          for( var child in obj ){
	            if( !keepChildren[child] ){
	              obj[child] = undefined;
	            }
	          }
	        } else {
	          obj[key] = undefined;
	        }

	      } else {
	        obj = obj[key];
	      }
	    }
	  }
	};

	},{"../is":77}],96:[function(_dereq_,module,exports){
	'use strict';

	module.exports = function memoize( fn, keyFn ){
	  var self = this;
	  var cache = {};

	  if( !keyFn ){
	    keyFn = function(){
	      if( arguments.length === 1 ){
	        return arguments[0];
	      }

	      var args = [];

	      for( var i = 0; i < arguments.length; i++ ){
	        args.push( arguments[i] );
	      }

	      return args.join('$');
	    };
	  }

	  return function memoizedFn(){
	    var args = arguments;
	    var ret;
	    var k = keyFn.apply( self, args );

	    if( !(ret = cache[k]) ){
	      ret = cache[k] = fn.apply( self, args );
	    }

	    return ret;
	  };
	};

	},{}],97:[function(_dereq_,module,exports){
	'use strict';

	var number = "(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))";

	var rgba = "rgb[a]?\\(("+ number +"[%]?)\\s*,\\s*("+ number +"[%]?)\\s*,\\s*("+ number +"[%]?)(?:\\s*,\\s*("+ number +"))?\\)";
	var rgbaNoBackRefs = "rgb[a]?\\((?:"+ number +"[%]?)\\s*,\\s*(?:"+ number +"[%]?)\\s*,\\s*(?:"+ number +"[%]?)(?:\\s*,\\s*(?:"+ number +"))?\\)";

	var hsla = "hsl[a]?\\(("+ number +")\\s*,\\s*("+ number +"[%])\\s*,\\s*("+ number +"[%])(?:\\s*,\\s*("+ number +"))?\\)";
	var hslaNoBackRefs = "hsl[a]?\\((?:"+ number +")\\s*,\\s*(?:"+ number +"[%])\\s*,\\s*(?:"+ number +"[%])(?:\\s*,\\s*(?:"+ number +"))?\\)";

	var hex3 = "\\#[0-9a-fA-F]{3}";
	var hex6 = "\\#[0-9a-fA-F]{6}";

	module.exports = {
	  regex: {
	    number: number,
	    rgba: rgba,
	    rgbaNoBackRefs: rgbaNoBackRefs,
	    hsla: hsla,
	    hslaNoBackRefs: hslaNoBackRefs,
	    hex3: hex3,
	    hex6: hex6
	  }
	};

	},{}],98:[function(_dereq_,module,exports){
	'use strict';

	var memoize = _dereq_('./memoize');
	var is = _dereq_('../is');

	module.exports = {

	  camel2dash: memoize( function( str ){
	    return str.replace(/([A-Z])/g, function( v ){
	      return '-' + v.toLowerCase();
	    });
	  } ),

	  dash2camel: memoize( function( str ){
	    return str.replace(/(-\w)/g, function( v ){
	      return v[1].toUpperCase();
	    });
	  } ),

	  capitalize: function(str){
	    if( is.emptyString(str) ){
	      return str;
	    }

	    return str.charAt(0).toUpperCase() + str.substring(1);
	  }

	};

	},{"../is":77,"./memoize":96}],99:[function(_dereq_,module,exports){
	'use strict';

	var window = _dereq_('../window');
	var is = _dereq_('../is');
	var performance = window ? window.performance : null;

	var util = {};

	var raf = !window ? null : ( window.requestAnimationFrame || window.mozRequestAnimationFrame ||
	      window.webkitRequestAnimationFrame || window.msRequestAnimationFrame );

	raf = raf || function( fn ){
	  if( fn ){
	    setTimeout(function(){
	      fn( pnow() );
	    }, 1000/60);
	  }
	};

	util.requestAnimationFrame = function(fn){
	  raf( fn );
	};

	var pnow = performance && performance.now ? function(){ return performance.now(); } : function(){ return Date.now(); };

	util.performanceNow = pnow;

	// ported lodash throttle function
	util.throttle = function(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (options === false) {
	    leading = false;
	  } else if (is.plainObject(options)) {
	    leading = 'leading' in options ? options.leading : leading;
	    trailing = 'trailing' in options ? options.trailing : trailing;
	  }
	  options = options || {};
	  options.leading = leading;
	  options.maxWait = wait;
	  options.trailing = trailing;

	  return util.debounce(func, wait, options);
	};

	util.now = function(){
	  return Date.now();
	};

	util.debounce = function(func, wait, options) { // ported lodash debounce function
	  var util = this;
	  var args,
	      maxTimeoutId,
	      result,
	      stamp,
	      thisArg,
	      timeoutId,
	      trailingCall,
	      lastCalled = 0,
	      maxWait = false,
	      trailing = true;

	  if (!is.fn(func)) {
	    return;
	  }
	  wait = Math.max(0, wait) || 0;
	  if (options === true) {
	    var leading = true;
	    trailing = false;
	  } else if (is.plainObject(options)) {
	    leading = options.leading;
	    maxWait = 'maxWait' in options && (Math.max(wait, options.maxWait) || 0);
	    trailing = 'trailing' in options ? options.trailing : trailing;
	  }
	  var delayed = function() {
	    var remaining = wait - (util.now() - stamp);
	    if (remaining <= 0) {
	      if (maxTimeoutId) {
	        clearTimeout(maxTimeoutId);
	      }
	      var isCalled = trailingCall;
	      maxTimeoutId = timeoutId = trailingCall = undefined;
	      if (isCalled) {
	        lastCalled = util.now();
	        result = func.apply(thisArg, args);
	        if (!timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	      }
	    } else {
	      timeoutId = setTimeout(delayed, remaining);
	    }
	  };

	  var maxDelayed = function() {
	    if (timeoutId) {
	      clearTimeout(timeoutId);
	    }
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	    if (trailing || (maxWait !== wait)) {
	      lastCalled = util.now();
	      result = func.apply(thisArg, args);
	      if (!timeoutId && !maxTimeoutId) {
	        args = thisArg = null;
	      }
	    }
	  };

	  return function() {
	    args = arguments;
	    stamp = util.now();
	    thisArg = this;
	    trailingCall = trailing && (timeoutId || !leading);

	    if (maxWait === false) {
	      var leadingCall = leading && !timeoutId;
	    } else {
	      if (!maxTimeoutId && !leading) {
	        lastCalled = stamp;
	      }
	      var remaining = maxWait - (stamp - lastCalled),
	          isCalled = remaining <= 0;

	      if (isCalled) {
	        if (maxTimeoutId) {
	          maxTimeoutId = clearTimeout(maxTimeoutId);
	        }
	        lastCalled = stamp;
	        result = func.apply(thisArg, args);
	      }
	      else if (!maxTimeoutId) {
	        maxTimeoutId = setTimeout(maxDelayed, remaining);
	      }
	    }
	    if (isCalled && timeoutId) {
	      timeoutId = clearTimeout(timeoutId);
	    }
	    else if (!timeoutId && wait !== maxWait) {
	      timeoutId = setTimeout(delayed, wait);
	    }
	    if (leadingCall) {
	      isCalled = true;
	      result = func.apply(thisArg, args);
	    }
	    if (isCalled && !timeoutId && !maxTimeoutId) {
	      args = thisArg = null;
	    }
	    return result;
	  };
	};

	module.exports = util;

	},{"../is":77,"../window":100}],100:[function(_dereq_,module,exports){
	module.exports = ( typeof window === 'undefined' ? null : window );

	},{}]},{},[76])(76)
	});


	//# sourceMappingURL=cytoscape.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(223).setImmediate, "/"))

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(3).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(223).setImmediate, __webpack_require__(223).clearImmediate))

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(166);

	var _actions = __webpack_require__(225);

	var _EntityControl = __webpack_require__(226);

	var _EntityControl2 = _interopRequireDefault(_EntityControl);

	var _EntityList = __webpack_require__(227);

	var _EntityList2 = _interopRequireDefault(_EntityList);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var EntityPanel = function EntityPanel(_ref) {
	  var entities = _ref.entities;
	  var onEntityNameChange = _ref.onEntityNameChange;
	  var onAddReferenceEntryClick = _ref.onAddReferenceEntryClick;
	  var onReferenceValueChange = _ref.onReferenceValueChange;
	  var onSynonymsChange = _ref.onSynonymsChange;
	  return _react2.default.createElement(
	    'div',
	    { className: 'right_panel' },
	    _react2.default.createElement(_EntityControl2.default, null),
	    _react2.default.createElement(_EntityList2.default, { entities: entities,
	      onEntityNameChange: onEntityNameChange,
	      onAddReferenceEntryClick: onAddReferenceEntryClick,
	      onReferenceValueChange: onReferenceValueChange,
	      onSynonymsChange: onSynonymsChange })
	  );
	};

	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    entities: state.entities
	  };
	};

	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    onEntityNameChange: function onEntityNameChange(entityId, entityName) {
	      dispatch((0, _actions.changeEntityName)(entityId, entityName));
	    },
	    onAddReferenceEntryClick: function onAddReferenceEntryClick(entityId) {
	      dispatch((0, _actions.addReferenceEntry)(entityId));
	    },
	    onReferenceValueChange: function onReferenceValueChange(entityId, refId, refValue) {
	      dispatch((0, _actions.changeReferenceValue)(entityId, refId, refValue));
	    },
	    onSynonymsChange: function onSynonymsChange(entityId, refId, synonyms) {
	      dispatch((0, _actions.changeSynonyms)(entityId, refId, synonyms));
	    }
	  };
	};

	EntityPanel = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(EntityPanel);

	exports.default = EntityPanel;

/***/ },
/* 225 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var addEntity = exports.addEntity = function addEntity() {
	  return {
	    type: "ADD_ENTITY"
	  };
	};

	var changeEntityName = exports.changeEntityName = function changeEntityName(entityId, name) {
	  return {
	    type: "CHANGE_ENTITY_NAME",
	    entityId: entityId,
	    name: name
	  };
	};

	var saveEntities = exports.saveEntities = function saveEntities() {
	  return {
	    type: "SAVE_ENTITIES"
	  };
	};

	var addReferenceEntry = exports.addReferenceEntry = function addReferenceEntry(entityId) {
	  return {
	    type: "ADD_REFERENCE_ENTRY",
	    entityId: entityId
	  };
	};

	var changeReferenceValue = exports.changeReferenceValue = function changeReferenceValue(entityId, refId, refValue) {
	  return {
	    type: "CHANGE_REFERENCE_VALUE",
	    entityId: entityId,
	    refId: refId,
	    refValue: refValue
	  };
	};

	var changeSynonyms = exports.changeSynonyms = function changeSynonyms(entityId, refId, synonyms) {
	  return {
	    type: "CHANGE_SYNONYMS",
	    entityId: entityId,
	    refId: refId,
	    synonyms: synonyms
	  };
	};

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(166);

	var _actions = __webpack_require__(225);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var EntityControl = function EntityControl(_ref) {
	  var dispatch = _ref.dispatch;
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(
	      'button',
	      { className: 'btn btn-default',
	        onClick: function onClick() {
	          return dispatch((0, _actions.addEntity)());
	        } },
	      'Add Entity'
	    ),
	    _react2.default.createElement(
	      'button',
	      { className: 'btn btn-default',
	        onClick: function onClick() {
	          return dispatch((0, _actions.saveEntities)());
	        } },
	      'Save'
	    )
	  );
	};

	EntityControl = (0, _reactRedux.connect)()(EntityControl);

	exports.default = EntityControl;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Entity = __webpack_require__(228);

	var _Entity2 = _interopRequireDefault(_Entity);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var EntityList = function EntityList(_ref) {
	  var entities = _ref.entities;
	  var onEntityNameChange = _ref.onEntityNameChange;
	  var onAddReferenceEntryClick = _ref.onAddReferenceEntryClick;
	  var onReferenceValueChange = _ref.onReferenceValueChange;
	  var onSynonymsChange = _ref.onSynonymsChange;
	  return _react2.default.createElement(
	    'div',
	    null,
	    entities.map(function (entity, index) {
	      return _react2.default.createElement(_Entity2.default, { key: index,
	        entityId: index,
	        entity: entity,
	        onEntityNameChange: onEntityNameChange,
	        onAddReferenceEntryClick: onAddReferenceEntryClick,
	        onReferenceValueChange: onReferenceValueChange,
	        onSynonymsChange: onSynonymsChange });
	    })
	  );
	};

	EntityList.propTypes = {
	  entities: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    name: _react.PropTypes.string.isRequired,
	    entries: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	      value: _react.PropTypes.string.isRequired,
	      synonyms: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired
	    }).isRequired).isRequired
	  }).isRequired).isRequired,
	  onEntityNameChange: _react.PropTypes.func.isRequired,
	  onAddReferenceEntryClick: _react.PropTypes.func.isRequired,
	  onReferenceValueChange: _react.PropTypes.func.isRequired,
	  onSynonymsChange: _react.PropTypes.func.isRequired
	};

	exports.default = EntityList;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _EntityName = __webpack_require__(229);

	var _EntityName2 = _interopRequireDefault(_EntityName);

	var _ReferenceEntryList = __webpack_require__(230);

	var _ReferenceEntryList2 = _interopRequireDefault(_ReferenceEntryList);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Entity = function Entity(_ref) {
	  var entityId = _ref.entityId;
	  var entity = _ref.entity;
	  var onEntityNameChange = _ref.onEntityNameChange;
	  var onAddReferenceEntryClick = _ref.onAddReferenceEntryClick;
	  var onReferenceValueChange = _ref.onReferenceValueChange;
	  var onSynonymsChange = _ref.onSynonymsChange;
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_EntityName2.default, { entityId: entityId,
	      name: entity.name,
	      onEntityNameChange: onEntityNameChange }),
	    _react2.default.createElement(_ReferenceEntryList2.default, { entityId: entityId,
	      entries: entity.entries,
	      onReferenceValueChange: onReferenceValueChange,
	      onSynonymsChange: onSynonymsChange }),
	    _react2.default.createElement(
	      'button',
	      { className: 'btn btn-default',
	        onClick: function onClick() {
	          return onAddReferenceEntryClick(entityId);
	        } },
	      'Add Ref'
	    )
	  );
	};

	Entity.propTypes = {
	  entityId: _react.PropTypes.number.isRequired,
	  entity: _react.PropTypes.shape({
	    name: _react.PropTypes.string.isRequired,
	    entries: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	      value: _react.PropTypes.string.isRequired,
	      synonyms: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired
	    }).isRequired).isRequired
	  }).isRequired,
	  onEntityNameChange: _react.PropTypes.func.isRequired,
	  onAddReferenceEntryClick: _react.PropTypes.func.isRequired,
	  onReferenceValueChange: _react.PropTypes.func.isRequired,
	  onSynonymsChange: _react.PropTypes.func.isRequired
	};

	exports.default = Entity;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var EntityName = function EntityName(_ref) {
	  var entityId = _ref.entityId;
	  var name = _ref.name;
	  var onEntityNameChange = _ref.onEntityNameChange;
	  return _react2.default.createElement(
	    "div",
	    null,
	    _react2.default.createElement("input", { type: "text",
	      placeholder: "entity name",
	      value: name,
	      onChange: function onChange(e) {
	        return onEntityNameChange(entityId, e.target.value);
	      } })
	  );
	};

	EntityName.propTypes = {
	  entityId: _react.PropTypes.number.isRequired,
	  name: _react.PropTypes.string.isRequired,
	  onEntityNameChange: _react.PropTypes.func.isRequired
	};

	exports.default = EntityName;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _ReferenceEntry = __webpack_require__(231);

	var _ReferenceEntry2 = _interopRequireDefault(_ReferenceEntry);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ReferenceEntryList = function ReferenceEntryList(_ref) {
	  var entityId = _ref.entityId;
	  var entries = _ref.entries;
	  var onReferenceValueChange = _ref.onReferenceValueChange;
	  var onSynonymsChange = _ref.onSynonymsChange;
	  return _react2.default.createElement(
	    'div',
	    null,
	    entries.map(function (entry, index) {
	      return _react2.default.createElement(_ReferenceEntry2.default, { key: index,
	        entityId: entityId,
	        refId: index,
	        referenceValue: entry.value,
	        synonyms: entry.synonyms,
	        onReferenceValueChange: onReferenceValueChange,
	        onSynonymsChange: onSynonymsChange });
	    })
	  );
	};

	ReferenceEntryList.propTypes = {
	  entityId: _react.PropTypes.number.isRequired,
	  entries: _react.PropTypes.arrayOf(_react.PropTypes.shape({
	    value: _react.PropTypes.string.isRequired,
	    synonyms: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired
	  }).isRequired).isRequired,
	  onReferenceValueChange: _react.PropTypes.func.isRequired,
	  onSynonymsChange: _react.PropTypes.func.isRequired
	};

	exports.default = ReferenceEntryList;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _ReferenceValue = __webpack_require__(232);

	var _ReferenceValue2 = _interopRequireDefault(_ReferenceValue);

	var _SynonymList = __webpack_require__(233);

	var _SynonymList2 = _interopRequireDefault(_SynonymList);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ReferenceEntry = function ReferenceEntry(_ref) {
	  var entityId = _ref.entityId;
	  var refId = _ref.refId;
	  var referenceValue = _ref.referenceValue;
	  var synonyms = _ref.synonyms;
	  var onReferenceValueChange = _ref.onReferenceValueChange;
	  var onSynonymsChange = _ref.onSynonymsChange;
	  return _react2.default.createElement(
	    'div',
	    null,
	    _react2.default.createElement(_ReferenceValue2.default, { referenceValue: referenceValue,
	      entityId: entityId,
	      refId: refId,
	      onReferenceValueChange: onReferenceValueChange }),
	    _react2.default.createElement(_SynonymList2.default, { synonyms: synonyms,
	      entityId: entityId,
	      refId: refId,
	      onSynonymsChange: onSynonymsChange })
	  );
	};

	ReferenceEntry.propTypes = {
	  entityId: _react.PropTypes.number.isRequired,
	  refId: _react.PropTypes.number.isRequired,
	  referenceValue: _react.PropTypes.string.isRequired,
	  synonyms: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	  onReferenceValueChange: _react.PropTypes.func.isRequired,
	  onSynonymsChange: _react.PropTypes.func.isRequired
	};

	exports.default = ReferenceEntry;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ReferenceValue = function ReferenceValue(_ref) {
	  var entityId = _ref.entityId;
	  var refId = _ref.refId;
	  var referenceValue = _ref.referenceValue;
	  var onReferenceValueChange = _ref.onReferenceValueChange;
	  return _react2.default.createElement(
	    "div",
	    null,
	    _react2.default.createElement("input", { type: "text",
	      placeholder: "reference value",
	      value: referenceValue,
	      onChange: function onChange(e) {
	        return onReferenceValueChange(entityId, refId, e.target.value);
	      } })
	  );
	};

	ReferenceValue.propTypes = {
	  entityId: _react.PropTypes.number.isRequired,
	  refId: _react.PropTypes.number.isRequired,
	  referenceValue: _react.PropTypes.string.isRequired,
	  onReferenceValueChange: _react.PropTypes.func.isRequired
	};

	exports.default = ReferenceValue;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var SynonymList = function SynonymList(_ref) {
	  var entityId = _ref.entityId;
	  var refId = _ref.refId;
	  var synonyms = _ref.synonyms;
	  var onSynonymsChange = _ref.onSynonymsChange;
	  return _react2.default.createElement(
	    "div",
	    null,
	    _react2.default.createElement("input", {
	      type: "text",
	      placeholder: "synonym list",
	      value: synonyms.join(";"),
	      onChange: function onChange(e) {
	        return onSynonymsChange(entityId, refId, e.target.value);
	      } })
	  );
	};

	SynonymList.propTypes = {
	  entityId: _react.PropTypes.number.isRequired,
	  refId: _react.PropTypes.number.isRequired,
	  synonyms: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	  onSynonymsChange: _react.PropTypes.func.isRequired
	};

	exports.default = SynonymList;

/***/ }
/******/ ]);